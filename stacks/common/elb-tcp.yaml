#
# FILE: elb-tcp.yaml
#
# DESCRIPTION: This stack an Network Load Balancer and the corresponding
#   alarms.
#
---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'This netsted stack create an ElasticLoadBalancer'
Parameters: 
  ParentVpcStack: 
    Description: 'Enter the name of the VPC Stack where the LoadBalancer will reside'
    Type: String
    MinLength: 1
  HealthCheckPort:
    Description: 'The port to check'
    Type: Number
  HealthCheckPort2:
    Description: 'The port to check'
    Type: Number
    Default: -1
  ListenerPort:
    Description: 'The port to listen to'
    Type: Number
  ListenerPort2:
    Description: 'The port to listen to'
    Type: Number
    Default: -1
  Scheme:
    Description: 'Whether the load balancer is internet-facing or internal'
    Type: String
    AllowedValues:
      - internet-facing
      - internal
    Default: internet-facing
  SubDomainName:
    Description: 'The subdomain of the Internal DNS resolution'
    Type: String
    Default: ''
Conditions:
  IsPublic: !Equals [!Ref Scheme, 'internet-facing']
  CreateRecordSet: !Not [!Equals [!Ref SubDomainName, '']]
  HasTargetGroup2: !Not [!Equals [!Ref HealthCheckPort2, -1]]
Resources: 

  #----------------------------------------------------------------------------
  #
  # AWS Application LoadBalancer
  #
  # Most load balancer will be created with just one TargetGroup/Listener.
  # However in the case of Jenkins, the swarm client will need to connect on 
  # both the normal Jenkins port (8080), and the JNPL agent port (49817).
  # Therefore I need to allow the creation of a second Listener and associate
  # it to the same loadbalancer.
  #
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: !Ref Scheme
      Subnets: !If
        - IsPublic
        - - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZA'
          - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZB'
        - - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
          - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZB'
      Type: network
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-LoadBalancer'

  # The main TargetGroup/Listener group
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Port: !Ref HealthCheckPort
      Protocol: TCP
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-TargetGroup'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      TargetGroupAttributes:
        - Key: 'deregistration_delay.timeout_seconds'
          Value: 30

  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref ListenerPort
      Protocol: TCP

  # The second TargetGroup/Listener group
  TargetGroup2:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Condition: HasTargetGroup2
    Properties:
      Port: !Ref HealthCheckPort2
      Protocol: TCP
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-TargetGroup2'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      TargetGroupAttributes:
        - Key: 'deregistration_delay.timeout_seconds'
          Value: 30

  Listener2:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: HasTargetGroup2
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroup2
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref ListenerPort2
      Protocol: TCP

  #----------------------------------------------------------------------------
  #
  # AWS Route53
  #
  # We create the internal DNS RecordSet
  #
  RecordSet:
    Condition: CreateRecordSet
    Type: 'AWS::Route53::RecordSet'
    Properties:
      AliasTarget:
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt LoadBalancer.DNSName
      HostedZoneName: !Sub
      - '${HostedZoneName}.'
      - HostedZoneName: 
          'Fn::ImportValue': !Sub '${ParentVpcStack}-HostedZoneName'
      Name: !Sub
      - '${SubDomainName}.${HostedZoneName}'
      - SubDomainName: !Ref SubDomainName
        HostedZoneName: 
          'Fn::ImportValue': !Sub '${ParentVpcStack}-HostedZoneName'
      Type: A

  #----------------------------------------------------------------------------
  #
  # AWS CloudWatch Alarms
  #
  # We create a set of alarms for this specific load balancer, in order to alert
  #   us if something start to go astray...
  #
  UnHealthyHostCountTooHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'The number of targets that are considered unhealthy.'
      Namespace: 'AWS/NetworkELB'
      MetricName: UnHealthyHostCount
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-TopicHealth'
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt LoadBalancer.LoadBalancerFullName
      TreatMissingData: notBreaching

Outputs: 
  LoadBalancer: 
    Description: 'The LoadBalancer ARN'
    Value: !Ref LoadBalancer
  DNSName: 
    Description: 'The LoadBalancer DNSName'
    Value: !GetAtt LoadBalancer.DNSName
  RecordSet: 
    Condition: CreateRecordSet
    Description: 'The RecordSet created for this service'
    Value: !Ref RecordSet
  CanonicalHostedZoneID:
    Description: 'The LoadBalancer ARN'
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID
  TargetGroup: 
    Description: 'The TargetGroup ARN'
    Value: !Ref TargetGroup
  TargetGroup2:
    Condition: HasTargetGroup2
    Description: 'The TargetGroup ARN'
    Value: !Ref TargetGroup2
  UnHealthyHostCountTooHighAlarmArn:
    Description: 'The Alarm ARN'
    Value: !GetAtt UnHealthyHostCountTooHighAlarm.Arn
