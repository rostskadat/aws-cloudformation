#
# FILE: asg.yaml
#
# DESCRIPTION: This nested stack creates an AutoScalingGroup and is meant to 
#   be used by other stacks. It will create an AutoScalingGroup that will check
#   the Health of the given TargetGroup and spin up and down instances 
#   accordingly.
# 
# NOTE: The given LaunchConfiguration must signal to this resource upon 
#   creation. In order to do that you can call the /root/signal_asg.sh from
#   the UserData section of your LaunchConfiguration
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: 'This nested-stack sets up an AutoScalingGroup'
Parameters: 
  ParentVpcStack: 
    Description: 'Enter the name of the VPC Stack where the AutoScalingGroup will reside'
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the VPC stack'
  ParentStack:
    Description: 'Enter the name of the Parent Stack'
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the Parent stack'
  TargetGroup:
    Description: 'Enter the name of the TargetGroup'
    Type: String
    Default: ''
  TargetGroupOther:
    Description: 'Enter the name of the TargetGroup'
    Type: String
    Default: ''
  LaunchConfiguration:
    Description: 'Enter the name of the LaunchConfiguration'
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of a valid LaunchConfiguration'
  MaxSize:
    Description: 'The maximum size of the Auto Scaling group.'
    Type: Number
    Default: 2
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1
  MinSize:
    Description: 'The minimum size of the Auto Scaling group.'
    Type: Number
    Default: 1
    ConstraintDescription: 'Must be >= 0'
    MinValue: 0
  DesiredCapacity:
    Description: 'The desired start size of the Auto Scaling group.'
    Type: Number
    Default: 1
    ConstraintDescription: 'Must be >= 0'
    MinValue: 0
Conditions:
  HasTargetGroup: !Not [!Equals [!Ref TargetGroup, '']]
  HasTargetGroupOther: !Not [!Equals [!Ref TargetGroupOther, '']]
  HasZeroInstances: !Equals [!Ref DesiredCapacity, '0']
Resources: 

  #----------------------------------------------------------------------------
  #
  # AWS AutoScalingGroup
  #
  # We create an AutoScalingGroup. Note that all instances are launched in the 
  # VPC private subnets. Further more all TargetGroup are optionals. This is 
  # due to the fact that some stack migh take more time to start than the 
  # HealthCheck interval of the ELB. This in turn has the consequence that the 
  # instance does not have time to start before the LoadBalancer considers it
  # unhealthy and terminate it.
  #
  AutoScalingGroup: 
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      NotificationConfigurations:
        - TopicARN: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-TopicHealth'
          NotificationTypes:
            - 'autoscaling:EC2_INSTANCE_LAUNCH'
            - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
            - 'autoscaling:EC2_INSTANCE_TERMINATE'
            - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
      TargetGroupARNs:
        - !If [HasTargetGroup, !Ref TargetGroup, !Ref 'AWS::NoValue']
        - !If [HasTargetGroupOther, !Ref TargetGroupOther, !Ref 'AWS::NoValue']
      VPCZoneIdentifier: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZB'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
          PropagateAtLaunch: true
        - Key: Name
          Value: !Sub '${ParentStack}-Main'
          PropagateAtLaunch: true
    CreationPolicy: 
      ResourceSignal: 
        Timeout: PT25M
        Count: !If [HasZeroInstances, 0, 1]
    UpdatePolicy: 
      AutoScalingRollingUpdate: 
        MinInstancesInService: !Ref MinSize
        MaxBatchSize: 1
        PauseTime: PT25M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true

Outputs: 
  AutoScalingGroup: 
    Description: 'The LoadBalancer DNSName'
    Value: !Ref AutoScalingGroup
