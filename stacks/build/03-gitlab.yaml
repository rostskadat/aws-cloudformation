#
# FILE: 03-gitlab.yaml
#
# DESCRIPTION: This Stack create a Gitlab Host as well as an Internet facing LoadBalancer.
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "This stack create a Gitlab host"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stack'
      Parameters:
      - ParentVpcStack
      - ParentLDAPStack
      - ParentDBStack
    - Label: 
        default: 'EC2 Parameters'
      Parameters:
      - KeyName
      - IAMUserSSHAccess
      - InstanceType
    - Label: 
        default: 'LDAP Parameter'
      Parameters:
      - LDAPManagerPassword
    - Label:
        default: 'PostgreSQL DB Parameters'
      Parameters:
      - DBMasterPassword
    - Label:
        default: 'Gitlab Parameters'
      Parameters:
      - GitlabAdminEmail
      - GitlabAdminPassword
    - Label:
        default: 'SMTP Parameters'
      Parameters:
      - SmtpHostname
      - SmtpUsername
      - SmtpPassword
Parameters: 
  ParentVpcStack: 
    Description: "Enter the name of the VPC Stack where Gitlab will reside"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the VPC stack'
  ParentLDAPStack:
    Description: "Enter the name of the OpenLDAP Stack"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the LDAP stack'
  ParentDBStack:
    Description: 'Enter the name of the DB Stack'
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the DB stack'
  KeyName: 
    Description: "Optional Key Pair to connect through SSH"
    Type: "AWS::EC2::KeyPair::KeyName"
  IAMUserSSHAccess:
    Description: 'Synchronize public keys of IAM users to enable personalized SSH access (Doc: https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/).'
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  InstanceType:
    Description: 'The instance type'
    Type: String
    Default: 'c5.large'    
  LDAPManagerPassword: 
    Description: 'The LDAP Manager password'
    Type: String
    NoEcho: true
    MinLength: 3
  DBMasterPassword: 
    Description: 'The DB Admin password'
    Type: String
    NoEcho: true
    MinLength: 3
  GitlabAdminEmail: 
    Description: 'The Gitlab Root email'
    Type: String
    Default: 'application-admin@example.com'
  GitlabAdminPassword: 
    Description: 'The Gitlab Root password'
    Type: String
    MinLength: 1
    NoEcho: true
  SmtpHostname:
    Description: 'The name of the AWS SES smtp server to use'
    Type: String
    Default: 'email-smtp.eu-west-1.amazonaws.com'
  SmtpUsername:
    Description: 'The SMTP user (you can find it in the IAM console)'
    Type: String
    Default: 'AKIxxxxx'
  SmtpPassword:
    Description: 'The SMTP password (you can find it in the IAM console)'
    Type: String
    NoEcho: true
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
  HasIAMUserSSHAccess: !Equals [!Ref IAMUserSSHAccess, 'true']
  HasSMTP: !Not [!Equals [!Ref SmtpHostname, '']]
Resources: 

  #----------------------------------------------------------------------------
  #
  # FunctionGetVariable: This function is used to retrieve parameters from the
  # Parent VPC stack without having to actually call Fn::Import. This had 2 
  # objectives, 1) make URL retrieval more readable, and 2) use 'Custom::' type
  #
  FunctionGetVariable: 
    Type: 'Custom::FunctionGetVariable'
    Version: '1.0'
    Properties: 
      ServiceToken: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-FunctionGetVariable'

  #----------------------------------------------------------------------------
  #
  # AWS LoadBalancer
  #
  # We create the LoadBalancer
  #
  LoadBalancer:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Parameters:
        ParentVpcStack: !Sub '${ParentVpcStack}'
        HealthCheckPath: '/users/sign_in'
        HealthCheckPort: 80
        ListenerPort: 80
        SubDomainName: gitlab
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-ELB'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${FunctionGetVariable.S3ConfigBucketName}/stacks/common/elb-app.yaml'

  #----------------------------------------------------------------------------
  #
  # AWS EFS
  #
  # We create the filesystem used by the instance to share valuable data between
  #   scaling events
  #
  FileSystem:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Parameters:
        ParentVpcStack: !Sub '${ParentVpcStack}'
        ParentStack: !Sub '${AWS::StackName}'
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-EFS'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${FunctionGetVariable.S3ConfigBucketName}/stacks/common/efs.yaml'

  #----------------------------------------------------------------------------
  #
  # AWS AutoScalingGroup
  #
  # We create the AutoScalingGroup whose job is to create and terminate instances
  #   depending on the required capacity and the health of the instances.
  #
  AutoScalingGroup:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Parameters:
        ParentVpcStack: !Sub '${ParentVpcStack}'
        ParentStack: !Sub '${AWS::StackName}'
        TargetGroup: !GetAtt LoadBalancer.Outputs.TargetGroup
        LaunchConfiguration: !Ref LaunchConfiguration
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-ASG'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${FunctionGetVariable.S3ConfigBucketName}/stacks/common/asg.yaml'
    DependsOn:
      - FileSystem

  #----------------------------------------------------------------------------
  #
  # AWS CloudWatch Logs and Dashboard.
  #
  # We create the LogGroup used by the instances in this stack to stream their 
  # system logs to AWS CloudWatch. Note that the associated playbook will 
  # configure which logs will actually be streamed.
  # We also create a Dashboard on order to present a central point for all the
  # alarms defined for this stack.
  #
  LogGroup: 
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '${AWS::StackName}'
      RetentionInDays: 7

  Dashboard: 
    Type: 'AWS::CloudWatch::Dashboard'
    Properties:
      DashboardName: !Sub '${AWS::StackName}'
      DashboardBody: !Sub '{"widgets":[{"type":"metric","x":0,"y":0,"width":9,"height":9,"properties":{"title":"HTTPCodeELB5XXCountTooHighAlarm","annotations":{"alarms":["${LoadBalancer.Outputs.HTTPCodeELB5XXCountTooHighAlarm}"]},"view":"timeSeries","stacked":false}},{"type":"metric","x":9,"y":0,"width":9,"height":9,"properties":{"title":"HTTPCodeTarget5XXCountTooHighAlarm","annotations":{"alarms":["${LoadBalancer.Outputs.HTTPCodeTarget5XXCountTooHighAlarm}"]},"view":"timeSeries","stacked":false}},{"type":"metric","x":0,"y":9,"width":9,"height":6,"properties":{"title":"TargetConnectionErrorCountTooHighAlarm","annotations":{"alarms":["${LoadBalancer.Outputs.TargetConnectionErrorCountTooHighAlarm}"]},"view":"timeSeries","stacked":false}},{"type":"metric","x":9,"y":9,"width":9,"height":6,"properties":{"title":"RejectedConnectionCountTooHighAlarm","annotations":{"alarms":["${LoadBalancer.Outputs.RejectedConnectionCountTooHighAlarm}"]},"view":"timeSeries","stacked":false}},{"type":"text","x":18,"y":0,"width":6,"height":15,"properties":{"markdown":"\n# ${AWS::StackName}\n## Overview\n\nThis is the main Gitlab. You can access it [here](${LoadBalancer.Outputs.DNSName}). \n\n## Actions\n\nThe [${AWS::StackName}](#dashboards:name=${AWS::StackName}) stack should **only** be updated from the [CloudFormation](https://eu-west-1.console.aws.amazon.com/cloudformation/home) Console.\n\nYou can: \n* Open the [Logs](#logs:group=${AWS::StackName}) \n* Open the [EC2 Console](https://console.aws.amazon.com/ec2/v2/home?region=${AWS::Region}) for this VPC\n"}}]}'

  #----------------------------------------------------------------------------
  #
  # AWS EC2 LaunchConfiguration
  #
  # The launch configuration is reduced to a minimum. All provisioning is done
  # using ansible, which provides improved provisioning capabilities. Basically
  # the steps are as follow:
  # 1. Create a stack.yaml containing the stack parameters used by the playbook
  # 2. Download the playbook folder from the S3 bucket
  # 3. Launch the correct playbook.  
  #
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      AWS::CloudFormation::Init:
        configSets: 
          default: [ Install ] 
        Install: 
          packages: 
            yum: 
              ansible: []
          files:
            '/root/playbooks/group_vars/stack.yaml':
              content: !Sub |
                Region: '${AWS::Region}'
                StackName: '${AWS::StackName}'
                PromptName: '${AWS::StackName}'
                LogGroup: '${AWS::StackName}'
                S3ConfigBucketName: '${FunctionGetVariable.S3ConfigBucketName}'
                HasIAMUserSSHAccess: ${IAMUserSSHAccess}
                PlaybookInstall: /root/playbooks/gitlab.yaml

                LDAPDNSName: '{{LDAPDNSName}}'
                LDAPPort: '{{LDAPPort}}'
                LDAPRootDC: '{{LDAPRootDC}}'
                LDAPManagerDN: '{{LDAPManagerDN}}'
                LDAPManagerPassword: '${LDAPManagerPassword}'

                SmtpHostname: '${SmtpHostname}'
                SmtpUsername: '${SmtpUsername}'
                SmtpPassword: '${SmtpPassword}'

                FileSystem: '{{FileSystem}}'
                
                DBEndpointAddress: '{{DBEndpointAddress}}'
                DBEndpointPort: '{{DBEndpointPort}}'
                DBAdminUsername: '{{DBAdminUsername}}'
                DBAdminPassword: '${DBMasterPassword}'
                
                ExternalUrl: '${LoadBalancer.Outputs.DNSName}'

                GitlabAdminEmail: '${GitlabAdminEmail}'
                GitlabAdminPassword: '${GitlabAdminPassword}'
              mode: '000600'
              owner: root
              group: root
              context:
                DBEndpointAddress: 
                  'Fn::ImportValue': !Sub '${ParentDBStack}-EndpointAddress'
                DBEndpointPort: 
                  'Fn::ImportValue': !Sub '${ParentDBStack}-EndpointPort'
                FileSystem:
                  !GetAtt FileSystem.Outputs.FileSystem
                DBAdminUsername: 
                  'Fn::ImportValue': !Sub '${ParentDBStack}-MasterUsername'
                LDAPDNSName: 
                  'Fn::ImportValue': !Sub '${ParentLDAPStack}-DNSName'
                LDAPPort: 
                  'Fn::ImportValue': !Sub '${ParentLDAPStack}-Port'
                LDAPRootDC: 
                  'Fn::ImportValue': !Sub '${ParentLDAPStack}-RootDC'
                LDAPManagerDN: 
                  'Fn::ImportValue': !Sub '${ParentLDAPStack}-ManagerDN'
          commands:
            '01_get_playbook': 
              command: !Sub 'sudo aws s3 sync s3://${FunctionGetVariable.S3ConfigBucketName}/playbooks /root/playbooks --exclude "group_vars/*.*" --no-progress'
            '02_set_host': 
              command: 'sudo bash -c "echo $(uname -n) ansible_connection=local > /etc/ansible/hosts"'
            '03_run_playbook': 
              command: 'sudo bash /root/playbooks/run_playbook.sh /root/playbooks/gitlab.yaml'
    Properties: 
      IamInstanceProfile: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-InstanceProfileEC2Instance'      
      ImageId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-DefaultImageId'
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      SecurityGroups: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPrivate'
        - !Ref SecurityGroupHealthCheck
      UserData: 
        'Fn::Base64': !Sub |
          #!/bin/bash
          yum-config-manager --enable epel
          yum update -y
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --verbose --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          /root/signal_asg.sh $? ${AWS::Region} ${AWS::StackName} "ASG" "AutoScalingGroup"
  SecurityGroupHealthCheck:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group for the Health Check'
      VpcId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - CidrIp: 
          'Fn::ImportValue': !Sub '${ParentVpcStack}-CidrBlock'
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupHealthCheck'

  #----------------------------------------------------------------------------
  #
  # AWS SSM Associations
  #
  # We associate the target group with the 
  #
  AssociationBackup:
    Type: 'AWS::SSM::Association'
    Properties: 
      Name: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-BackupDocument'
      Parameters:
        Interval: [ daily ]
        Retain: [ 7 ]
      ScheduleExpression: 'cron(0 1 * * ? *)'
      Targets:
        - Key: 'Tag:Name'
          # BEWARE: this is the tag defined in the asg.yaml nested stack
          Values: [ !Sub '${AWS::StackName}-Main' ]

Outputs: 
  DNSName: 
    Description: 'Public DNS address of the internet facing ELB'
    Value: !GetAtt LoadBalancer.Outputs.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
  AdminUsername:      
    Description: 'The Admin user name for the server'
    Value: 'root'
    Export:
      Name: !Sub '${AWS::StackName}-AdminUsername'
      