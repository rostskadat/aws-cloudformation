#
# FILE: 01-openldap.yaml
#
# DESCRIPTION: This Stack create a OpenLDAP Host that will be used by subsequent stack to manage Identification.
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "This stack create a OpenLDAP host"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stack'
      Parameters:
      - ParentVpcStack
    - Label:
        default: 'EC2 Parameters'
      Parameters:
      - KeyName
      - IAMUserSSHAccess
      - InstanceType
    - Label:
        default: 'LDAP Parameters'
      Parameters:
      - LDAPAdminEmail
      - RootDC
      - ManagerPassword
      - LDAPUsersLdif
Parameters: 
  ParentVpcStack: 
    Description: "Enter the name of the VPC Parent Stack"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the parent VPC stack (01-vpc.yaml)'
  KeyName: 
    Description: "Optional Key Pair to connect through SSH"
    Type: "AWS::EC2::KeyPair::KeyName"
  IAMUserSSHAccess:
    Description: 'Synchronize public keys of IAM users to enable personalized SSH access (Doc: https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/).'
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  InstanceType:
    Description: 'The Host Instance type'
    Type: 'String'
    Default: 't2.micro'    
  LDAPAdminEmail:
    Description: 'The LDAP Admin email'
    Type: String
    Default: 'ldap-admin@example.com'
  RootDC: 
    Description: 'The LDAP Root DC element'
    Type: String
    Default: 'dc=example,dc=com'
    MinLength: 3
    AllowedPattern: '(dc=[^,]+)(,dc=[^,]+)*'
    ConstraintDescription: 'must be the name of the Domain Component to use as root of your LDAP domain'
  ManagerPassword: 
    Description: 'The LDAP Manager password'
    Type: String
    NoEcho: true
    MinLength: 3
  LDAPUsersLdif: 
    Description: 'The LDAP initial User database. Should be an S3 url containing an LDIF database with the same RootDC as above'
    Type: String
    Default: 's3://mybucketname/import.ldif'
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
  HasIAMUserSSHAccess: !Equals [!Ref IAMUserSSHAccess, 'true']
Resources: 

  FunctionGetVariable: 
    Type: 'Custom::FunctionGetVariable'
    Version: '1.0'
    Properties: 
      ServiceToken: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-FunctionGetVariable'

  #----------------------------------------------------------------------------
  #
  # AWS LoadBalancer
  #
  # We create the LoadBalancer
  #
  LoadBalancer:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Parameters:
        ParentVpcStack: !Sub '${ParentVpcStack}'
        HealthCheckPort: 389
        ListenerPort: 389
        Scheme: internal
        SubDomainName: ldap
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-ELB'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${FunctionGetVariable.S3ConfigBucketName}/stacks/common/elb-tcp.yaml'

  #----------------------------------------------------------------------------
  #
  # AWS AutoScalingGroup
  #
  # We create the AutoScalingGroup whose job is to create and terminate instances
  #   depending on the required capacity and the health of the instances.
  #
  AutoScalingGroup:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Parameters:
        ParentVpcStack: !Sub '${ParentVpcStack}'
        ParentStack: !Sub '${AWS::StackName}'
        TargetGroup: !GetAtt LoadBalancer.Outputs.TargetGroup
        LaunchConfiguration: !Ref LaunchConfiguration
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-ASG'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${FunctionGetVariable.S3ConfigBucketName}/stacks/common/asg.yaml'

  #----------------------------------------------------------------------------
  #
  # AWS CloudWatch Logs
  #
  # We create the LogGroup used by the instances in this stack.
  #
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '${AWS::StackName}'
      RetentionInDays: 7

  #----------------------------------------------------------------------------
  #
  # AWS EC2
  #
  # We create the LaunchConfiguration used by the AutoScalingGroup to provision
  #   the instances in this stack
  #
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      AWS::CloudFormation::Init:
        configSets: 
          default: [ Install ] 
        Install: 
          packages: 
            yum: 
              ansible: []
          files:
            '/root/playbooks/group_vars/stack.yaml':
              content: !Sub |
                Region: '${AWS::Region}'
                StackName: '${AWS::StackName}'
                LogGroup: '${AWS::StackName}'
                S3ConfigBucketName: '${FunctionGetVariable.S3ConfigBucketName}'
                HasIAMUserSSHAccess: ${IAMUserSSHAccess}
                
                RootDC: '${RootDC}'
                ManagerPassword: '${ManagerPassword}'
                LDAPUsersLdif: '${LDAPUsersLdif}'
              mode: '000600'
              owner: root
              group: root
          commands:
            '01_get_playbook': 
              command: !Sub 'sudo aws s3 sync s3://${FunctionGetVariable.S3ConfigBucketName}/playbooks /root/playbooks --exclude "group_vars/*.*" --no-progress'
            '02_set_host': 
              command: 'sudo bash -c "echo $(uname -n) ansible_connection=local > /etc/ansible/hosts"'
            '03_run_playbook': 
              command: 'sudo ansible-playbook /root/playbooks/openldap.yaml --extra-vars=@/root/playbooks/group_vars/stack.yaml --skip-tags "cleanup"'
    Properties: 
      IamInstanceProfile: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-InstanceProfileEC2Instance'      
      ImageId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-DefaultImageId'
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      SecurityGroups: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPrivate'
        - !Ref SecurityGroupHealthCheck
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          yum-config-manager --enable epel
          yum update -y
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --verbose --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          /root/signal_asg.sh $? ${AWS::Region} ${AWS::StackName}
  SecurityGroupHealthCheck:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group for the Health Check'
      VpcId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - CidrIp: 
          'Fn::ImportValue': !Sub '${ParentVpcStack}-CidrBlock'
        FromPort: 389
        ToPort: 389
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupHealthCheck'
Outputs: 
  DNSName:
    Description: 'Hostname to use when connecting'
    Value: !GetAtt LoadBalancer.Outputs.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
  Port:
    Description: 'LDAP port to use when connecting'
    Value: 389
    Export:
      Name: !Sub '${AWS::StackName}-Port'
  RootDC: 
    Description: 'LDAP URL to use when connecting'
    Value: !Sub '${RootDC}'
    Export:
      Name: !Sub '${AWS::StackName}-RootDC'
  ManagerDN: 
    Description: 'Root DN to use when accessing the LDAP Server'
    Value: !Sub 'cn=Manager,${RootDC}'
    Export:
      Name: !Sub '${AWS::StackName}-ManagerDN'
      