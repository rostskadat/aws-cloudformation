#
# FILE: 07-sonarqube.yaml
#
# DESCRIPTION: This Stack create a Sonarqube Host as well as an Internet facing LoadBalancer.
#
# NOTE: in order to create the AMI mapping you can run the following command. (needs a bit of massaging: 
#   should extract the ami and the region name, and output everything in the YAML compatible format)
# 
# for region in $(aws ec2 describe-regions --query 'Regions[*].{Name:RegionName}' --output text); do
#   aws --region $region ec2 describe-images --owners amazon --filters "Name=name,Values=amzn-ami-hvm-$(date +%Y)*-gp2" "Name=architecture,Values=x86_64" "Name=root-device-type,Values=ebs" --query 'Images[*].{ID:ImageId}'
# done
#
# TODO: 
# - Should use https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html#aws-specific-parameter-types
# - Should use NestedStack as described in https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html
# - Should provide alert when the platform is unhealthy
# - LOOK AT https://docs.sonarqube.org/display/SONAR/Hardware+Recommendations
# - Configure email for admin user: architectureemergingtechnologies@allfundsbank.com
# - Configure webhooks for gitlab or jenkins: cf https://redirect.sonarsource.com/doc/webhooks.html
# - Configure Jenkins CI: sonar.links.ci
# - Configure Gitlab SCM: sonar.links.scm
# - Confiure server base URL: sonar.core.serverBaseURL
# - Should install plugins through API: POST  /web_api/api/plugins -F key=sonar-findbugs
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "This stack create a Sonarqube host"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stack'
      Parameters:
      - ParentVpcStack
      - ParentLDAPStack
      - ParentDBStack
      - ParentGitlabStack
    - Label: 
        default: 'EC2 Parameters'
      Parameters:
      - KeyName
      - InstanceType
    - Label: 
        default: 'LDAP Parameter'
      Parameters:
      - LDAPManagerPassword
    - Label:
        default: 'DB Parameters'
      Parameters:
      - DBMasterPassword
    - Label:
        default: 'Gitlab Parameters'
      Parameters:
      - GitlabAdminPassword
    - Label:
        default: 'Sonarqube Parameters'
      Parameters:
      - SonarqubeAdminEmail
      - SonarqubeAdminPassword
Parameters: 
  ParentVpcStack: 
    Description: "Enter the name of the VPC Stack where Sonarqube will reside"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the VPC stack'
  ParentLDAPStack:
    Description: "Enter the name of the OpenLDAP Stack"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the LDAP stack'
  ParentDBStack:
    Description: 'Enter the name of the DB Stack'
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the DB stack'
  ParentGitlabStack:
    Description: 'Enter the name of the Gitlab Stack'
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the Gitlab stack'
  KeyName: 
    Description: "Optional Key Pair to connect through SSH"
    Type: "AWS::EC2::KeyPair::KeyName"
  InstanceType:
    Description: 'The instance type'
    Type: String
    Default: 'c5.large'    
  LDAPManagerPassword: 
    Description: 'The LDAP Manager password'
    Type: String
    NoEcho: true
    MinLength: 3
  DBMasterPassword: 
    Description: 'The DB Admin password'
    Type: String
    NoEcho: true
    MinLength: 3
  GitlabAdminPassword: 
    Description: 'The Gitlab Root password'
    Type: String
    NoEcho: true
    MinLength: 3
  SonarqubeAdminEmail: 
    Description: 'The Sonarqube Admin email'
    Type: String
    Default: 'admin@example.com'
  SonarqubeAdminPassword: 
    Description: 'The Sonarqube Admin password'
    Type: String
    MinLength: 1
    NoEcho: true
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
Resources: 

  FunctionGetVariable: 
    Type: 'Custom::FunctionGetVariable'
    Version: '1.0'
    Properties: 
      ServiceToken: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-FunctionGetVariable'

  AutoScalingGroup: 
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      NotificationConfigurations:
        - TopicARN: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-TopicHealth'
          NotificationTypes:
            - 'autoscaling:EC2_INSTANCE_LAUNCH'
            - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
            - 'autoscaling:EC2_INSTANCE_TERMINATE'
            - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZB'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
          PropagateAtLaunch: true
        - Key: Name
          Value: !Sub '${AWS::StackName}-Main'
          PropagateAtLaunch: true
    CreationPolicy: 
      ResourceSignal: 
        Timeout: PT15M
        Count: 1
    UpdatePolicy: 
      AutoScalingRollingUpdate: 
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
    DependsOn:
      - MountTargetA
      - MountTargetB

  #----------------------------------------------------------------------------
  #
  # AWS LoadBalancer
  #
  # We create the LoadBalancer used by the AutoScalingGroup to handle scaling 
  #   event
  #
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPublic'
      Subnets: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZB'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-LoadBalancer'
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/about'
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 9000
      Protocol: HTTP
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-TargetGroup'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      TargetGroupAttributes:
        - Key: 'deregistration_delay.timeout_seconds'
          Value: 30
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  #----------------------------------------------------------------------------
  #
  # AWS EFS
  #
  # We create the filesystem used by the instance to share valuable data between
  #   scaling events
  #
  FileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties: 
      Encrypted: true
      FileSystemTags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-FileSystem'
      PerformanceMode: generalPurpose
  MountTargetA:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupEFS'
      SubnetId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
  MountTargetB:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupEFS'
      SubnetId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZB'

  #----------------------------------------------------------------------------
  #
  # AWS CloudWatch
  #
  # We create the LogGroup used by the instances in this stack.
  #
  LogGroup: 
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '${AWS::StackName}'
      RetentionInDays: 7

  #----------------------------------------------------------------------------
  #
  # AWS EC2
  #
  # We create the LaunchConfiguration used by the AutoScalingGroup to provision
  #   the instances in this stack
  #
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      AWS::CloudFormation::Init:
        configSets: 
          default: [ Install ] 
        Install: 
          packages: 
            yum: 
              ansible: []
          files:
            '/root/playbooks/group_vars/stack.yaml':
              content: !Sub |
                Region: '${AWS::Region}'
                StackName: '${AWS::StackName}'
                LogGroup: '${AWS::StackName}'
                S3ConfigBucketName: '${FunctionGetVariable.S3ConfigBucketName}'

                LDAPDNSName: '{{LDAPDNSName}}'
                LDAPPort: '{{LDAPPort}}'
                LDAPRootDC: '{{LDAPRootDC}}'
                LDAPManagerDN: '{{LDAPManagerDN}}'
                LDAPManagerPassword: '${LDAPManagerPassword}'

                FileSystem: '${FileSystem}'
                
                DBEndpointAddress: '{{DBEndpointAddress}}'
                DBEndpointPort: '{{DBEndpointPort}}'
                DBAdminUsername: '{{DBAdminUsername}}'
                DBAdminPassword: '${DBMasterPassword}'
                
                GitlabDNSName: '{{GitlabDNSName}}'
                GitlabAdminUsername: '{{GitlabAdminUsername}}'
                GitlabAdminPassword: '${GitlabAdminPassword}'
                
                SonarqubeAdminEmail: '${SonarqubeAdminEmail}'
                SonarqubeAdminPassword: '${SonarqubeAdminPassword}'
                
              mode: '000600'
              owner: root
              group: root
              context:
                DBEndpointAddress: 
                  'Fn::ImportValue': !Sub '${ParentDBStack}-EndpointAddress'
                DBEndpointPort: 
                  'Fn::ImportValue': !Sub '${ParentDBStack}-EndpointPort'
                DBAdminUsername: 
                  'Fn::ImportValue': !Sub '${ParentDBStack}-MasterUsername'
                LDAPDNSName: 
                  'Fn::ImportValue': !Sub '${ParentLDAPStack}-DNSName'
                LDAPPort: 
                  'Fn::ImportValue': !Sub '${ParentLDAPStack}-LDAPPort'
                LDAPRootDC: 
                  'Fn::ImportValue': !Sub '${ParentLDAPStack}-RootDC'
                LDAPManagerDN: 
                  'Fn::ImportValue': !Sub '${ParentLDAPStack}-ManagerDN'
                GitlabAdminUsername: 
                  'Fn::ImportValue': !Sub '${ParentGitlabStack}-GitlabAdminUsername'
                GitlabDNSName: 
                  'Fn::ImportValue': !Sub '${ParentGitlabStack}-DNSName'
          commands:
            '01_get_playbook': 
              command: !Sub 'sudo aws s3 sync s3://${FunctionGetVariable.S3ConfigBucketName}/playbooks /root/playbooks --exclude "group_vars/*.*" --no-progress'
            '02_set_host': 
              command: 'sudo bash -c "echo $(uname -n) ansible_connection=local > /etc/ansible/hosts"'
            '03_run_playbook': 
              command: 'sudo ansible-playbook /root/playbooks/sonarqube.yaml --extra-vars=@/root/playbooks/group_vars/stack.yaml'
    Properties: 
      IamInstanceProfile: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-InstanceProfileEC2Instance'      
      ImageId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-DefaultImageId'
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      SecurityGroups: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPrivate'
        - !Ref SecurityGroupHealthCheck
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          yum-config-manager --enable epel
          yum update -y
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --verbose --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          /opt/aws/bin/cfn-signal -e $?   --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
  SecurityGroupHealthCheck:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group for the Health Check'
      VpcId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - CidrIp: 
          'Fn::ImportValue': !Sub '${ParentVpcStack}-CidrBlock'
        FromPort: 9000
        ToPort: 9000
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupHealthCheck'

Outputs: 
  DNSName: 
    Description: 'Public DNS address of the internet facing ELB'
    Value: !Sub '${LoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
  SonarqubeAdminUsername:      
    Description: 'The Admin user name for the server'
    Value: 'admin'
    Export:
      Name: !Sub '${AWS::StackName}-SonarqubeAdminUsername'
