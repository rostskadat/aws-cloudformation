#
# FILE: 02-bastion.yaml
#
# DESCRIPTION: This Stack create a Bastion Host in the DMZ of the Parent VPC stack. 
#   The Bastion Host is necessary in order to access other instances within the VPC.
#
# TODO: 
# - disable SSH root logins, set **PermitRootLogin** to "no" in **/etc/ssh/sshd_config**
# - was listening on TCP port(s) 111, 37001, 44147, 51981
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "This stack create a Bastion host"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stack'
      Parameters:
      - ParentVpcStack
    - Label: 
        default: 'EC2 Parameters'
      Parameters:
      - KeyName
      - IAMUserSSHAccess
Parameters: 
  ParentVpcStack: 
    Description: "Enter the name of the VPC Parent Stack"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the parent VPC stack (01-vpc.yaml)'
  KeyName: 
    Description: "Enter the name of the Key Pair for your instances"
    Type: "AWS::EC2::KeyPair::KeyName"
    MinLength: 1
    ConstraintDescription: 'must be the name of an existing Key Pair to use to log to the EC2 Instance'
  IAMUserSSHAccess:
    Description: 'Synchronize public keys of IAM users to enable personalized SSH access (Doc: https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/).'
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
  HasIAMUserSSHAccess: !Equals [!Ref IAMUserSSHAccess, 'true']
Resources: 

  #----------------------------------------------------------------------------
  #
  # GetConfig: This function is used to retrieve parameters from the
  # Parent VPC stack without having to actually call Fn::Import. This had 2 
  # objectives, 1) make URL retrieval more readable, and 2) use 'Custom::' type
  #
  GetConfig: 
    Type: 'Custom::GetConfig'
    Properties: 
      ServiceToken: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-GetConfig'

  #----------------------------------------------------------------------------
  #
  # AWS LoadBalancer
  #
  # We create a public TCP load balancer in order to access the underlying 
  # BASTION host. This nested stack will create:
  # - a Load Balancer 
  # - a unhealthy alarm
  # - a record set to be able to access the load balancer with a friendly name
  #
  LoadBalancer:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Parameters:
        ParentVpcStack: !Sub '${ParentVpcStack}'
        HealthCheckPort: 22
        ListenerPort: 22
        SubDomainName: 
          'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-ELB'
      TemplateURL: !Sub '${GetConfig.S3ConfigBucketHTTPSUrl}/stacks/common/elb-tcp.yaml'

  #----------------------------------------------------------------------------
  #
  # AWS AutoScalingGroup
  #
  # We create the AutoScalingGroup whose job is to create and terminate instances
  #   depending on the required capacity and the health of the instances.
  #
  AutoScalingGroup:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Parameters:
        ParentVpcStack: !Sub '${ParentVpcStack}'
        ParentStack: !Sub '${AWS::StackName}'
        TargetGroup: !GetAtt LoadBalancer.Outputs.TargetGroup
        LaunchConfiguration: !Ref LaunchConfiguration
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-ASG'
      TemplateURL: !Sub '${GetConfig.S3ConfigBucketHTTPSUrl}/stacks/common/asg.yaml'

  #----------------------------------------------------------------------------
  #
  # AWS CloudWatch Logs and Dashboard.
  #
  # We create the LogGroup used by the instances in this stack to stream their 
  # system logs to AWS CloudWatch. Note that the associated playbook will 
  # configure which logs will actually be streamed.
  # We also create a Dashboard on order to present a central point for all the
  # alarms defined for this stack.
  #
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '${AWS::StackName}'
      RetentionInDays: 7

  Dashboard: 
    Type: 'AWS::CloudWatch::Dashboard'
    Properties:
      DashboardName: !Sub '${AWS::StackName}'
      DashboardBody: !Sub '{"widgets":[{"type":"metric","x":0,"y":0,"width":9,"height":9,"properties":{"title":"UnHealthyHostCountTooHighAlarmArn ","annotations":{"alarms":["${LoadBalancer.Outputs.UnHealthyHostCountTooHighAlarmArn}"]},"view":"timeSeries","stacked":false}},{"type":"text","x":18,"y":0,"width":6,"height":9,"properties":{"markdown":"\n# ${AWS::StackName}\n## Overview\n\nThis is the main LDAP. It is not accessible directly from internet. \n\n## Actions\n\nThe [${AWS::StackName}](#dashboards:name=${AWS::StackName}) stack should **only** be updated from the [CloudFormation](https://eu-west-1.console.aws.amazon.com/cloudformation/home) Console.\n\nYou can: \n* Open the [Logs](#logs:group=${AWS::StackName}) \n* Open the [EC2 Console](https://console.aws.amazon.com/ec2/v2/home?region=${AWS::Region}) for this VPC\n"}}]}'

  #----------------------------------------------------------------------------
  #
  # AWS EC2 LaunchConfiguration
  #
  # The launch configuration is reduced to a minimum. All provisioning is done
  # using ansible, which provides improved provisioning capabilities. Basically
  # the steps are as follow:
  # 1. Create a stack.yaml containing the stack parameters used by the playbook
  # 2. Download the playbook folder from the S3 bucket
  # 3. Launch the correct playbook.  
  #
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      AWS::CloudFormation::Init:
        configSets: 
          default: [ Install ] 
        Install: 
          packages: 
            yum: 
              ansible: []
          files:
            '/root/playbooks/group_vars/stack.yaml':
              content: !Sub |
                Region: '${AWS::Region}'
                StackName: '${AWS::StackName}'
                PromptName: '${AWS::StackName}'
                LogGroup: '${AWS::StackName}'
                S3ConfigBucketName: '${GetConfig.S3ConfigBucketName}'
                HasIAMUserSSHAccess: ${IAMUserSSHAccess}
                PlaybookInstall: /root/playbooks/bastion.yaml
                PlaybookBackup: /root/playbooks/backup.yaml
              mode: '000600'
              owner: root
              group: root
          commands:
            '01_get_playbook': 
              command: !Sub 'sudo aws s3 sync ${GetConfig.S3ConfigBucketS3Url}/playbooks /root/playbooks --exclude "group_vars/*.*" --no-progress'
            '02_set_host': 
              command: 'sudo bash -c "echo $(uname -n) ansible_connection=local > /etc/ansible/hosts"'
            '03_run_playbook': 
              command: 'sudo bash /root/playbooks/run_playbook.sh /root/playbooks/bastion.yaml'
    Properties: 
      IamInstanceProfile: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-InstanceProfileEC2Instance'      
      ImageId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-DefaultImageId'
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      SecurityGroups: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupDMZ'
        - !Ref SecurityGroupHealthCheck
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          yum-config-manager --enable epel
          yum update -y
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --verbose --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          /root/signal_asg.sh $? ${AWS::Region} ${AWS::StackName} "ASG" "AutoScalingGroup"
  SecurityGroupHealthCheck:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group for the Health Check'
      VpcId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - CidrIp: 
          'Fn::ImportValue': !Sub '${ParentVpcStack}-CidrBlock'
        FromPort: 22
        ToPort: 22
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupHealthCheck'
Outputs: 
  DNSName:
    Description: 'Hostname to use when connecting'
    Value: !GetAtt LoadBalancer.Outputs.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
