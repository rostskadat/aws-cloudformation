#
# FILE: 01-vpc.yaml
#
# DESCRIPTION: This Stack create a VPC with:
#   - a DMZ which allow access only from specific IP (should be a VPN gateway).
#   - 2 Public Subnets in different AZ with an Internet Gateway and a NAT Gateway
#   - 2 Private Subnets in different AZ with a routing table pointing to the NAT Gateway
#
# TODO: 
# - Should use https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html#aws-specific-parameter-types
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: This stack create a simple multi-tier VPC with a DMZ, and public/private subnet in 2 AZs
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'S3 Settings'
      Parameters:
      - S3ConfigBucketName
    - Label:
        default: 'General Settings'
      Parameters:
      - AWSInspectorDLQEmail
      - UseVPCFlowLog
      - HealthNotificationEmail
Parameters: 
  S3ConfigBucketName:
    Description: 'Enter the name of the S3 bucket name where to find the configuration files'
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the S3 bucket name where to find the configuration files'
  AWSInspectorDLQEmail:
    Description: 'Enter an email address where AWS Inspector should send findings that can not be automatically fixed'
    Type: String
    Default: 'admin@example.com'
    ConstraintDescription: 'must be a valid email address'
    AllowedPattern: '^[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,64}$'
  UseVPCFlowLog:
    Description: 'Allow VPC Flow Logs for forensic analysis'
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  HealthNotificationEmail:
    Description: 'Enter an email address to send Health Notification to'
    Type: String
    Default: 'admin@example.com'
    ConstraintDescription: 'must be a valid email address'
    AllowedPattern: '^[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,64}$'
Conditions: 
  HasFlowLog: !Equals [!Ref UseVPCFlowLog, 'true']
Mappings:
  # cf. files/root/create_region_map.sh
  RegionMap:
    ap-northeast-1: 
      ImageId: ami-9c9443e3
      RulesPackageArns:
        - 'arn:aws:inspector:ap-northeast-1:406045910587:rulespackage/0-7WNjqgGu'
        - 'arn:aws:inspector:ap-northeast-1:406045910587:rulespackage/0-bBUQnxMq'
        - 'arn:aws:inspector:ap-northeast-1:406045910587:rulespackage/0-gHP9oWNT'
        - 'arn:aws:inspector:ap-northeast-1:406045910587:rulespackage/0-knGBhqEu'
    ap-northeast-2:
      ImageId: ami-ebc47185
      RulesPackageArns:
        - 'arn:aws:inspector:ap-northeast-2:526946625049:rulespackage/0-2WRpmi4n'
        - 'arn:aws:inspector:ap-northeast-2:526946625049:rulespackage/0-PoGHMznc'
        - 'arn:aws:inspector:ap-northeast-2:526946625049:rulespackage/0-PoYq7lI7'
        - 'arn:aws:inspector:ap-northeast-2:526946625049:rulespackage/0-T9srhg1z'
    ap-south-1:
      ImageId: ami-5a8da735
      RulesPackageArns:
        - 'arn:aws:inspector:ap-south-1:162588757376:rulespackage/0-EhMQZy6C'
        - 'arn:aws:inspector:ap-south-1:162588757376:rulespackage/0-LqnJE9dO'
        - 'arn:aws:inspector:ap-south-1:162588757376:rulespackage/0-PSUlX14m'
        - 'arn:aws:inspector:ap-south-1:162588757376:rulespackage/0-fs0IZZBj'
    ap-southeast-1:
      ImageId: ami-ed838091
    ap-southeast-2:
      ImageId: ami-33f92051
      RulesPackageArns:
        - 'arn:aws:inspector:ap-southeast-2:454640832652:rulespackage/0-D5TGAxiR'
        - 'arn:aws:inspector:ap-southeast-2:454640832652:rulespackage/0-P8Tel2Xj'
        - 'arn:aws:inspector:ap-southeast-2:454640832652:rulespackage/0-Vkd2Vxjq'
        - 'arn:aws:inspector:ap-southeast-2:454640832652:rulespackage/0-asL6HRgN'
    ca-central-1:
      ImageId: ami-03e86a67
    eu-central-1:
      ImageId: ami-a058674b
      RulesPackageArns:
        - 'arn:aws:inspector:eu-central-1:537503971621:rulespackage/0-0GMUM6fg'
        - 'arn:aws:inspector:eu-central-1:537503971621:rulespackage/0-ZujVHEPB'
        - 'arn:aws:inspector:eu-central-1:537503971621:rulespackage/0-nZrAVuv8'
        - 'arn:aws:inspector:eu-central-1:537503971621:rulespackage/0-wNqHa8M9'
    eu-west-1:
      ImageId: ami-e4515e0e
      RulesPackageArns:
        - 'arn:aws:inspector:eu-west-1:357557129151:rulespackage/0-SnojL3Z6'
        - 'arn:aws:inspector:eu-west-1:357557129151:rulespackage/0-lLmwe1zd'
        - 'arn:aws:inspector:eu-west-1:357557129151:rulespackage/0-sJBhCr0F'
        - 'arn:aws:inspector:eu-west-1:357557129151:rulespackage/0-ubA5XvBh'
    eu-west-2:
      ImageId: ami-b2b55cd5
    eu-west-3:
      ImageId: ami-d50bbaa8
    sa-east-1:
      ImageId: ami-83d58fef
    us-east-1:
      ImageId: ami-cfe4b2b0
      RulesPackageArns:
        - 'arn:aws:inspector:us-east-1:316112463485:rulespackage/0-R01qwB5Q'
        - 'arn:aws:inspector:us-east-1:316112463485:rulespackage/0-gBONHN9h'
        - 'arn:aws:inspector:us-east-1:316112463485:rulespackage/0-gEjTy7T7'
        - 'arn:aws:inspector:us-east-1:316112463485:rulespackage/0-rExsr2X8'
    us-east-2:
      ImageId: ami-40142d25
      RulesPackageArns:
        - 'arn:aws:inspector:us-east-2:646659390643:rulespackage/0-AxKmMHPX'
        - 'arn:aws:inspector:us-east-2:646659390643:rulespackage/0-JnA8Zp85'
        - 'arn:aws:inspector:us-east-2:646659390643:rulespackage/0-UCYZFKPV'
        - 'arn:aws:inspector:us-east-2:646659390643:rulespackage/0-m8r61nnh'
    us-west-1:
      ImageId: ami-0e86606d
      RulesPackageArns:
        - 'arn:aws:inspector:us-west-1:166987590008:rulespackage/0-TKgzoVOa'
        - 'arn:aws:inspector:us-west-1:166987590008:rulespackage/0-byoQRFYm'
        - 'arn:aws:inspector:us-west-1:166987590008:rulespackage/0-xUY8iRqX'
        - 'arn:aws:inspector:us-west-1:166987590008:rulespackage/0-yeYxlt0x'
    us-west-2:
      ImageId: ami-0ad99772
      RulesPackageArns:
        - 'arn:aws:inspector:us-west-2:758058086616:rulespackage/0-9hgA516p'
        - 'arn:aws:inspector:us-west-2:758058086616:rulespackage/0-H5hpSawc'
        - 'arn:aws:inspector:us-west-2:758058086616:rulespackage/0-JJOtZiqQ'
        - 'arn:aws:inspector:us-west-2:758058086616:rulespackage/0-vg5GGHSD'
Resources: 
  Vpc: 
    Type: 'AWS::EC2::VPC'
    Properties: 
      CidrBlock: '10.0.0.0/16'
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-Vpc'
  #----------------------------------------------------------------------------
  #
  # AWS EC2
  #
  # The role all the instances in the VPC should use. It allow the following actions:
  # - Allow to run command on the EC2 Instance
  # - Allow to retrieve objects from S3 (such as all the UNIX files used during configuration)
  # - Allow to send logs to CloudWatch (through the awslogs package)
  # - Allow to create tag in order to tag the root volume of the instance (in order to be able to track it easily)
  #
  RoleEC2Instance: 
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: 'Allow'
            Principal: 
              Service: 
                - 'ec2.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      Policies: 
        - PolicyName: 'AllowS3GetObject'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource: '*'
        - PolicyName: 'AllowCloudWatchPutLogEvents'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: 'Allow'
                Action:
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                Resource: '*'
        - PolicyName: 'AllowEC2CreateTags'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: 'Allow'
                Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeVolumes'
                  - 'ec2:CreateTags'
                Resource: '*'
        - PolicyName: 'AllowEC2GetSSHKeys'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: 'Allow'
                Action:
                  - 'iam:ListUsers'
                Resource: '*'
              - Effect: 'Allow'
                Action:
                  - 'iam:ListSSHPublicKeys'
                  - 'iam:GetSSHPublicKey'
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'
        - PolicyName: 'AllowEC2CFDescribeStacks'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: 'Allow'
                Action:
                  - 'cloudformation:DescribeStacks'
                Resource: '*'
  InstanceProfileEC2Instance:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles: [ !Ref RoleEC2Instance ]
  #----------------------------------------------------------------------------
  #
  # AWS Inspector
  #
  # We create the lambda function that will execute code when receiving a 
  # finding. Note that you need to manually link the AWSInspector Topic to the 
  # TopicAWSInspector. You can do that in AWS Inspector Console.
  #
  RoleLambdaAWSInspector:
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: 'Allow'
            Principal: 
              Service: 
                - 'lambda.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
      Policies: 
        - PolicyName: 'AllowSNSPublish'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: 'Allow'
                Action:
                  - 'sns:Publish'
                Resource: '*'
        - PolicyName: 'AllowDescribeFindings'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: 'Allow'
                Action: 
                  - 'inspector:DescribeFindings'
                Resource: '*'
  TopicDLQAWSInspector: 
    Type: 'AWS::SNS::Topic'
    Properties: 
      DisplayName: !Sub '${AWS::StackName} - DLQ for AWS Inspector Finding'
      Subscription:
        - Endpoint: !Ref AWSInspectorDLQEmail
          Protocol: 'email'
  
  FunctionAWSInspector: 
    Type: 'AWS::Lambda::Function'
    Properties: 
      Code: 
        S3Bucket: !Ref S3ConfigBucketName
        S3Key: 'stacks/files/lambda-auto-remediate.zip'
      DeadLetterConfig: 
        TargetArn: !Ref TopicDLQAWSInspector
      Description: 'Function to automatically solve AWS Inspector CVE Findings (https://aws.amazon.com/blogs/security/how-to-remediate-amazon-inspector-security-findings-automatically/)'
      Handler: lambda-auto-remediate.lambda_handler
      Role: !GetAtt RoleLambdaAWSInspector.Arn
      Runtime: python2.7
      Timeout: 60
      VpcConfig: 
        SecurityGroupIds:  
          - !Ref SecurityGroupPrivate
        SubnetIds: 
          - !Ref SubnetPrivateAZA
          - !Ref SubnetPrivateAZB
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-FunctionAWSInspector'

  PermissionInvokeFunctionAWSInspector: 
    Type: 'AWS::Lambda::Permission'
    Properties: 
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt FunctionAWSInspector.Arn
      Principal: 'sns.amazonaws.com'
      SourceArn: !Ref TopicAWSInspector

  #  
  # Then we create the SNS topic to which AWS Inspector will publish its findings
  #
  TopicAWSInspector: 
    Type: 'AWS::SNS::Topic'
    Properties: 
      DisplayName: !Sub '${AWS::StackName} - AWS Inspector Finding'
      Subscription:
        - Endpoint: !GetAtt FunctionAWSInspector.Arn
          Protocol: 'lambda'
          
  TopicPolicyAWSInspector:
    Type: 'AWS::SNS::TopicPolicy'
    Properties: 
      Topics:
        - !Ref TopicAWSInspector
      PolicyDocument:
        Version: '2008-10-17'
        Statement: 
          - Effect: 'Allow'
            Principal: 
              Service: 
                - 'inspector.amazonaws.com'
            Action: 
              - 'sns:GetTopicAttributes'
              - 'sns:SetTopicAttributes'
              - 'sns:AddPermission'
              - 'sns:RemovePermission'
              - 'sns:DeleteTopic'
              - 'sns:Subscribe'
              - 'sns:ListSubscriptionsByTopic'
              - 'sns:Publish'
              - 'sns:Receive'
            Resource: !Ref TopicAWSInspector
          # Condition: ${AWS::AccountId}
          
  #
  # Then we configure AWS Inspector to analyse the resources tagged with the correct PLATFORM tag.
  #
  ResourceGroup: 
    Type: 'AWS::Inspector::ResourceGroup'
    Properties:
      ResourceGroupTags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'

  AssessmentTarget: 
    Type: 'AWS::Inspector::AssessmentTarget'
    Properties:
      AssessmentTargetName: !Sub 'Assessment Target for the ${AWS::StackName} Stack'
      ResourceGroupArn: !GetAtt ResourceGroup.Arn

  AssessmentTemplate:
    Type: 'AWS::Inspector::AssessmentTemplate'
    Properties:
      AssessmentTargetArn: !GetAtt AssessmentTarget.Arn
      DurationInSeconds: 3600
      AssessmentTemplateName: !Sub 'Assessment Template for the ${AWS::StackName} Stack'
      RulesPackageArns: !FindInMap [RegionMap, !Ref 'AWS::Region', RulesPackageArns ]

  #----------------------------------------------------------------------------
  #
  # Echo Service: This function is returns the value of the key passed as 
  # parameter. It is meant to be used by child stack to retrieve output in
  # an elegant fashion
  #
  RoleLambdaGetVariable:
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: 'Allow'
            Principal: 
              Service: 
                - 'lambda.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  
  FunctionGetVariable: 
    Type: 'AWS::Lambda::Function'
    Properties: 
      Code: 
        ZipFile: !Sub |
          var response = require('cfn-response');
          exports.handler = function(event, context) {
            var responseData = { 'S3ConfigBucketName': '${S3ConfigBucketName}' };
            response.send(event, context, response.SUCCESS, responseData);
          };
      Description: 'Function to get a specific variable'
      Handler: index.handler
      Role: !GetAtt RoleLambdaGetVariable.Arn
      Runtime: nodejs4.3
      VpcConfig: 
        SecurityGroupIds: 
          - !Ref SecurityGroupPrivate
        SubnetIds:
          - !Ref SubnetPrivateAZA
          - !Ref SubnetPrivateAZB
      Tags:  
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-FunctionGetVariable'
  
  
  #----------------------------------------------------------------------------
  #
  # Health Notification
  #
  TopicHealth: 
    Type: 'AWS::SNS::Topic'
    Properties: 
      DisplayName: !Sub '${AWS::StackName} - Server health notification'
      Subscription:
        - Endpoint: !Ref HealthNotificationEmail
          Protocol: 'email'

  TopicPolicyHealth:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      Topics:
        - !Ref TopicHealth
      PolicyDocument:
        Id: TopicPolicyHealth
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowHealthSNSPublish'
            Effect: Allow
            Principal:
              AWS: '*'
            Action: 'sns:Publish'
            Resource: !Ref TopicHealth
            Condition:
              StringEquals:
                'AWS:SourceOwner': !Ref 'AWS::AccountId'
#        - PolicyName: 'AllowHealthSNSPublish'
#          Effect: Allow
#          Principal:
#            Service:
#            - 'events.amazonaws.com'
#            - 'budgets.amazonaws.com' 
#            - 'rds.amazonaws.com'
#            - 's3.amazonaws.com'
#          Action: 'sns:Publish'
#          Resource: !Ref TopicHealth
#        - Sid: Sid3
#          Effect: Allow
#          Principal:
#            Service: 'ses.amazonaws.com' # Allow SES Notifications & Events
#          Action: 'sns:Publish'
#          Resource: !Ref Topic
#          Condition:
#            StringEquals:
#              'AWS:Referer': !Ref 'AWS::AccountId'


  #----------------------------------------------------------------------------
  #
  # AWS FlowLog
  #
  # First let's create the different Subnets
  #
  LogGroupFlowLog: 
    Condition: HasFlowLog
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '${AWS::StackName}-FlowLog'
      RetentionInDays: 7
  
  FlowLog: 
    Condition: HasFlowLog
    Type: 'AWS::EC2::FlowLog'
    Properties:
      DeliverLogsPermissionArn : !Ref RoleEC2Instance
      LogGroupName : !Ref LogGroupFlowLog
      ResourceId : !Ref Vpc
      ResourceType : VPC
      TrafficType : ACCEPT

  #----------------------------------------------------------------------------
  #
  # AWS VPC
  #
  # First let's create the different Subnets
  #
  SubnetDMZ: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      CidrBlock: "10.0.0.0/24"
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": !Ref 'AWS::Region' ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SubnetDMZ'
  SubnetPublicAZA: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": !Ref 'AWS::Region' ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SubnetPublicAZA'
  SubnetPublicAZB: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": !Ref 'AWS::Region' ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SubnetPublicAZB'
  SubnetPrivateAZA: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": !Ref 'AWS::Region' ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SubnetPrivateAZA'
  SubnetPrivateAZB: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      CidrBlock: "10.0.4.0/24"
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": !Ref 'AWS::Region' ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SubnetPrivateAZB'
  InternetGateway: 
    Type: "AWS::EC2::InternetGateway"
    Properties: 
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-InternetGateway'
  InternetGatewayAttachment: 
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties: 
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  NatGatewayEIP: 
    Type: "AWS::EC2::EIP"
    Properties: 
      Domain: vpc
  NatGateway: 
    Type: "AWS::EC2::NatGateway"
    Properties: 
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref SubnetDMZ
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-NatGateway'
    DependsOn: NatGatewayEIP
  DHCPOptions: 
    Type: "AWS::EC2::DHCPOptions"
    Properties: 
      DomainName: !Join [ ".", [ !Ref "AWS::Region", "compute.internal"] ]
      DomainNameServers: 
        - AmazonProvidedDNS
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-DHCPOptions'
  DHCPOptionsAssociation: 
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Properties: 
      VpcId: !Ref Vpc
      DhcpOptionsId: !Ref DHCPOptions
  RouteTableDMZ: 
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: !Ref Vpc
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-RouteTableDMZ'
  RouteTablePublic: 
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: !Ref Vpc
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-RouteTablePublic'
  RouteTablePrivate: 
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: !Ref Vpc
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-RouteTablePrivate'
  SecurityGroupDMZ: 
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupDescription: "Security group for instances in the DMZ"
      VpcId: !Ref Vpc
      SecurityGroupIngress: 
        - Description: "Allow all inbound SSH traffic from our public address"
          CidrIp: "195.149.215.221/32"
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - Description: "Allow all inbound SSH traffic from our public address"
          CidrIp: "195.149.209.221/32"
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - Description: "Allow all inbound SSH traffic from our public address"
          CidrIp: "193.127.200.51/32"
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - Description: "Allow all inbound SSH traffic from our public address"
          CidrIp: "193.127.200.52/32"
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupDMZ'
  SecurityGroupPublic: 
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupDescription: "Security group for instances for public facing instances"
      VpcId: !Ref Vpc
      SecurityGroupIngress: 
        - Description: "Allow all inbound HTTP traffic from our public address"
          CidrIp: "195.149.215.221/32"
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - Description: "Allow all inbound HTTP traffic from our public address"
          CidrIp: "195.149.209.221/32"
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - Description: "Allow all inbound HTTP traffic from our public address"
          CidrIp: "193.127.200.51/32"
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - Description: "Allow all inbound HTTP traffic from our public address"
          CidrIp: "193.127.200.52/32"
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - Description: "Allow all inbound HTTPS traffic from our public address"
          CidrIp: "0.0.0.0/0"
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - Description: "Allow all inbound from our the NAT"
          CidrIp: !Sub "${NatGatewayEIP}/32"
          IpProtocol: "-1"
        - Description: "Allow all inbound traffic from the DMZ"
          SourceSecurityGroupId: !Ref SecurityGroupDMZ
          IpProtocol: "-1"
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupPublic'
  SecurityGroupPrivate: 
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupDescription: "Security group for instances for private instances"
      VpcId: !Ref Vpc
      SecurityGroupIngress: 
        - Description: "Allow all inbound traffic from the DMZ"
          SourceSecurityGroupId: !Ref SecurityGroupDMZ
          IpProtocol: "-1"
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupPrivate'
  SecurityGroupIngressPublic: 
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties: 
      GroupId: !Ref SecurityGroupPublic
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref SecurityGroupPublic
  SecurityGroupIngressPrivate: 
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties: 
      GroupId: !Ref SecurityGroupPrivate
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref SecurityGroupPrivate
  SecurityGroupEFS:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group to access EFS'
      VpcId: !Ref Vpc
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref SecurityGroupPrivate
        FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupEFS'
  NetworkAcl: 
    Type: "AWS::EC2::NetworkAcl"
    Properties: 
      VpcId: !Ref Vpc
  NetworkAclOutbound: 
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: "0.0.0.0/0"
      Egress: true
      Protocol: "-1"
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref NetworkAcl
  NetworkAclInbound: 
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: "0.0.0.0/0"
      Protocol: "-1"
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref NetworkAcl
  NetworkAclPublicAZA: 
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties: 
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref SubnetPublicAZA
  NetworkAclPublicAZB: 
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties: 
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref SubnetPublicAZB
  NetworkAclPrivateAZA: 
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties: 
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref SubnetPrivateAZA
  NetworkAclPrivateAZB: 
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties: 
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref SubnetPrivateAZB
  SubnetRouteTableAssociationDMZ: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      RouteTableId: !Ref RouteTableDMZ
      SubnetId: !Ref SubnetDMZ
  SubnetRouteTableAssociationPublicAZA: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicAZA
  SubnetRouteTableAssociationPublicAZB: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicAZB
  SubnetRouteTableAssociationPrivateAZA: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetPrivateAZA
  SubnetRouteTableAssociationPrivateAZB: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetPrivateAZB
  RouteDMZInternetGateway: 
    Type: "AWS::EC2::Route"
    Properties: 
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref RouteTableDMZ
      GatewayId: !Ref InternetGateway
    DependsOn: InternetGatewayAttachment
  RoutePublicInternetGateway: 
    Type: "AWS::EC2::Route"
    Properties: 
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref RouteTablePublic
      GatewayId: !Ref InternetGateway
    DependsOn: InternetGatewayAttachment
  RouteNatGateway: 
    Type: "AWS::EC2::Route"
    Properties: 
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref RouteTablePrivate
      NatGatewayId: !Ref NatGateway
    DependsOn: NatGateway
Outputs: 
  StackName: 
    Description: "The name of the Stack"
    Value: !Sub '${AWS::StackName}'
    Export:
      Name: !Sub '${AWS::StackName}-StackName'
  Vpc: 
    Description: "VpcId of the newly created VPC"
    Value: !Ref Vpc
    Export:
      Name: !Sub '${AWS::StackName}-Vpc'
  CidrBlock:
    Description: "The CidrBlock of the newly created VPC"
    Value:  !GetAtt Vpc.CidrBlock
    Export:
      Name: !Sub '${AWS::StackName}-CidrBlock'
  NATPublicIp:
    Description: 'The Public IP of the NATGateway'
    Value:  !Ref NatGatewayEIP
    Export:
      Name: !Sub '${AWS::StackName}-NATPublicIp'
  InstanceProfileEC2Instance:
    Description: "The Instance Profile allowing to tag Root volume of each instances in this VPC"
    Value: !Ref InstanceProfileEC2Instance
    Export:
      Name: !Sub '${AWS::StackName}-InstanceProfileEC2Instance'
  RoleEC2Instance:
    Value: !Ref RoleEC2Instance
    Export:
      Name: !Sub '${AWS::StackName}-RoleEC2Instance'
  SecurityGroupDMZ: 
    Description: 'Security Group for the DMZ instances'
    Value: !Ref SecurityGroupDMZ
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupDMZ'
  SubnetDMZ:
    Description: 'Subnet for the DMZ'
    Value: !Ref SubnetDMZ
    Export:
      Name: !Sub '${AWS::StackName}-SubnetDMZ'
  AvailabilityZoneSubnetDMZ:
    Description: 'AZ for the DMZ Subnet'
    Value: !GetAtt SubnetDMZ.AvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}-AvailabilityZoneSubnetDMZ'
  SecurityGroupEFS:
    Description: 'Security Group to access EFS'
    Value: !Ref SecurityGroupEFS
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupEFS'
  SecurityGroupPublic:
    Description: 'Security Group for the Public instances'
    Value: !Ref SecurityGroupPublic
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupPublic'
  SubnetPublicAZA:
    Description: 'Subnet Public AZA'
    Value: !Ref SubnetPublicAZA
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPublicAZA'
  AvailabilityZoneSubnetPublicAZA:
    Description: 'AZ for the SubnetPublicAZA'
    Value: !GetAtt SubnetPublicAZA.AvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}-AvailabilityZoneSubnetPublicAZA'
  SubnetPublicAZB:
    Description: 'Subnet Public AZB'
    Value: !Ref SubnetPublicAZB
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPublicAZB'
  AvailabilityZoneSubnetPublicAZB:
    Description: 'AZ for the SubnetPublicAZB'
    Value: !GetAtt SubnetPublicAZB.AvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}-AvailabilityZoneSubnetPublicAZB'
  SecurityGroupPrivate:
    Description: 'Security Group for the Private instances'
    Value: !Ref SecurityGroupPrivate
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupPrivate'
  SubnetPrivateAZA:
    Description: 'Subnet Private AZA'
    Value: !Ref SubnetPrivateAZA
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPrivateAZA'
  AvailabilityZoneSubnetPrivateAZA:
    Description: 'AZ for the SubnetPrivateAZA'
    Value: !GetAtt SubnetPrivateAZA.AvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}-AvailabilityZoneSubnetPrivateAZA'
  SubnetPrivateAZB:
    Description: 'Subnet Private AZB'
    Value: !Ref SubnetPrivateAZB
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPrivateAZB'      
  AvailabilityZoneSubnetPrivateAZB:
    Description: 'AZ for the SubnetPrivateAZB'
    Value: !GetAtt SubnetPrivateAZB.AvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}-AvailabilityZoneSubnetPrivateAZB'
  SubnetsPublic:
    Description: 'Public subnets.'
    Value: !Join [',', [!Ref SubnetDMZ, !Ref SubnetPublicAZA, !Ref SubnetPublicAZB]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPublic'
  SubnetsPrivate:
    Description: 'Subnets private.'
    Value: !Join [',', [!Ref SubnetPrivateAZA, !Ref SubnetPrivateAZB]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPrivate'
  TopicHealth:
    Description: 'The Health Notification topic'
    Value: !Ref TopicHealth
    Export:
      Name: !Sub '${AWS::StackName}-TopicHealth'
  DefaultImageId:
    Description: 'The default ImageId as per the RegionMap'
    Value: !FindInMap [RegionMap, !Ref 'AWS::Region', ImageId]
    Export:
      Name: !Sub '${AWS::StackName}-DefaultImageId'
  FunctionGetVariable:
    Description: 'The ARN of the FunctionGetVariable Lambda function'
    Value: !GetAtt FunctionGetVariable.Arn
    Export:
      Name: !Sub '${AWS::StackName}-FunctionGetVariable'
  S3ConfigBucketName:
    Description: 'The config bucket name'
    Value: !Ref S3ConfigBucketName
    Export:
      Name: !Sub '${AWS::StackName}-S3ConfigBucketName'
