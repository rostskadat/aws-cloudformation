#
# FILE: 04-logstash.yaml
#
# DESCRIPTION: 
#
# TODO: 
#
# The configuration of Cognito is still really in flux, at least up until CLI 1.14.9 
#   (version installed by default in those AMI).
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "This stack create a logstash host to parse logs and an ElasticSearch cluster"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stack'
      Parameters:
      - ParentVpcStack
    - Label: 
        default: 'EC2 Parameters'
      Parameters:
      - KeyName
      - IAMUserSSHAccess
      - InstanceType
    - Label: 
        default: 'ElasticSearch Parameters'
      Parameters:
      - ElasticSearchVolumeSize
      - ElasticSearchInstanceType
    - Label: 
        default: 'Logstash Parameters'
      Parameters:
      - S3LogsBucketName
      - S3LogsIncludeFilters
Parameters: 
  ParentVpcStack: 
    Description: "Enter the name of the VPC Parent Stack"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the parent VPC stack (01-vpc.yaml)'
  KeyName: 
    Description: "The Instance Key Pair"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: "must be the name of an existing EC2 KeyPair."
  IAMUserSSHAccess:
    Description: 'Synchronize public keys of IAM users to enable personalized SSH access (Doc: https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/).'
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  InstanceType:
    Description: 'The instance type'
    Type: String
    Default: 'c5.large'    
  ElasticSearchAdminEmail:
    Description: 'The ElasticSearch Admin email'
    Type: String
    Default: 'es-admin@example.com'
  ElasticSearchVolumeSize:
    Description: 'The size of the volume attach to your ES node'
    Type: Number
    Default: 200
  ElasticSearchInstanceType:
    Description: 'The instance type of your ES node'
    Type: String
    Default: 'm4.large.elasticsearch' 
  S3LogsBucketName: 
    Description: 'The S3 bucket name where the logs reside'
    Type: String
    Default: 'mybucketname'
  S3LogsIncludeFilters:    
    Description: 'A comma separated list of include patterns'
    Type: String
    Default: '*SSL_access_$(date +"%Y-%m-%d")-00_00_00.log,*ArcQueriesTrace.log,*api-backend.log'
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
  HasIAMUserSSHAccess: !Equals [!Ref IAMUserSSHAccess, 'true']
Resources: 

  FunctionGetVariable: 
    Type: 'Custom::FunctionGetVariable'
    Version: '1.0'
    Properties: 
      ServiceToken: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-FunctionGetVariable'

  #----------------------------------------------------------------------------
  #
  # AWS LoadBalancer
  #
  # We create the LoadBalancer
  #
  LoadBalancer:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Parameters:
        ParentVpcStack: !Sub '${ParentVpcStack}'
        HealthCheckPath: '/'
        HealthCheckPort: 9600
        ListenerPort: 80
        SubDomainName: logstash
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-ELB'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${FunctionGetVariable.S3ConfigBucketName}/stacks/common/elb-app.yaml'

  #----------------------------------------------------------------------------
  #
  # AWS EFS
  #
  # We create the filesystem used by the instance to share valuable data between
  #   scaling events
  #
  FileSystem:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Parameters:
        ParentVpcStack: !Sub '${ParentVpcStack}'
        ParentStack: !Sub '${AWS::StackName}'
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-EFS'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${FunctionGetVariable.S3ConfigBucketName}/stacks/common/efs.yaml'

  #----------------------------------------------------------------------------
  #
  # AWS AutoScalingGroup
  #
  # We create the AutoScalingGroup whose job is to create and terminate instances
  #   depending on the required capacity and the health of the instances.
  #
  AutoScalingGroup:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Parameters:
        ParentVpcStack: !Sub '${ParentVpcStack}'
        ParentStack: !Sub '${AWS::StackName}'
        TargetGroup: !GetAtt LoadBalancer.Outputs.TargetGroup
        LaunchConfiguration: !Ref LaunchConfiguration
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-ASG'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${FunctionGetVariable.S3ConfigBucketName}/stacks/common/asg.yaml'
    DependsOn:
      - FileSystem

  #----------------------------------------------------------------------------
  #
  # AWS CloudWatch Logs and Dashboard.
  #
  # We create the LogGroup used by the instances in this stack to stream their 
  # system logs to AWS CloudWatch. Note that the associated playbook will 
  # configure which logs will actually be streamed.
  # We also create a Dashboard on order to present a central point for all the
  # alarms defined for this stack.
  #
  LogGroup: 
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '${AWS::StackName}'
      RetentionInDays: 7

  Dashboard: 
    Type: 'AWS::CloudWatch::Dashboard'
    Properties:
      DashboardName: !Sub '${AWS::StackName}'
      DashboardBody: !Sub '{"widgets":[{"type":"metric","x":0,"y":0,"width":9,"height":9,"properties":{"title":"HTTPCodeELB5XXCountTooHighAlarm","annotations":{"alarms":["${LoadBalancer.Outputs.HTTPCodeELB5XXCountTooHighAlarm}"]},"view":"timeSeries","stacked":false}},{"type":"metric","x":9,"y":0,"width":9,"height":9,"properties":{"title":"HTTPCodeTarget5XXCountTooHighAlarm","annotations":{"alarms":["${LoadBalancer.Outputs.HTTPCodeTarget5XXCountTooHighAlarm}"]},"view":"timeSeries","stacked":false}},{"type":"metric","x":0,"y":9,"width":9,"height":6,"properties":{"title":"TargetConnectionErrorCountTooHighAlarm","annotations":{"alarms":["${LoadBalancer.Outputs.TargetConnectionErrorCountTooHighAlarm}"]},"view":"timeSeries","stacked":false}},{"type":"metric","x":9,"y":9,"width":9,"height":6,"properties":{"title":"RejectedConnectionCountTooHighAlarm","annotations":{"alarms":["${LoadBalancer.Outputs.RejectedConnectionCountTooHighAlarm}"]},"view":"timeSeries","stacked":false}},{"type":"text","x":18,"y":0,"width":6,"height":15,"properties":{"markdown":"\n# ${AWS::StackName}\n## Overview\n\nThis is the main Logstash. You can access it [here](${LoadBalancer.Outputs.DNSName}). \n\n## Actions\n\nThe [${AWS::StackName}](#dashboards:name=${AWS::StackName}) stack should **only** be updated from the [CloudFormation](https://eu-west-1.console.aws.amazon.com/cloudformation/home) Console.\n\nYou can: \n* Open the [Logs](#logs:group=${AWS::StackName}) \n* Open the [EC2 Console](https://console.aws.amazon.com/ec2/v2/home?region=${AWS::Region}) for this VPC\n"}}]}'

  #----------------------------------------------------------------------------
  #
  # AWS Cognito
  #
  # We create the UserPool, IdentityPool and IAM role required to allow access
  #   to the ElasticSearch service to select user. 
  # cf. https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html
  #
  # NOTE: The CloudFormation API does not allow the configuration of the ESDomain
  #
  UserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      AdminCreateUserConfig: 
        AllowAdminCreateUserOnly: true
      AutoVerifiedAttributes: 
        - email
      UsernameAttributes: 
        - email
      UserPoolTags: 
        PLATFORM:
          'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        Name: !Sub '${AWS::StackName}-UserPool'

  UserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
        GenerateSecret: false
        UserPoolId: !Ref UserPool

  UserPoolGroup:
    Type: 'AWS::Cognito::UserPoolGroup'
    Properties:
      Description: 'Group of user allowed to access logstash'
      GroupName: 'logstash.elasticsearch'
      Precedence: 0
      RoleArn: !GetAtt RoleCognitoAccessForAmazonES.Arn
      UserPoolId: !Ref UserPool        

#  UserPoolUser:
#    Type: "AWS::Cognito::UserPoolUser"
#    Properties:
#      DesiredDeliveryMediums: 
#        - EMAIL
#      ForceAliasCreation: true
#      UserAttributes: 
#        - Name: 'email'
#          Value: 'rostskadat+aws@gmail.com'
#      MessageAction: RESEND
#      Username: 'demo-user'
#      UserPoolId: !Ref UserPool 

  IdentityPool: 
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      AllowUnauthenticatedIdentities: false
      DeveloperProviderName: 'login.logstash.elasticsearch'
  
  IdentityPoolRoleAttachment:
    Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles: 
        authenticated: !GetAtt RoleCognitoIpAuthenticated.Arn
        unauthenticated: !GetAtt RoleCognitoIpUnauthenticated.Arn

  RoleConfigureCognito: 
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: 'Allow'
            Principal: 
              Service: 
                - 'ec2.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonESCognitoAccess'

  RoleCognitoAccessForAmazonES: 
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: 'Allow'
            Principal: 
              Service: 
                - 'es.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonESCognitoAccess'

  RoleCognitoIpAuthenticated: 
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: 'Allow'
            Principal: 
              Federated: 
                - 'cognito-identity.amazonaws.com'
            Action: 
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike': 
                'cognito-identity.amazonaws.com:amr': 'authenticated'
      Path: '/'
      Policies: 
        - PolicyName: 'AllowCognitoIpAuthenticated'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: 'Allow'
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource: '*'

  RoleCognitoIpUnauthenticated: 
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: 'Allow'
            Principal: 
              Federated: 
                - 'cognito-identity.amazonaws.com'
            Action: 
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike': 
                'cognito-identity.amazonaws.com:amr': 'unauthenticated'
      Path: '/'
      Policies: 
        - PolicyName: 'AllowCognitoIpUnauthenticated'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: 'Allow'
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                Resource: '*'

  #----------------------------------------------------------------------------
  #
  # AWS ElasticSearch
  #
  # We create the UserPool, IdentityPool and IAM role required to allow access
  #   to the ElasticSearch service to select user.
  #
  # NOTE: the login point is configured manually because the API does yet provide
  #   the possibility to configure it, either by CloudFormation or by AWS CLI
  #   as of version 1.14.9 (installed in AMI)
  #
  # https://login-791682668801.auth.eu-west-1.amazoncognito.com
  Domain:
    Type: 'AWS::Elasticsearch::Domain'
    Properties: 
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal: 
              AWS:
                - !GetAtt RoleCognitoIpAuthenticated.Arn
            Action: 'es:ESHttp*'
            # TODO: How to make reference to this domain specifically?
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*'
      EBSOptions:
        EBSEnabled: true
        VolumeSize: !Ref ElasticSearchVolumeSize
        VolumeType: gp2
      ElasticsearchClusterConfig:
        InstanceCount: 2
        InstanceType: !Ref ElasticSearchInstanceType
        ZoneAwarenessEnabled: true
      ElasticsearchVersion: '6.2'
      EncryptionAtRestOptions: 
        Enabled: true
      SnapshotOptions:
        AutomatedSnapshotStartHour: 0
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-Domain'

  #----------------------------------------------------------------------------
  #
  # AWS EC2
  #
  # We create the LaunchConfiguration used by the AutoScalingGroup to provision
  #   the instances in this stack
  #
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      AWS::CloudFormation::Init:
        configSets: 
          default: [ Install ] 
        Install: 
          packages: 
            yum: 
              ansible: []
          files:
            '/root/playbooks/group_vars/stack.yaml':
              content: !Sub |
                Region: '${AWS::Region}'
                StackName: '${AWS::StackName}'
                LogGroup: '${AWS::StackName}'
                S3ConfigBucketName: '${FunctionGetVariable.S3ConfigBucketName}'
                HasIAMUserSSHAccess: ${IAMUserSSHAccess}

                FileSystem: '${FileSystem}'
                
                ESDomainEndpoint: '${Domain.DomainEndpoint}'
                ESDomainPort: '443'
                
                S3LogsIncludeFilters: '${S3LogsIncludeFilters}'
                
                UserPoolId: '${UserPool}'
                IdentityPoolId: '${IdentityPool}'
                RoleArn: '${RoleConfigureCognito.Arn}'
                
                ESDomainName: '${Domain}'
              mode: '000600'
              owner: root
              group: root
          commands:
            '01_get_playbook': 
              command: !Sub 'sudo aws s3 sync s3://${FunctionGetVariable.S3ConfigBucketName}/playbooks /root/playbooks --exclude "group_vars/*.*" --no-progress'
            '02_set_host': 
              command: 'sudo bash -c "echo $(uname -n) ansible_connection=local > /etc/ansible/hosts"'
            '03_run_playbook': 
              command: 'sudo bash /root/playbooks/run_playbook.sh /root/playbooks/logstash.yaml'
    Properties: 
      IamInstanceProfile: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-InstanceProfileEC2Instance'      
      ImageId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-DefaultImageId'
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      SecurityGroups: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPrivate'
        - !Ref SecurityGroupHealthCheck
      UserData: 
        'Fn::Base64': !Sub |
          #!/bin/bash
          yum-config-manager --enable epel
          yum update -y
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --verbose --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          /root/signal_asg.sh $? ${AWS::Region} ${AWS::StackName} "ASG" "AutoScalingGroup"
  SecurityGroupHealthCheck:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group for the Health Check'
      VpcId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - CidrIp: 
          'Fn::ImportValue': !Sub '${ParentVpcStack}-CidrBlock'
        FromPort: 9600
        ToPort: 9600
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupHealthCheck'
Outputs: 
  Kibana: 
    Description: 'Public DNS address of the internet facing ELB'
    Value: !Sub 'https://${Domain.DomainEndpoint}/_plugin/kibana/'
    Export:
      Name: !Sub '${AWS::StackName}-Kibana'
  