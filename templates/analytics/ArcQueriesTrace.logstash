input {
  s3 {
    bucket               => "{{bucketname}}"
    region               => "{{region}}"
    prefix               => "{{platform_id}}/{{hostname}}/{{application_id}}/ArcQueriesTrace/" 
  }
}


filter {

  mutate {
    add_field => {
      "source" => "%{[@metadata][s3][key]}"
    }
  }

  grok {
    match => { "source" => "%{DATA:platform_id}/%{DATA:hostname}/%{DATA:application_id}/%{DATA:logtype}/ArcQueriesTrace.log.*$" }
    overwrite => [ "hostname" ]
  }

  mutate {
    lowercase => [ "platform_id" ]
    lowercase => [ "hostname" ]
    lowercase => [ "application_id" ]
    lowercase => [ "logtype" ]
  }

  if( "tcpeGrokked" not in [tags]) {
    grok {
      match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}/%{SPACE}\|%{SPACE}QUERY={%{SPACE}AFBISO\;%{SPACE}AFBGENERIC\;%{SPACE}INS_MSG_AUDIT.*$" }
      remove_tag => [ "beats_input_codec_plain_applied", "_grokparsefailure" ]
      add_tag => [ "tcpeGrokked" ]
    }
  }

  if( "tcpeGrokked" not in [tags]) {
    grok {
      match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}/%{SPACE}\|%{SPACE}QUERY={%{SPACE}AFBISO\;%{SPACE}AFBGENERIC\;%{SPACE}INS_SENT_MSG.*$" }
      remove_tag => [ "beats_input_codec_plain_applied", "_grokparsefailure" ]
      add_tag => [ "tcpeGrokked" ]
    }
  }


  if( "tcpeGrokked" not in [tags]) {
    grok {
      match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}QUERY={%{SPACE}%{DATA:query_name_application}\;%{SPACE}%{DATA:query_name_module}\;%{SPACE}%{DATA:query_name}%{SPACE}}SQL={%{DATA:query_sql}},%{SPACE}PARAMS={%{SPACE}%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}RECORDS=%{NUMBER:query_records},%{SPACE}TIMES={%{NUMBER:query_db_time}ms,%{SPACE}%{NUMBER:query_java_time}ms,%{SPACE}%{NUMBER:query_total_time}ms}$" }
      remove_tag => [ "beats_input_codec_plain_applied", "_grokparsefailure" ]
      add_tag => [ "tcpeGrokked" ]
    }
  }

  if( "tcpeGrokked" not in [tags]) {
    grok {
      match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}QUERY={%{SPACE}%{DATA:query_name_application}\;%{SPACE}%{DATA:query_name_module}\;%{SPACE}%{DATA:query_name}\;%{DATA:query_sql}%{SPACE}},%{SPACE}PARAMS={%{SPACE}%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}ERROR=%{GREEDYDATA:query_error}$" }
      remove_tag => [ "beats_input_codec_plain_applied", "_grokparsefailure" ]
      add_tag => [ "tcpeGrokked" ]
    }
  }

  if( "tcpeGrokked" not in [tags]) {
    grok {
      match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}SQL={%{DATA:query_sql}},%{SPACE}PARAMS={%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}RECORDS=%{NUMBER:query_records},%{SPACE}TIMES={%{NUMBER:query_db_time}ms,%{SPACE}%{NUMBER:query_java_time}ms,%{SPACE}%{NUMBER:query_total_time}ms}$" }
          add_field => { "query_name" => "PLAIN_SQL" }
      remove_tag => [ "beats_input_codec_plain_applied", "_grokparsefailure" ]
      add_tag => [ "tcpeGrokked" ]
    }
  }

  if( "tcpeGrokked" not in [tags]) {
    grok {
      match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}/%{SPACE}\|%{SPACE}SQL={%{DATA:query_sql}},%{SPACE}PARAMS={%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}RECORDS=%{NUMBER:query_records},%{SPACE}TIMES={%{NUMBER:query_db_time}ms,%{SPACE}%{NUMBER:query_java_time}ms,%{SPACE}%{NUMBER:query_total_time}ms}$" }
      add_field => { "query_name" => "PLAIN_SQL" }
      remove_tag => [ "beats_input_codec_plain_applied", "_grokparsefailure" ]
      add_tag => [ "tcpeGrokked" ]
    }
  }


  if( "tcpeGrokked" not in [tags]) {
    grok {
      match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}SQL={%{DATA:query_sql}},%{SPACE}PARAMS={%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}RECORDS=%{NUMBER:query_records},%{SPACE}TIMES={%{NUMBER:query_db_time}ms,%{SPACE}%{NUMBER:query_java_time}ms,%{SPACE}%{NUMBER:query_total_time}ms}$" }
      add_field => { "query_name" => "PLAIN_SQL" }
      remove_tag => [ "beats_input_codec_plain_applied", "_grokparsefailure" ]
      add_tag => [ "tcpeGrokked" ]
    }
  }


  if( "tcpeGrokked" not in [tags]) {
    grok {
      match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}QUERY={%{SPACE}%{DATA:query_name_application}\;%{SPACE}%{DATA:query_name_module}\;%{SPACE}%{DATA:query_name}%{SPACE}}SQL={%{DATA:query_sql}},%{SPACE}PARAMS={%{SPACE}%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{GREEDYDATA:query_result},%{SPACE}ERROR=%{GREEDYDATA:query_error}$" }
      remove_tag => [ "beats_input_codec_plain_applied", "_grokparsefailure" ]
      add_tag => [ "tcpeGrokked" ]
    }
  }

  if( "tcpeGrokked" not in [tags]) {
    grok {
      match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}QUERY={%{SPACE}%{DATA:query_name_application}\;%{SPACE}%{DATA:query_name_module}\;%{SPACE}%{DATA:query_name}%{SPACE}}SQL={\'%{DATA:query_sql}\'}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}ERROR=\{%{DATA:query_error}\}$" }
      remove_tag => [ "beats_input_codec_plain_applied", "_grokparsefailure" ]
      add_tag => [ "tcpeGrokked" ]
    }
  }


  if( "tcpeGrokked" not in [tags]) {
    grok {
      match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}/%{SPACE}\|%{SPACE}QUERY={%{SPACE}%{DATA:query_name_application}\;%{SPACE}%{DATA:query_name_module}\;%{SPACE}%{DATA:query_name}%{SPACE}}SQL={%{DATA:query_sql}},%{SPACE}PARAMS={%{SPACE}%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{GREEDYDATA:query_result},%{SPACE}ERROR=%{GREEDYDATA:query_error}$" }
      remove_tag => [ "beats_input_codec_plain_applied", "_grokparsefailure" ]
      add_tag => [ "tcpeGrokked" ]
    }
  }

  if( "tcpeGrokked" not in [tags]) {
    grok {
      match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}\[BUG\]:%{SPACE}The query%{SPACE}%{DATA:query_name_application}\/%{DATA:query_name_module}\/%{DATA:query_name}%{SPACE}used the opened connection mechanism but took too long to close. Forcefully closing it.$" }
      remove_tag => [ "beats_input_codec_plain_applied", "_grokparsefailure" ]
      add_field => { "query_error" => "%{query_name} used the opened connection mechanism but took too long to close. Forcefully closing it." }
      add_field => { "query_result" => "ERROR" }
      add_tag => [ "tcpeGrokked" ]
    }
  }


  if( "tcpeGrokked" not in [tags]) {
    grok {
      match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}\[BUG\]:%{SPACE}%{GREEDYDATA:bug}$" }
      remove_tag => [ "beats_input_codec_plain_applied", "_grokparsefailure" ]
      add_field => { "query_error" => "%{bug}" }
      add_field => { "query_result" => "ERROR" }
      add_tag => [ "tcpeGrokked" ]
    }
  }

  if( "tcpeGrokked" not in [tags]) {
    grok {
      match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}\[BUG\]%{SPACE}%{GREEDYDATA:bug}$" }
      remove_tag => [ "beats_input_codec_plain_applied", "_grokparsefailure" ]
      add_field => { "query_error" => "%{bug}" }
      add_field => { "query_result" => "ERROR" }
      add_tag => [ "tcpeGrokked" ]
    }
  }


  if( "tcpeGrokked" not in [tags]) {
    grok {
      match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}QUERY={%{SPACE}%{DATA:query_name_application}\;%{SPACE}%{DATA:query_name_module}\;%{SPACE}%{DATA:query_name}\;%{DATA:query_sql}%{SPACE}},%{SPACE}PARAMS={%{SPACE}%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}RECORDS=%{NUMBER:query_records},%{SPACE}TIMES={%{NUMBER:query_db_time}ms,%{SPACE}%{NUMBER:query_java_time}ms,%{SPACE}%{NUMBER:query_total_time}ms}$" }
      remove_tag => [ "beats_input_codec_plain_applied", "_grokparsefailure" ]
      add_tag => [ "tcpeGrokked" ]
    }
  }

  if( "tcpeGrokked" not in [tags]) {
    grok {
      match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}/%{SPACE}\|%{SPACE}QUERY={%{SPACE}%{DATA:query_name_application}\;%{SPACE}%{DATA:query_name_module}\;%{SPACE}%{DATA:query_name}%{SPACE}}SQL={%{DATA:query_sql}},%{SPACE}PARAMS={%{SPACE}%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}RECORDS=%{NUMBER:query_records},%{SPACE}TIMES={%{NUMBER:query_db_time}ms,%{SPACE}%{NUMBER:query_java_time}ms,%{SPACE}%{NUMBER:query_total_time}ms}$" }
      remove_tag => [ "beats_input_codec_plain_applied", "_grokparsefailure" ]
      add_tag => [ "tcpeGrokked" ]
    }
  }

  if( "tcpeGrokked" not in [tags]) {
    grok {
      match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}QUERY={%{SPACE}%{DATA:query_name_application}\;%{SPACE}%{DATA:query_name_module}\;%{SPACE}%{DATA:query_name}%{SPACE}}SQL={%{DATA:query_sql}},%{SPACE}PARAMS={%{SPACE}%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}RECORDS=%{NUMBER:query_records},%{SPACE}TIMES={%{NUMBER:query_db_time}ms,%{SPACE}%{NUMBER:query_java_time}ms,%{SPACE}%{NUMBER:query_total_time}ms}$" }
      remove_tag => [ "beats_input_codec_plain_applied", "_grokparsefailure" ]
      add_tag => [ "tcpeGrokked" ]
    }
  }

  if( "tcpeGrokked" not in [tags]) {
    grok {
      match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}QUERY={%{SPACE}%{DATA:query_name_application}\;%{SPACE}%{DATA:query_name_module}\;%{SPACE}%{DATA:query_name}%{SPACE}},%{SPACE}PARAMS={%{SPACE}%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}RECORDS=%{NUMBER:query_records},%{SPACE}TIMES={%{NUMBER:query_db_time}ms,%{SPACE}%{NUMBER:query_java_time}ms,%{SPACE}%{NUMBER:query_total_time}ms}$" }
      remove_tag => [ "beats_input_codec_plain_applied", "_grokparsefailure" ]
      add_tag => [ "tcpeGrokked" ]
    }
  }

  if( "tcpeGrokked" not in [tags]) {
    grok {
      match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}QUERY={%{SPACE}%{DATA:query_name_application}\;%{SPACE}%{DATA:query_name_module}\;%{SPACE}%{DATA:query_name}%{SPACE}},%{SPACE}PARAMS={%{SPACE}%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}RECORDS=%{NUMBER:query_records},%{SPACE}TIMES={%{NUMBER:query_db_time}ms,%{SPACE}%{NUMBER:query_java_time}ms,%{SPACE}%{NUMBER:query_total_time}ms}$" }
      remove_tag => [ "beats_input_codec_plain_applied", "_grokparsefailure" ]
      add_tag => [ "tcpeGrokked" ]
    }
  }

  mutate {
    convert => { "query_records" => "integer" }
    convert => { "query_java_time" => "integer" }
    convert => { "query_db_time" => "integer" }
    convert => { "query_total_time" => "integer" }
  }

  mutate { replace => [ '[@metadata][index]', '%{platform_id}_%{application_id}_%{logtype}' ] }

  fingerprint {
    source => "message"
    target => "[@metadata][fingerprint]"
    method => "SHA1"
    key => "Log analytics"
    base64encode => true
  }

  if( "tcpeGrokked" in [tags]) {
    mutate {
      remove_field => [ "message" ]
    }
  }

  # The timestamp may have commas instead of dots. Convert so as to store everything in the same way
  mutate {
    gsub => [
      # replace all commas with dots
      "timestampString", ",", ".",
      "timestampString", " ", ";"
    ]
  }

  date {
    locale => "en"
    match => [ "timestampString", "YYYY/MM/dd;HH:mm:ss", "dd/MMM/YYYY:HH:mm:ss;Z" ]
    timezone => "Europe/Madrid"
    target => "@timestamp"
    add_tag => [ "dateMatched" ]
    remove_field => [ "timestampString" ]
  }

  if "message" in [fields] or "_grokparsefailure" in [tags] {
    #drop {}
  }
}
