#
# FILE: 03-artifactory.yaml
#
# DESCRIPTION: This Stack create a Artifactory Host as well as an Internet facing LoadBalancer.
#
# NOTE: in order to create the AMI mapping you can run the following command. (needs a bit of massaging: 
#   should extract the ami and the region name, and output everything in the YAML compatible format)
# 
# for region in $(aws ec2 describe-regions --query 'Regions[*].{Name:RegionName}' --output text); do
#   aws --region $region ec2 describe-images --owners amazon --filters "Name=name,Values=amzn-ami-hvm-$(date +%Y)*-gp2" "Name=architecture,Values=x86_64" "Name=root-device-type,Values=ebs" --query 'Images[*].{ID:ImageId}'
# done
#
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "This stack create a Artifactory host"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stack'
      Parameters:
      - ParentVpcStack
    - Label:
        default: 'EC2 Parameters'
      Parameters:
      - KeyName
      - ArtifactoryInstanceType
    - Label:
        default: 'Artifactory Parameters'
      Parameters:
      - ArtifactoryAdminPassword
Parameters: 
  ParentVpcStack: 
    Description: "Enter the name of the VPC Stack where Artifactory will reside"
    Type: String
    Default: ''
  KeyName: 
    Description: "Enter the name of the Key Pair to use for the Artifactory instance"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: "Must be the name of an existing EC2 KeyPair."
  ArtifactoryInstanceType:
    Description: 'The instance type of the Jenkins master.'
    Type: String
    Default: 'c4.large'    
  ArtifactoryAdminPassword: 
    Description: "Enter the default Admin password for Artifactory"
    Type: String
    Default: ''
    NoEcho: true
Mappings:
  RegionMap:
    'ap-south-1':
      AMI: 'ami-76d6f519'
    'eu-west-3':
      AMI: 'ami-969c2deb'
    'eu-west-2':
      AMI: 'ami-a36f8dc4'
    'eu-west-1':
      AMI: 'ami-ca0135b3'
    'ap-northeast-2':
      AMI: 'ami-c10fa6af'
    'ap-northeast-1':
      AMI: 'ami-92df37ed'
    'sa-east-1':
      AMI: 'ami-3885d854'
    'ca-central-1':
      AMI: 'ami-338a0a57'
    'ap-southeast-1':
      AMI: 'ami-de90a5a2'
    'ap-southeast-2':
      AMI: 'ami-423bec20'
    'eu-central-1':
      AMI: 'ami-9a91b371'
    'us-east-1':
      AMI: 'ami-14c5486b'
    'us-east-2':
      AMI: 'ami-922914f7'
    'us-west-1':
      AMI: 'ami-25110f45'
    'us-west-2':
      AMI: 'ami-e251209a'    
Resources: 
  #
  # Let's create the SecurityGroup for the EFS FileSystem. Basically it should only allow traffic on the NFS Port from 
  #   the SecurityGroupPrivate from the parent stack (associated with resources in the Private Subnet)
  #
  SecurityGroupEFS:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group to access Artifactory EFS'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - SourceSecurityGroupId: 
          'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPrivate'
        FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupEFS'
  FileSystemArtifactory:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      Encrypted: true
      FileSystemTags:
      - Key: PLATFORM
        Value: 
          'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
      - Key: Name
        Value: !Sub '${AWS::StackName}-FileSystemArtifactory'
      PerformanceMode: generalPurpose
  MountTargetArtifactoryA:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref FileSystemArtifactory
      SecurityGroups:
        - !Ref SecurityGroupEFS
      SubnetId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
  MountTargetArtifactoryB:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref FileSystemArtifactory
      SecurityGroups:
        - !Ref SecurityGroupEFS
      SubnetId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZB'
  #
  # Let's create the SecurityGroup for the ELB LoadBalancer. Basically it should only allow traffic on the HTTP/S port
  #   from the Internet. If you want to restrict the IP from which to accept traffic, do it here. you can have a look 
  #   at the 01-vpc.yaml, and more specifically the SecurityGroupDMZ for an example.
  #
  SecurityGroupELB:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group to access Artifactory EFS'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - CidrIp : "0.0.0.0/0"
        FromPort: 443
        ToPort: 443
        IpProtocol: tcp
      - CidrIp : "0.0.0.0/0"
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupELB'
  LoadBalancerArtifactory:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: 'internet-facing'
      SecurityGroups:
      - !Ref SecurityGroupELB
      Subnets: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZB'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-LoadBalancerArtifactory'
  TargetGroupArtifactory:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/en-GB/account/login'
      HealthCheckPort: 8000
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 8000
      Protocol: HTTP
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-TargetGroupArtifactory'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      TargetGroupAttributes:
        - Key: 'deregistration_delay.timeout_seconds'
          Value: 30
      Targets:
        - Id: !Ref ArtifactoryHost
    DependsOn: ArtifactoryHost
  ListenerArtifactory:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroupArtifactory
        Type: forward
      LoadBalancerArn: !Ref LoadBalancerArtifactory
      Port: 80
      Protocol: HTTP
  #
  # Let's create the Artifactory instance.
  # 
  # TODO: Should have a specific SecurityGroup for the instance in order to only allow traffic on port 8000 (default
  #   Artifactory port). Further more I should enable SSL traffic, but beware that the load balancer might not allow 
  #   communications with a host presenting a self-signed certificate.
  #
  SecurityGroupArtifactory:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group to access the Artifactory instance'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - SourceSecurityGroupId: 
          !Ref 'SecurityGroupELB'
        FromPort: 8000
        ToPort: 8000
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupArtifactory'
  ArtifactoryHost: 
    Type: "AWS::EC2::Instance"
    Metadata:
      AWS::CloudFormation::Init:
        #
        # The logs for the cfn-init command are available in the instance in /var/log/cfn-init-cmd.log 
        #
        configSets: 
          default: [ InstallFS, InstallArtifactory, InstallArtifactoryApps, StartArtifactory ]
        InstallFS:
          packages:
            yum:
              htop: []
              awslogs: []
              amazon-efs-utils: []
          files: 
            "/home/ec2-user/.bashrc":
              content: !Sub |
                [ -f /etc/bashrc ] && . /etc/bashrc
                alias c=clear
                alias l='ls -l'
                alias vi=vim
              mode: "000600"
              owner: "ec2-user"
              group: "ec2-user"
          commands:
            "01_mount_efs":
              command: !Sub 'sudo mkdir -p /opt/Artifactory && sudo mount -t efs -o tls ${FileSystemArtifactory}:/ /opt/Artifactory'
            "02_install_aws_inspector":
              command: 'wget -q -O - https://d1wk0tztpsntt1.cloudfront.net/linux/latest/install | sudo bash -s'
        InstallArtifactory: 
          packages: 
            rpm: 
              Artifactory: 'https://s3-eu-west-1.amazonaws.com/cloudformation-eu-west-1-791682668801/Artifactory-7.1.1-8f0ead9ec3db-linux-2.6-x86_64.rpm'
          files:
            "/opt/Artifactory/etc/system/local/user-seed.conf":
              content: !Sub |
                [user_info]
                USERNAME = admin
                PASSWORD = ${ArtifactoryAdminPassword}
              mode: "000677"
              owner: "root"
              group: "root"
          commands:
            "01_Artifactory_enable":
              command: 'sudo /opt/Artifactory/bin/Artifactory enable boot-start --accept-license -user Artifactory'
              cwd: '~'
        InstallArtifactoryApps: 
          files:
            "/opt/Artifactory/etc/apps/":
              source: 'https://s3-eu-west-1.amazonaws.com/cloudformation-eu-west-1-791682668801/nmon-performance-monitor-for-unix-and-linux-systems_1916.tgz'
            "/opt/Artifactory/etc/apps/":
              source: 'https://s3-eu-west-1.amazonaws.com/cloudformation-eu-west-1-791682668801/ta-nmon-technical-addon-for-nmon-performance-monitor_1333.tgz'
        StartArtifactory:              
          commands:
            "01_Artifactory_start":
              command: 'sudo /opt/Artifactory/bin/Artifactory start'
    Properties: 
      DisableApiTermination: false
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref ArtifactoryInstanceType
      KeyName: !Ref 'KeyName'
      SecurityGroupIds: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPrivate'
        - !Ref SecurityGroupArtifactory
      SubnetId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
      Monitoring: false
      UserData:  
        'Fn::Base64': !Sub |
          #!/bin/bash
          echo "Updating ${AWS::StackName} Artifactory host..."
          yum-config-manager --enable epel
          yum update -y
          echo "Installing required packages..."
          yum install -y wget aws-cfn-bootstrap awslogs
          echo "Running cf-init script with default configset..."
          /opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --resource ArtifactoryHost --region ${AWS::Region}
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-ArtifactoryHost'
    DependsOn: MountTargetArtifactoryA
Outputs: 
  InstanceId: 
    Description: "InstanceId of the newly created Artifactory instance"
    Value: !Ref ArtifactoryHost
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'
  DNSName: 
    Description: "Public DNS address of the internet facing ELB"
    Value: !GetAtt LoadBalancerArtifactory.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
      