#
# FILE: 05-gitlab.yaml
#
# DESCRIPTION: This Stack create a Gitlab Host as well as an Internet facing LoadBalancer.
#
# NOTE: in order to create the AMI mapping you can run the following command. (needs a bit of massaging: 
#   should extract the ami and the region name, and output everything in the YAML compatible format)
# 
# for region in $(aws ec2 describe-regions --query 'Regions[*].{Name:RegionName}' --output text); do
#   aws --region $region ec2 describe-images --owners amazon --filters "Name=name,Values=amzn-ami-hvm-$(date +%Y)*-gp2" "Name=architecture,Values=x86_64" "Name=root-device-type,Values=ebs" --query 'Images[*].{ID:ImageId}'
# done
#
# TODO: 
# - Should use https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html#aws-specific-parameter-types
# - Should fine tune configuration (disable signin, etc)...
# - Should provide alert when the platform is unhealthy
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "This stack create a Gitlab host"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stack'
      Parameters:
      - ParentVpcStack
      - ParentLDAPStack
    - Label:
        default: 'EC2 Parameters'
      Parameters:
      - KeyName
      - InstanceType
    - Label: 
        default: 'LDAP Parameter'
      Parameters:
      - LDAPManagerPassword
    - Label:
        default: 'Gitlab Parameters'
      Parameters:
      - GitlabAdminEmail
      - GitlabAdminPassword
Parameters: 
  ParentVpcStack: 
    Description: "Enter the name of the VPC Stack where Gitlab will reside"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the VPC stack'
  ParentLDAPStack:
    Description: "Enter the name of the OpenLDAP Stack"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the LDAP stack'
  KeyName: 
    Description: "Optional Key Pair to connect through SSH"
    Type: "AWS::EC2::KeyPair::KeyName"
  InstanceType:
    Description: 'The Gitlab instance type'
    Type: String
    Default: 'c4.large'    
  LDAPManagerPassword: 
    Description: 'The LDAP Manager password'
    Type: String
    NoEcho: true
    MinLength: 3
  GitlabAdminEmail: 
    Description: 'The Gitlab Admin email'
    Type: String
    Default: ''
  GitlabAdminPassword: 
    Description: 'The Gitlab Admin password'
    Type: String
    Default: ''
    NoEcho: true
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
Resources: 
  #
  # Let's create the SecurityGroup for the ELB LoadBalancer. Basically it should only allow traffic on the HTTP/S port
  #   from the Internet. If you want to restrict the IP from which to accept traffic, do it here. you can have a look 
  #   at the 01-vpc.yaml, and more specifically the SecurityGroupDMZ for an example.
  #
  SecurityGroupELB:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group to access Gitlab ELB'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - CidrIp : "0.0.0.0/0"
        FromPort: 443
        ToPort: 443
        IpProtocol: tcp
      - CidrIp : "0.0.0.0/0"
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupELB'
  LoadBalancerGitlab:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: 'internet-facing'
      SecurityGroups:
      - !Ref SecurityGroupELB
      Subnets: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZB'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-LoadBalancerGitlab'
  TargetGroupGitlab:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/users/sign_in'
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-TargetGroupGitlab'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      TargetGroupAttributes:
        - Key: 'deregistration_delay.timeout_seconds'
          Value: 30
      Targets:
        - Id: !Ref GitlabHost
    DependsOn: GitlabHost
  ListenerGitlab:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroupGitlab
        Type: forward
      LoadBalancerArn: !Ref LoadBalancerGitlab
      Port: 80
      Protocol: HTTP
  #
  # Let's create the Gitlab instance.
  # 
  # TODO: Should have a specific SecurityGroup for the instance in order to only allow traffic on port 8000 (default
  #   Gitlab port). Further more I should enable SSL traffic, but beware that the load balancer might not allow 
  #   communications with a host presenting a self-signed certificate.
  #
  SecurityGroupGitlab:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group to access the Gitlab instance'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - SourceSecurityGroupId: 
          !Ref 'SecurityGroupELB'
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupGitlab'
  #
  # Ok let's configure the main host then
  #
  GitlabHost: 
    Type: 'AWS::EC2::Instance'
    Metadata:
      AWS::CloudFormation::Init:
        #
        # The logs for the cfn-init command are available in the instance in /var/log/cfn-init-cmd.log 
        # InstallGitlab, InstallGitlabApps, StartGitlab 
        configSets: 
          default: [ Bootstrap, BootstrapGitlab, InstallGitlab ]
        Bootstrap:
          packages:
            yum:
              htop: []
              awslogs: []
              yum-cron: []
          files:
            '/home/ec2-user/.bashrc':
              content: !Sub |
                [ -f /etc/bashrc ] && . /etc/bashrc
                alias c=clear
                alias l='ls -l'
                alias vi=vim
              mode: '000600'
              owner: 'ec2-user'
              group: 'ec2-user'
            '/root/tag_root_volume.sh':
              content: !Sub |
                #!/bin/bash
                STACK_NAME=${AWS::StackName}
                REGION=${AWS::Region}
                echo "Tagging Root volume..."
                INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                VOLUME_ID=$(aws --region $REGION ec2 describe-volumes --filters "Name=attachment.instance-id,Values=$INSTANCE_ID" "Name=attachment.device,Values=/dev/xvda" --query "Volumes[0].VolumeId" --output text)
                PLATFORM=$(aws --region $REGION ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].Tags" --output table | grep PLATFORM | cut -d '|' -f 3 | sed -e 's/ //g')
                aws --region $REGION ec2 create-tags --resources $VOLUME_ID --tag "Key=Name,Value=$STACK_NAME-VolumeRoot"
                aws --region $REGION ec2 create-tags --resources $VOLUME_ID --tag "Key=PLATFORM,Value=$PLATFORM"
              mode: '000744'
              owner: 'root'
              group: 'root'
          commands:
            '01_install_aws_inspector': 
              command: 'wget -q -O - https://d1wk0tztpsntt1.cloudfront.net/linux/latest/install | sudo bash -s'
            '02_yum_cron_hourly.conf':
              command: "sudo sed -ibckp -E 's/^update_cmd.*/update_cmd = security/;s/^(update_messages|download_updates|apply_updates).*/\\1 = yes/' /etc/yum/yum-cron-hourly.conf"
            '03_yum_cron.conf':
              command: "sudo sed -ibckp -E 's/^(update_messages|download_updates|apply_updates).*/\\1 = yes/' /etc/yum/yum-cron.conf"
            '04_tag_root_volume':
              command: "sudo /root/tag_root_volume.sh"
          services:
            sysvinit:
              yum-cron: 
                enabled: true
                ensureRunning: true
        BootstrapGitlab:
          packages:
            yum: 
              postfix: []
              policycoreutils-python: []
          files: 
            '/root/add_gitlab_repo.sh':
              source: 'https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/create_fs.sh': 
              content: |
                #!/bin/bash -x
                mkfs -t ext4 /dev/xvdb
                MNT=/mnt/gitlab
                [ ! -d $MNT ] && mkdir $MNT
                mount /dev/xvdb $MNT
                echo "/dev/xvdb $MNT ext4 defaults,nofail 0 2" > /etc/fstab
                [ ! -d $MNT/opt ] && mkdir $MNT/opt
                [ ! -d /opt     ] && mkdir -p /opt; ln -s $MNT/opt /opt/gitlab
              mode: "000700"
              owner: "root"
              group: "root"
          commands:
            '01_add_gitlab_repo':
              command: 'sudo /root/add_gitlab_repo.sh'
            '02_create_fs':
              command: 'sudo /root/create_fs.sh'              
          services:
            sysvinit:
              postfix: 
                enabled: true
                ensureRunning: true
        InstallGitlab: 
          packages:
            yum:
              gitlab-ee: []
          files:
            '/etc/gitlab/gitlab.rb':
              content: |
                external_url 'http://%external_url%'
                gitlab_rails['ldap_enabled'] = true
                gitlab_rails['ldap_servers'] = {
                  'main' => { 
                    'label' => 'OpenLDAP',
                    'host' => '%ldapHostname%',
                    'port' => %ldapPort%,
                    'uid' => 'uid',
                    'bind_dn' => '%managerDN%',
                    'password' => '%managerPassword%',
                    'encryption' => 'plain',
                    'verify_certificates' => false,
                    'active_directory' => false,
                    'allow_username_or_email_login' => false,
                    'lowercase_usernames' => false,
                    'block_auto_created_users' => false,
                    'base' => 'ou=People,%rootDC%',
                    'user_filter' => '(objectclass=person)'
                  }
                }
            '/root/gitlab_change_password.sh':
              content: |
                #!/bin/bash
                email=$1
                password=$2
                [ -z "$email" ] && echo "Invalid email" && exit 1
                [ -z "$password" ] && echo "Invalid password" && exit 1
                gitlab-rake gitlab:setup GITLAB_ROOT_PASSWORD="$password" GITLAB_ROOT_EMAIL="$email" < <(echo yes) > /dev/null 2>&1
                echo "Changed password for user root"
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/gitlab_configure_url.sh':
              content: |
                #!/bin/bash -x
                external_url="$1"
                [ -z "$external_url" ] && echo "Invalid external_url" && exit 1
                sed -ibckp -E "s/%external_url%/$external_url/" /etc/gitlab/gitlab.rb
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/gitlab_configure_ldap.sh':
              content: |
                #!/bin/bash -x
                ldapHostname=$1
                ldapPort=$2
                rootDC=$3
                managerDN="$4"
                managerPassword=$5
                [ -z "$ldapHostname" ] && echo "Invalid ldapHostname" && exit 1
                [ -z "$ldapPort" ] && echo "Invalid ldapPort" && exit 1
                [ -z "$rootDC" ] && echo "Invalid rootDC" && exit 1
                [ -z "$managerDN" ] && echo "Invalid managerDN" && exit 1
                [ -z "$managerPassword" ] && echo "Invalid managerPassword" && exit 1
                sed -ibckp -E "s/%ldapHostname%/$ldapHostname/;s/%ldapPort%/$ldapPort/;s/%rootDC%/$rootDC/;s/%managerDN%/$managerDN/;s/%managerPassword%/$managerPassword/" /etc/gitlab/gitlab.rb
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/other_valuable_settings.json':
              content: |
                { 
                  "default_project_visibility": "public",
                  "email_author_in_body": true,
                  "gravatar_enabled": false,
                  "help_page_hide_commercial_content": true,
                  "html_emails_enabled": true,
                  "import_sources": [],
                  "password_authentication_enabled_for_git": false,
                  "repository_checks_enabled": true,
                  "restricted_visibility_levels" : [ "private", "internal" ],
                  "signup_enabled": false,
                  
                }
              mode: '000700'
              owner: 'root'
              group: 'root'
              
          commands:
            '01_gitlab_configure_url':
              command: !Sub 'sudo /root/gitlab_configure_url.sh ${LoadBalancerGitlab.DNSName}'
            '02_gitlab_configure_ldap':
              command: !Join
                - ' '
                - - 'sudo /root/gitlab_configure_ldap.sh'
                  - 'Fn::ImportValue': !Sub '${ParentLDAPStack}-LDAPHostname'
                  - 'Fn::ImportValue': !Sub '${ParentLDAPStack}-LDAPPort'
                  - 'Fn::ImportValue': !Sub '${ParentLDAPStack}-RootDC'
                  - 'Fn::ImportValue': !Sub '${ParentLDAPStack}-ManagerDN'
                  - !Sub '${LDAPManagerPassword}'
            '03_gitlab_reconfigure':
              command: 'sudo gitlab-ctl reconfigure'
            '04_gitlab_change_password':
              command: !Sub 'sudo /root/gitlab_change_password.sh "${GitlabAdminEmail}" "${GitlabAdminPassword}"'
    Properties: 
      DisableApiTermination: false
      InstanceInitiatedShutdownBehavior: stop
      IamInstanceProfile: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-InstanceProfileTagEC2Instance'      
      ImageId: 'ami-c51e3eb6'
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      SecurityGroupIds: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPrivate'
        - !Ref SecurityGroupGitlab
      SubnetId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
      Volumes: 
        - VolumeId: !Ref VolumeData
          Device: '/dev/xvdb'
      Monitoring: false
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          yum-config-manager --enable epel
          yum update -y
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --resource GitlabHost --region ${AWS::Region}
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-GitlabHost'
    DependsOn: VolumeData
  VolumeData:
    Type: 'AWS::EC2::Volume'
    Properties:
      Size: 500
      Encrypted: true
      VolumeType: gp2
      AvailabilityZone: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-AvailabilityZoneSubnetPublicAZA'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-VolumeData'
Outputs: 
  InstanceId: 
    Description: "InstanceId of the newly created Gitlab instance"
    Value: !Ref GitlabHost
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'
  DNSName: 
    Description: "Public DNS address of the internet facing ELB"
    Value: !GetAtt LoadBalancerGitlab.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
      