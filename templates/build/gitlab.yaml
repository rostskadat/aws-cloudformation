#
# FILE: 05-gitlab.yaml
#
# DESCRIPTION: This Stack create a Gitlab Host as well as an Internet facing LoadBalancer.
#
# NOTE: in order to create the AMI mapping you can run the following command. (needs a bit of massaging: 
#   should extract the ami and the region name, and output everything in the YAML compatible format)
# 
# for region in $(aws ec2 describe-regions --query 'Regions[*].{Name:RegionName}' --output text); do
#   aws --region $region ec2 describe-images --owners amazon --filters "Name=name,Values=amzn-ami-hvm-$(date +%Y)*-gp2" "Name=architecture,Values=x86_64" "Name=root-device-type,Values=ebs" --query 'Images[*].{ID:ImageId}'
# done
#
# TODO: 
# - Should use https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html#aws-specific-parameter-types
# - Should fine tune configuration (disable signin, etc)...
# - Should provide alert when the platform is unhealthy
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "This stack create a Gitlab host"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stack'
      Parameters:
      - ParentVpcStack
      - ParentLDAPStack
      - ParentDBStack
    - Label: 
        default: 'EC2 Parameters'
      Parameters:
      - KeyName
      - InstanceType
    - Label: 
        default: 'LDAP Parameter'
      Parameters:
      - LDAPManagerPassword
    - Label:
        default: 'PostgreSQL DB Parameters'
      Parameters:
      - DBMasterPassword
    - Label:
        default: 'Gitlab Parameters'
      Parameters:
      - GitlabRootEmail
      - GitlabRootPassword
Parameters: 
  ParentVpcStack: 
    Description: "Enter the name of the VPC Stack where Gitlab will reside"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the VPC stack'
  ParentLDAPStack:
    Description: "Enter the name of the OpenLDAP Stack"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the LDAP stack'
  ParentDBStack:
    Description: 'Enter the name of the DB Stack'
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the DB stack'
  KeyName: 
    Description: "Optional Key Pair to connect through SSH"
    Type: "AWS::EC2::KeyPair::KeyName"
  InstanceType:
    Description: 'The instance type'
    Type: String
    Default: 'c5.large'    
  LDAPManagerPassword: 
    Description: 'The LDAP Manager password'
    Type: String
    NoEcho: true
    MinLength: 3
  DBMasterPassword: 
    Description: 'The DB Admin password'
    Type: String
    NoEcho: true
    MinLength: 3
  GitlabRootEmail: 
    Description: 'The Gitlab Root email'
    Type: String
    Default: 'application-admin@example.com'
  GitlabRootPassword: 
    Description: 'The Gitlab Root password'
    Type: String
    MinLength: 1
    NoEcho: true
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
Resources: 

  FunctionGetVariable: 
    Type: 'Custom::FunctionGetVariable'
    Version: '1.0'
    Properties: 
      ServiceToken: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-FunctionGetVariable'

  AutoScalingGroup: 
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 1
      MaxSize: 1
      NotificationConfigurations:
        - TopicARN: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-TopicHealth'
          NotificationTypes:
            - 'autoscaling:EC2_INSTANCE_LAUNCH'
            - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
            - 'autoscaling:EC2_INSTANCE_TERMINATE'
            - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZB'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
          PropagateAtLaunch: true
        - Key: Name
          Value: !Sub '${AWS::StackName}-Main'
          PropagateAtLaunch: true
    CreationPolicy: 
      ResourceSignal: 
        Timeout: PT15M
        Count: 1
    UpdatePolicy: 
      AutoScalingRollingUpdate: 
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
    DependsOn:
      - MountTargetA
      - MountTargetB
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPublic'
      Subnets: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZB'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-LoadBalancer'
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/users/sign_in'
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-TargetGroup'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      TargetGroupAttributes:
        - Key: 'deregistration_delay.timeout_seconds'
          Value: 30
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  FileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties: 
      Encrypted: true
      FileSystemTags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-FileSystem'
      PerformanceMode: generalPurpose
  MountTargetA:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupEFS'
      SubnetId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
  MountTargetB:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupEFS'
      SubnetId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZB'
  LogGroup: 
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '${AWS::StackName}'
      RetentionInDays: 7
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCredentials:
          type: s3
          roleName: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-RoleEC2Instance'
          buckets: 
            - !Sub '${FunctionGetVariable.S3ConfigBucketName}'
      AWS::CloudFormation::Init:
        configSets: 
          default: [ Bootstrap, BootstrapApplication, InstallApplication ]
        Bootstrap: 
          packages: 
            yum: 
              wget: []
              htop: []
              awslogs: []
              yum-cron: []
          files: 
            '/etc/awslogs/awscli.conf': 
              source: !Sub 'https://${FunctionGetVariable.S3ConfigBucketName}.s3.amazonaws.com/files/etc/awslogs/awscli.conf'
              mode: '000644'
              owner: root
              group: root
              context:
                Region: !Sub ${AWS::Region}
            '/etc/awslogs/awslogs.conf': 
              source: !Sub 'https://${FunctionGetVariable.S3ConfigBucketName}.s3.amazonaws.com/files/etc/awslogs/awslogs.conf'
              mode: '000644'
              owner: root
              group: root
              context:
                LogGroup: !Sub ${LogGroup}
            '/etc/cfn/cfn-hup.conf': 
              source: !Sub 'https://${FunctionGetVariable.S3ConfigBucketName}.s3.amazonaws.com/files/etc/cfn/cfn-hup.conf'
              mode: '000644' 
              owner: 'root'
              group: 'root'
              context:
                Region: !Sub ${AWS::Region}
                StackName: !Sub ${AWS::StackName}
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf': 
              source: !Sub 'https://${FunctionGetVariable.S3ConfigBucketName}.s3.amazonaws.com/files/etc/cfn/hooks.d/cfn-auto-reloader.conf'
              mode: '000644' 
              owner: 'root'
              group: 'root'
              context:
                Region: !Sub ${AWS::Region}
                StackName: !Sub ${AWS::StackName}
            '/home/ec2-user/.bashrc': 
              source: !Sub 'https://${FunctionGetVariable.S3ConfigBucketName}.s3.amazonaws.com/files/home/ec2-user/.bashrc'
              mode: '000600'
              owner: 'ec2-user'
              group: 'ec2-user'
              context:
                StackName: !Sub ${AWS::StackName}
            '/root/tag_root_volume.sh':
              source: !Sub 'https://${FunctionGetVariable.S3ConfigBucketName}.s3.amazonaws.com/files/root/tag_root_volume.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
          commands:
            '01_install_aws_inspector': 
              command: 'wget -q -O - https://d1wk0tztpsntt1.cloudfront.net/linux/latest/install | sudo bash -s'
            '02_yum_cron_hourly.conf':
              command: "sudo sed -ibckp -E 's/^update_cmd.*/update_cmd = security/;s/^(update_messages|download_updates|apply_updates).*/\\1 = yes/' /etc/yum/yum-cron-hourly.conf"
            '03_yum_cron.conf':
              command: "sudo sed -ibckp -E 's/^(update_messages|download_updates|apply_updates).*/\\1 = yes/' /etc/yum/yum-cron.conf"
            '04_tag_root_volume':
              command: !Sub 'sudo /root/tag_root_volume.sh ${AWS::Region} ${AWS::StackName}'
            '05_remove_ntp':
              command: 'sudo yum erase -y ntp*'
            '06_install_chrnoy':
              command: 'sudo yum install -y chrony'
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - awslogs
                files:
                - '/etc/awslogs/awslogs.conf'
                - '/etc/awslogs/awscli.conf'
              cfn-hup:
                enabled: true
                ensureRunning: true
                files: 
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              yum-cron: 
                enabled: true
                ensureRunning: true
                files:
                  - /etc/yum/yum-cron.conf
                  - /etc/yum/yum-cron-hourly.conf
              chronyd: 
                enabled: true
                ensureRunning: true
                files:
                  - /etc/chrony.conf
        BootstrapApplication:
          packages:
            yum: 
              jq: []
              postfix: []
              policycoreutils-python: []
              amazon-efs-utils: []
              postgresql96-contrib: []
              patch: []
              expect: []
          files: 
            '/root/add_gitlab_repo.sh':
              source: 'https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/create_fs.sh': 
              source: !Sub 'https://${FunctionGetVariable.S3ConfigBucketName}.s3.amazonaws.com/files/root/create_fs.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
          commands:
            '01_add_gitlab_repo':
              command: 'sudo /root/add_gitlab_repo.sh'
            '02_create_fs':
              command: !Sub 'sudo /root/create_fs.sh ${FileSystem}'              
          services:
            sysvinit:
              postfix: 
                enabled: true
                ensureRunning: true
        InstallApplication: 
          packages:
            yum:
              gitlab-ee: []
          files:
            '/etc/gitlab/gitlab.rb':
              source: !Sub 'https://${FunctionGetVariable.S3ConfigBucketName}.s3.amazonaws.com/files/etc/gitlab/gitlab.rb'
              mode: '000700'
              owner: 'root'
              group: 'root'
              context:
                ExternalUrl: 
                  !Sub '${LoadBalancer.DNSName}'
                EndpointAddress: 
                  'Fn::ImportValue': !Sub '${ParentDBStack}-EndpointAddress'
                EndpointPort: 
                  'Fn::ImportValue': !Sub '${ParentDBStack}-EndpointPort'
                MasterUsername: 
                  'Fn::ImportValue': !Sub '${ParentDBStack}-MasterUsername'
                DBMasterPassword: 
                  !Sub '${DBMasterPassword}'
                DNSName: 
                  'Fn::ImportValue': !Sub '${ParentLDAPStack}-DNSName'
                LDAPPort: 
                  'Fn::ImportValue': !Sub '${ParentLDAPStack}-LDAPPort'
                RootDC: 
                  'Fn::ImportValue': !Sub '${ParentLDAPStack}-RootDC'
                ManagerDN: 
                  'Fn::ImportValue': !Sub '${ParentLDAPStack}-ManagerDN'
                LDAPManagerPassword: 
                  !Sub '${LDAPManagerPassword}'
            '/root/gitlab/config.rb.patch': 
              source: !Sub 'https://${FunctionGetVariable.S3ConfigBucketName}.s3.amazonaws.com/files/root/gitlab/config.rb.patch'
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/gitlab/patching_config.sh': 
              source: !Sub 'https://${FunctionGetVariable.S3ConfigBucketName}.s3.amazonaws.com/files/root/gitlab/patching_config.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/gitlab/create_db.sh': 
              source: !Sub 'https://${FunctionGetVariable.S3ConfigBucketName}.s3.amazonaws.com/files/root/gitlab/create_db.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/gitlab/configure.sh': 
              source: !Sub 'https://${FunctionGetVariable.S3ConfigBucketName}.s3.amazonaws.com/files/root/gitlab/configure.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/gitlab/apply_settings.sh':
              source: !Sub 'https://${FunctionGetVariable.S3ConfigBucketName}.s3.amazonaws.com/files/root/gitlab/apply_settings.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
          commands:
            '01_patching_config': 
              command: 'sudo /root/gitlab/patching_config.sh'
            '02_create_db':
              command: !Join
                - ' '
                - - 'sudo /root/gitlab/create_db.sh'
                  - 'Fn::ImportValue': !Sub '${ParentDBStack}-EndpointAddress'
                  - 'Fn::ImportValue': !Sub '${ParentDBStack}-EndpointPort'
                  - 'Fn::ImportValue': !Sub '${ParentDBStack}-MasterUsername'
                  - !Sub '${DBMasterPassword}'
              test: 'sudo test ! -e /mnt/application/.application_configured'
            '03_configure': 
              command: !Sub 'sudo /root/gitlab/configure.sh "${GitlabRootEmail}" "${GitlabRootPassword}"'
            '04_apply_settings': 
              command: !Sub 'sudo /root/gitlab/apply_settings.sh "${GitlabRootPassword}"'
              test: 'sudo test ! -e /mnt/application/.application_configured'
            '98_application_configured':
              command: 'sudo touch /mnt/application/.application_configured'
            '99_gitlab_restart': 
              command: 'sudo gitlab-ctl restart'
    Properties: 
      IamInstanceProfile: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-InstanceProfileEC2Instance'      
      ImageId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-DefaultImageId'
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      SecurityGroups: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPrivate'
        - !Ref SecurityGroupHealthCheck
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          yum-config-manager --enable epel
          yum update -y
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --verbose --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          /opt/aws/bin/cfn-signal -e $?   --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
  SecurityGroupHealthCheck:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group for the Health Check'
      VpcId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - CidrIp: 
          'Fn::ImportValue': !Sub '${ParentVpcStack}-CidrBlock'
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupHealthCheck'

Outputs: 
  DNSName: 
    Description: 'Public DNS address of the internet facing ELB'
    Value: !Sub '${LoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
      