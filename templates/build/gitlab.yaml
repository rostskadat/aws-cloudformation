#
# FILE: 05-gitlab.yaml
#
# DESCRIPTION: This Stack create a Gitlab Host as well as an Internet facing LoadBalancer.
#
# NOTE: in order to create the AMI mapping you can run the following command. (needs a bit of massaging: 
#   should extract the ami and the region name, and output everything in the YAML compatible format)
# 
# for region in $(aws ec2 describe-regions --query 'Regions[*].{Name:RegionName}' --output text); do
#   aws --region $region ec2 describe-images --owners amazon --filters "Name=name,Values=amzn-ami-hvm-$(date +%Y)*-gp2" "Name=architecture,Values=x86_64" "Name=root-device-type,Values=ebs" --query 'Images[*].{ID:ImageId}'
# done
#
# TODO: 
# - Should use https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html#aws-specific-parameter-types
# - Should fine tune configuration (disable signin, etc)...
# - Should provide alert when the platform is unhealthy
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "This stack create a Gitlab host"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stack'
      Parameters:
      - ParentVpcStack
      - ParentLDAPStack
      - ParentDBStack
    - Label:
        default: 'EC2 Parameters'
      Parameters:
      - KeyName
      - InstanceType
    - Label: 
        default: 'LDAP Parameter'
      Parameters:
      - LDAPManagerPassword
    - Label:
        default: 'PostgreSQL DB Parameters'
      Parameters:
      - DBMasterUserPassword
    - Label:
        default: 'Gitlab Parameters'
      Parameters:
      - GitlabRootEmail
      - GitlabRootPassword
Parameters: 
  ParentVpcStack: 
    Description: "Enter the name of the VPC Stack where Gitlab will reside"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the VPC stack'
  ParentLDAPStack:
    Description: "Enter the name of the OpenLDAP Stack"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the LDAP stack'
  ParentDBStack:
    Description: 'Enter the name of the DB Stack'
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the DB stack'
  KeyName: 
    Description: "Optional Key Pair to connect through SSH"
    Type: "AWS::EC2::KeyPair::KeyName"
  InstanceType:
    Description: 'The Gitlab instance type'
    Type: String
    Default: 'c5.large'    
  LDAPManagerPassword: 
    Description: 'The LDAP Manager password'
    Type: String
    NoEcho: true
    MinLength: 3
  DBMasterUserPassword:
    Description: 'The LDAP Manager password'
    Type: String
    NoEcho: true
    MinLength: 3
  GitlabRootEmail: 
    Description: 'The Gitlab Root email'
    Type: String
    Default: ''
  GitlabRootPassword: 
    Description: 'The Gitlab Root password'
    Type: String
    Default: ''
    NoEcho: true
Mappings:
  # cf 01-mappings.yaml
  RegionMap:
    ap-northeast-1:
      AMI: ami-92df37ed
    ap-northeast-2:
      AMI: ami-c10fa6af
    ap-south-1:
      AMI: ami-76d6f519
    ap-southeast-1:
      AMI: ami-de90a5a2
    ap-southeast-2:
      AMI: ami-423bec20
    ca-central-1:
      AMI: ami-338a0a57
    eu-central-1:
      AMI: ami-9a91b371
    eu-west-1:
      AMI: ami-ca0135b3
    eu-west-2:
      AMI: ami-a36f8dc4
    eu-west-3:
      AMI: ami-969c2deb
    sa-east-1:
      AMI: ami-3885d854
    us-east-1:
      AMI: ami-14c5486b
    us-east-2:
      AMI: ami-922914f7
    us-west-1:
      AMI: ami-25110f45
    us-west-2:
      AMI: ami-e251209a
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
Resources: 
  TopicHealth: 
    Type: 'AWS::SNS::Topic'
    Properties: 
      DisplayName: !Sub '${AWS::StackName} - Server health notification'
      Subscription:
        - Endpoint: !Ref GitlabRootEmail
          Protocol: 'email'
  AutoScalingGroup: 
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 1
      MaxSize: 1
      NotificationConfigurations:
        - TopicARN: !Ref TopicHealth
          NotificationTypes:
            - 'autoscaling:EC2_INSTANCE_LAUNCH'
            - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
            - 'autoscaling:EC2_INSTANCE_TERMINATE'
            - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZB'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
          PropagateAtLaunch: true
        - Key: Name
          Value: !Sub '${AWS::StackName}-AutoScalingGroup'
          PropagateAtLaunch: true
    CreationPolicy: 
      ResourceSignal: 
        Timeout: PT15M
        Count: 1
    UpdatePolicy: 
      AutoScalingRollingUpdate: 
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
    DependsOn:
      - MountTargetA
      - MountTargetB
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPublic'
      Subnets: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZB'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-LoadBalancer'
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/users/sign_in'
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-TargetGroup'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      TargetGroupAttributes:
        - Key: 'deregistration_delay.timeout_seconds'
          Value: 30
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  FileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties: 
      Encrypted: true
      FileSystemTags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-FileSystem'
      PerformanceMode: generalPurpose
  MountTargetA:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupEFS'
      SubnetId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
  MountTargetB:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupEFS'
      SubnetId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZB'
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '${AWS::StackName}'
      RetentionInDays: 7
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      AWS::CloudFormation::Init:
        configSets: 
          default: [ Bootstrap, BootstrapApplication, InstallApplication ]
        Bootstrap:
          packages:
            yum:
              wget: []
              htop: []
              awslogs: []
              yum-cron: []
          files:
            '/etc/awslogs/awscli.conf':
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            '/etc/awslogs/awslogs.conf':
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}/var/log/messages
                log_group_name = ${LogGroup}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}/var/log/secure
                log_group_name = ${LogGroup}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = {instance_id}/var/log/cron
                log_group_name = ${LogGroup}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}/var/log/cloud-init.log
                log_group_name = ${LogGroup}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}/var/log/cfn-init.log
                log_group_name = ${LogGroup}
                [/var/log/cfn-hup.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-hup.log
                log_stream_name = {instance_id}/var/log/cfn-hup.log
                log_group_name = ${LogGroup}
                [/var/log/cfn-init-cmd.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init-cmd.log
                log_stream_name = {instance_id}/var/log/cfn-init-cmd.log
                log_group_name = ${LogGroup}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}/var/log/cloud-init-output.log
                log_group_name = ${LogGroup}
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_stream_name = {instance_id}/var/log/dmesg
                log_group_name = ${LogGroup}
              mode: '000644'
              owner: root
              group: root
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
              mode: '000400' 
              owner: 'root'
              group: 'root'
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
                runas=root
              mode: '000400' 
              owner: 'root'
              group: 'root'
            '/home/ec2-user/.bashrc':
              content: !Sub |
                [ -f /etc/bashrc ] && . /etc/bashrc
                alias c=clear
                alias l='ls -l'
                alias vi=vim
                PS1='[\u@${AWS::StackName} \W]\$ '
              mode: '000600'
              owner: 'ec2-user'
              group: 'ec2-user'
            '/root/tag_root_volume.sh':
              content: !Sub |
                #!/bin/bash
                STACK_NAME=${AWS::StackName}
                REGION=${AWS::Region}
                echo "Tagging Root volume..."
                INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                VOLUME_ID=$(aws --region $REGION ec2 describe-volumes --filters "Name=attachment.instance-id,Values=$INSTANCE_ID" "Name=attachment.device,Values=/dev/xvda" --query "Volumes[0].VolumeId" --output text)
                PLATFORM=$(aws --region $REGION ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].Tags" --output table | grep PLATFORM | cut -d '|' -f 3 | sed -e 's/ //g')
                aws --region $REGION ec2 create-tags --resources $VOLUME_ID --tag "Key=Name,Value=$STACK_NAME-VolumeRoot"
                aws --region $REGION ec2 create-tags --resources $VOLUME_ID --tag "Key=PLATFORM,Value=$PLATFORM"
              mode: '000744'
              owner: 'root'
              group: 'root'
          commands:
            '01_install_aws_inspector': 
              command: 'wget -q -O - https://d1wk0tztpsntt1.cloudfront.net/linux/latest/install | sudo bash -s'
            '02_yum_cron_hourly.conf':
              command: "sudo sed -ibckp -E 's/^update_cmd.*/update_cmd = security/;s/^(update_messages|download_updates|apply_updates).*/\\1 = yes/' /etc/yum/yum-cron-hourly.conf"
            '03_yum_cron.conf':
              command: "sudo sed -ibckp -E 's/^(update_messages|download_updates|apply_updates).*/\\1 = yes/' /etc/yum/yum-cron.conf"
            '04_tag_root_volume':
              command: "sudo /root/tag_root_volume.sh"
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - awslogs
                files:
                - '/etc/awslogs/awslogs.conf'
                - '/etc/awslogs/awscli.conf'
              cfn-hup:
                enabled: true
                ensureRunning: true
                files: 
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              yum-cron: 
                enabled: true
                ensureRunning: true
                files:
                  - /etc/yum/yum-cron.conf
                  - /etc/yum/yum-cron-hourly.conf
        BootstrapApplication:
          packages:
            yum: 
              jq: []
              postfix: []
              policycoreutils-python: []
              amazon-efs-utils: []
              postgresql96-contrib: []
              patch: []
              expect: []
          files: 
            '/root/add_gitlab_repo.sh':
              source: 'https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/create_fs.sh': 
              content: !Sub |
                #!/bin/bash -x
                MNT=/mnt/application
                [ -d $MNT ] || mkdir $MNT
                mount -t efs -o tls ${FileSystem}:/ $MNT
                [ -d $MNT/git-data ] || mkdir -p $MNT/git-data
                [ -d $MNT/git-data ] && echo "File system OK"
              mode: "000700"
              owner: "root"
              group: "root"
          commands:
            '01_add_gitlab_repo':
              command: 'sudo /root/add_gitlab_repo.sh'
            '02_create_fs':
              command: 'sudo /root/create_fs.sh'              
          services:
            sysvinit:
              postfix: 
                enabled: true
                ensureRunning: true
        InstallApplication: 
          packages:
            yum:
              gitlab-ee: []
          files:
            '/etc/gitlab/gitlab.rb':
              content: |
                external_url 'http://%external_url%'
                git_data_dirs({
                  'default': {
                    'path': '/mnt/application/git-data'
                  }
                })
                
                postgresql['enable'] = false
                gitlab_rails['db_adapter'] = 'postgresql'
                gitlab_rails['db_encoding'] = 'utf8'
                gitlab_rails['db_host'] = '%endpointAddress%'
                gitlab_rails['db_port'] = %endpointPort%
                gitlab_rails['db_username'] = '%masterUsername%'
                gitlab_rails['db_password'] = '%masterUserPassword%'
                
                gitlab_rails['ldap_enabled'] = true
                gitlab_rails['ldap_servers'] = {
                  'main' => { 
                    'label' => 'OpenLDAP',
                    'host' => '%ldapHostname%',
                    'port' => %ldapPort%,
                    'uid' => 'uid',
                    'bind_dn' => '%managerDN%',
                    'password' => '%managerPassword%',
                    'encryption' => 'plain',
                    'verify_certificates' => false,
                    'active_directory' => false,
                    'allow_username_or_email_login' => false,
                    'lowercase_usernames' => false,
                    'block_auto_created_users' => false,
                    'base' => 'ou=People,%rootDC%',
                    'user_filter' => '(objectclass=person)'
                  }
                }
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/gitlab/configure_url.sh':
              content: |
                #!/bin/bash -x
                external_url="$1"
                [ -z "$external_url" ] && echo "Invalid external_url" && exit 1
                external_url=${external_url,,}
                sed -ibckp -E "s/%external_url%/$external_url/" /etc/gitlab/gitlab.rb
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/gitlab/configure_ldap.sh':
              content: |
                #!/bin/bash
                ldapHostname=$1
                ldapPort=$2
                rootDC=$3
                managerDN="$4"
                managerPassword=$5
                [ -z "$ldapHostname" ] && echo "Invalid ldapHostname" && exit 1
                [ -z "$ldapPort" ] && echo "Invalid ldapPort" && exit 1
                [ -z "$rootDC" ] && echo "Invalid rootDC" && exit 1
                [ -z "$managerDN" ] && echo "Invalid managerDN" && exit 1
                [ -z "$managerPassword" ] && echo "Invalid managerPassword" && exit 1
                sed -ibckp -E "s/%ldapHostname%/$ldapHostname/;s/%ldapPort%/$ldapPort/;s/%rootDC%/$rootDC/;s/%managerDN%/$managerDN/;s/%managerPassword%/$managerPassword/" /etc/gitlab/gitlab.rb
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/gitlab/patch_config.rb':
              content: !Sub |
                --- /opt/gitlab/embedded/service/gitlab-rails/ee/lib/ee/gitlab/auth/ldap/config.rb      2018-06-26 14:53:20.531134934 +0000
                +++ /root/config.rb     2018-06-26 14:53:02.519089466 +0000
                @@ -12,10 +12,10 @@
                               enabled? && ::License.feature_available?(:ldap_group_sync)
                             end
                
                -            override :_available_servers
                -            def _available_servers
                -              ::License.feature_available?(:multiple_ldap_servers) ? servers : super
                -            end
                +#            override :_available_servers
                +#            def _available_servers
                +#              ::License.feature_available?(:multiple_ldap_servers) ? servers : super
                +#            end
                           end
                         end
                       end
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/gitlab/create_db.sh':
              content: |
                #!/bin/bash
                endpointAddress="$1"
                endpointPort="$2"
                masterUsername="$3"
                masterUserPassword="$4"
                [ -z "$endpointAddress" ] && echo "Invalid endpointAddress" && exit 1
                [ -z "$endpointPort" ] && echo "Invalid endpointPort" && exit 1
                [ -z "$masterUsername" ] && echo "Invalid masterUsername" && exit 1
                [ -z "$masterUserPassword" ] && echo "Invalid masterUserPassword" && exit 1
                
                echo "Patching config.rb..."
                patch /opt/gitlab/embedded/service/gitlab-rails/ee/lib/ee/gitlab/auth/ldap/config.rb /root/gitlab/patch_config.rb
                expect - <<EOF
                spawn /usr/bin/createdb --host=$endpointAddress --port=$endpointPort --username=$masterUsername --encoding=UTF8 gitlabhq_production
                expect "Password:"
                send "$masterUserPassword\r"
                expect eof
                EOF
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/gitlab/configure_db.sh':
              content: |
                #!/bin/bash
                endpointAddress="$1"
                endpointPort="$2"
                masterUsername="$3"
                masterUserPassword="$4"
                [ -z "$masterUsername" ] && echo "Invalid masterUsername" && exit 1
                [ -z "$masterUserPassword" ] && echo "Invalid masterUserPassword" && exit 1
                [ -z "$endpointAddress" ] && echo "Invalid endpointAddress" && exit 1
                [ -z "$endpointPort" ] && echo "Invalid endpointPort" && exit 1
                sed -ibckp -E "s/%endpointAddress%/$endpointAddress/;s/%endpointPort%/$endpointPort/;s/%masterUsername%/$masterUsername/;s/%masterUserPassword%/$masterUserPassword/" /etc/gitlab/gitlab.rb
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/gitlab/configure.sh':
              content: |
                #!/bin/bash
                email=$1
                password=$2
                [ -z "$email" ] && echo "Invalid email" && exit 1
                [ -z "$password" ] && echo "Invalid password" && exit 1
                GITLAB_ROOT_EMAIL="$email" GITLAB_ROOT_PASSWORD="$password" gitlab-ctl reconfigure
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/gitlab/configure_extra.sh':
              content: |
                #!/bin/bash
                password=$1
                [ -z "$password" ] && echo "Invalid password" && exit 1
                # Obtain a token (https://github.com/doorkeeper-gem/doorkeeper/wiki/API-endpoint-descriptions-and-examples#curl-command-password-grant)
                token=$(curl -s -F grant_type=password -F "username=root" -F "password=$password" -X POST http://localhost:80/oauth/token | jq -r '.access_token')
                [ "$token" == "null" ] && echo "Failed to retrieve token" && exit 1 
                url="http://localhost:80/api/v4/application/settings"
                echo "Changing settings (token=$token)..."
                
                change_settings()
                {
                  local key="$1"
                  local value="$2"
                  echo $key=$(curl -s --request PUT -H "Authorization: Bearer $token" "$url?$key=$value" | jq ".$key")                  
                }
                change_settings signup_enabled                    false
                change_settings default_project_visibility        public
                change_settings email_author_in_body              true
                change_settings gravatar_enabled                  false
                change_settings help_page_hide_commercial_content true
                change_settings html_emails_enabled               true
                curl -s --request POST -H "Authorization: Bearer $token" -F token=$token http://localhost:80/oauth/revoke > /dev/null
              mode: '000700'
              owner: 'root'
              group: 'root'
          commands:
            '01_configure_url': 
              command: !Sub 'sudo /root/gitlab/configure_url.sh ${LoadBalancer.DNSName}'
            '02_configure_ldap': 
              command: !Join
                - ' '
                - - 'sudo /root/gitlab/configure_ldap.sh'
                  - 'Fn::ImportValue': !Sub '${ParentLDAPStack}-DNSName'
                  - 'Fn::ImportValue': !Sub '${ParentLDAPStack}-LDAPPort'
                  - 'Fn::ImportValue': !Sub '${ParentLDAPStack}-RootDC'
                  - 'Fn::ImportValue': !Sub '${ParentLDAPStack}-ManagerDN'
                  - !Sub '${LDAPManagerPassword}'
            '03_create_db':
              command: !Join
                - ' '
                - - 'sudo /root/gitlab/create_db.sh'
                  - 'Fn::ImportValue': !Sub '${ParentDBStack}-EndpointAddress'
                  - 'Fn::ImportValue': !Sub '${ParentDBStack}-EndpointPort'
                  - 'Fn::ImportValue': !Sub '${ParentDBStack}-MasterUsername'
                  - !Sub '${DBMasterUserPassword}'
              test: 'sudo test ! -e /mnt/application/.application_configured'
            '04_configure_db': 
              command: !Join
                - ' '
                - - 'sudo /root/gitlab/configure_db.sh'
                  - 'Fn::ImportValue': !Sub '${ParentDBStack}-EndpointAddress'
                  - 'Fn::ImportValue': !Sub '${ParentDBStack}-EndpointPort'
                  - 'Fn::ImportValue': !Sub '${ParentDBStack}-MasterUsername'
                  - !Sub '${DBMasterUserPassword}'
            '05_configure': 
              command: !Sub 'sudo /root/gitlab/configure.sh "${GitlabRootEmail}" "${GitlabRootPassword}"'
            '06_configure_extra': 
              command: !Sub 'sudo /root/gitlab/configure_extra.sh "${GitlabRootPassword}"'
              test: 'sudo test ! -e /mnt/application/.application_configured'
            '98_application_configured':
              command: 'sudo touch /mnt/application/.application_configured'
            '99_gitlab_restart': 
              command: 'sudo gitlab-ctl restart'
    Properties: 
      IamInstanceProfile: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-InstanceProfileEC2Instance'      
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      SecurityGroups: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPrivate'
        - !Ref SecurityGroupHealthCheck
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          yum-config-manager --enable epel
          yum update -y
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --verbose --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          /opt/aws/bin/cfn-signal -e $?   --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
  SecurityGroupHealthCheck:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group for the Health Check'
      VpcId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - CidrIp: 
          'Fn::ImportValue': !Sub '${ParentVpcStack}-CidrBlock'
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupHealthCheck'

Outputs: 
  DNSName: 
    Description: 'Public DNS address of the internet facing ELB'
    Value: !Sub '${LoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
      