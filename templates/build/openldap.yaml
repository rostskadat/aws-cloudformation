#
# FILE: 05-gitlab.yaml
#
# DESCRIPTION: This Stack create a OpenLDAP Host that will be used by subsequent stack to manage Identification.
#
# NOTE: in order to create the AMI mapping you can run the following command. (needs a bit of massaging: 
#   should extract the ami and the region name, and output everything in the YAML compatible format)
# 
# for region in $(aws ec2 describe-regions --query 'Regions[*].{Name:RegionName}' --output text); do
#   latest_ami_name=$(aws --region $region ec2 describe-images --owners amazon --filters "Name=name,Values=amzn-ami-hvm-$(date +%Y)*-gp2" "Name=architecture,Values=x86_64" "Name=root-device-type,Values=ebs" --query 'Images[*].Name' | sort -r | head -1 | tr -d '"' | xargs)
#   aws --region $region ec2 describe-images --owners amazon --filters "Name=name,Values=$latest_ami_name" --query 'Images[*].{AMI:ImageId}'
# done
#
# TODO: 
# - Should use https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html#aws-specific-parameter-types
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "This stack create a OpenLDAP host"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stack'
      Parameters:
      - ParentVpcStack
      - S3ConfigBucketName
    - Label:
        default: 'EC2 Parameters'
      Parameters:
      - KeyName
      - InstanceType
    - Label:
        default: 'LDAP Parameters'
      Parameters:
      - LDAPAdminEmail
      - RootDC
      - ManagerPassword
      - LDAPUsersLdif
Parameters: 
  ParentVpcStack: 
    Description: "Enter the name of the VPC Parent Stack"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the parent VPC stack (01-vpc.yaml)'
  S3ConfigBucketName:
    Description: "Enter the name of the S3 bucket name where to find the configuration files"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the S3 bucket name where to find the configuration files'
  KeyName: 
    Description: "Optional Key Pair to connect through SSH"
    Type: "AWS::EC2::KeyPair::KeyName"
  InstanceType:
    Description: 'The Host Instance type'
    Type: 'String'
    Default: 't2.micro'    
  LDAPAdminEmail:
    Description: 'The LDAP Admin email'
    Type: String
    Default: 'ldap-admin@example.com'
  RootDC: 
    Description: 'The LDAP Root DC element'
    Type: String
    Default: 'dc=example,dc=com'
    MinLength: 3
    AllowedPattern: '(dc=[^,]+)(,dc=[^,]+)*'
    ConstraintDescription: 'must be the name of the Domain Component to use as root of your LDAP domain'
  ManagerPassword: 
    Description: 'The LDAP Manager password'
    Type: String
    NoEcho: true
    MinLength: 3
  LDAPUsersLdif: 
    Description: 'The LDAP initial User database. Should be an S3 url containing an LDIF database with the same RootDC as above'
    Type: String
    Default: 's3://mybucketname/import.ldif'
Mappings:
  # cf 01-mappings.yaml
  RegionMap:
    ap-northeast-1:
      AMI: ami-92df37ed
    ap-northeast-2:
      AMI: ami-c10fa6af
    ap-south-1:
      AMI: ami-76d6f519
    ap-southeast-1:
      AMI: ami-de90a5a2
    ap-southeast-2:
      AMI: ami-423bec20
    ca-central-1:
      AMI: ami-338a0a57
    eu-central-1:
      AMI: ami-9a91b371
    eu-west-1:
      AMI: ami-ca0135b3
    eu-west-2:
      AMI: ami-a36f8dc4
    eu-west-3:
      AMI: ami-969c2deb
    sa-east-1:
      AMI: ami-3885d854
    us-east-1:
      AMI: ami-14c5486b
    us-east-2:
      AMI: ami-922914f7
    us-west-1:
      AMI: ami-25110f45
    us-west-2:
      AMI: ami-e251209a
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
Resources: 
  TopicHealth: 
    Type: 'AWS::SNS::Topic'
    Properties: 
      DisplayName: !Sub '${AWS::StackName} - Server health notification'
      Subscription:
        - Endpoint: !Ref LDAPAdminEmail
          Protocol: 'email'
  AutoScalingGroup: 
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 1
      MaxSize: 1
      NotificationConfigurations:
        - TopicARN: !Ref TopicHealth
          NotificationTypes:
            - 'autoscaling:EC2_INSTANCE_LAUNCH'
            - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
            - 'autoscaling:EC2_INSTANCE_TERMINATE'
            - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZB'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
          PropagateAtLaunch: true
        - Key: Name
          Value: !Sub '${AWS::StackName}-Main'
          PropagateAtLaunch: true
    CreationPolicy: 
      ResourceSignal: 
        Timeout: PT15M
        Count: 1
    UpdatePolicy: 
      AutoScalingRollingUpdate: 
        MinInstancesInService: 0
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internal
      Subnets: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZB'
      Type: network
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-LoadBalancer'
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Port: 389
      Protocol: TCP
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-TargetGroup'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      TargetGroupAttributes:
        - Key: 'deregistration_delay.timeout_seconds'
          Value: 30
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 389
      Protocol: TCP
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '${AWS::StackName}'
      RetentionInDays: 7
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCredentials:
          type: s3
          roleName: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-RoleEC2Instance'
          buckets: 
            - !Ref S3ConfigBucketName
      AWS::CloudFormation::Init:
        configSets: 
          default: [ Bootstrap, InstallApplication ]
        Bootstrap: 
          packages: 
            yum: 
              wget: []
              htop: []
              awslogs: []
              yum-cron: []
          files: 
            '/etc/awslogs/awscli.conf': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/etc/awslogs/awscli.conf'
              mode: '000644'
              owner: root
              group: root
              context:
                Region: !Sub ${AWS::Region}
            '/etc/awslogs/awslogs.conf': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/etc/awslogs/awslogs.conf'
              mode: '000644'
              owner: root
              group: root
              context:
                LogGroup: !Sub ${LogGroup}
            '/etc/cfn/cfn-hup.conf': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/etc/cfn/cfn-hup.conf'
              mode: '000644' 
              owner: 'root'
              group: 'root'
              context:
                Region: !Sub ${AWS::Region}
                StackName: !Sub ${AWS::StackName}
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/etc/cfn/hooks.d/cfn-auto-reloader.conf'
              mode: '000644' 
              owner: 'root'
              group: 'root'
              context:
                Region: !Sub ${AWS::Region}
                StackName: !Sub ${AWS::StackName}
            '/home/ec2-user/.bashrc': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/home/ec2-user/.bashrc'
              mode: '000600'
              owner: 'ec2-user'
              group: 'ec2-user'
              context:
                StackName: !Sub ${AWS::StackName}
            '/root/tag_root_volume.sh':
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/tag_root_volume.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
          commands:
            '01_install_aws_inspector': 
              command: 'wget -q -O - https://d1wk0tztpsntt1.cloudfront.net/linux/latest/install | sudo bash -s'
            '02_yum_cron_hourly.conf':
              command: "sudo sed -ibckp -E 's/^update_cmd.*/update_cmd = security/;s/^(update_messages|download_updates|apply_updates).*/\\1 = yes/' /etc/yum/yum-cron-hourly.conf"
            '03_yum_cron.conf':
              command: "sudo sed -ibckp -E 's/^(update_messages|download_updates|apply_updates).*/\\1 = yes/' /etc/yum/yum-cron.conf"
            '04_tag_root_volume':
              command: !Sub 'sudo /root/tag_root_volume.sh ${AWS::Region} ${AWS::StackName}'
            '05_remove_ntp':
              command: 'sudo yum erase -y ntp*'
            '06_install_chrnoy':
              command: 'sudo yum install -y chrony'
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - awslogs
                files:
                - '/etc/awslogs/awslogs.conf'
                - '/etc/awslogs/awscli.conf'
              cfn-hup:
                enabled: true
                ensureRunning: true
                files: 
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              yum-cron: 
                enabled: true
                ensureRunning: true
                files:
                  - /etc/yum/yum-cron.conf
                  - /etc/yum/yum-cron-hourly.conf
              chronyd: 
                enabled: true
                ensureRunning: true
                files:
                  - /etc/chrony.conf
        InstallApplication:
          packages:
            yum:
              openldap: []
              openldap-clients: []
              openldap-servers: []
          files:
            '/etc/crontab':
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/openldap/etc/crontab'
              mode: '000644'
              owner: 'root'
              group: 'root'
            '/root/openldap/update_users.sh':
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/openldap/update_users.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
              context: 
                RootDC: !Sub '${RootDC}'
                ManagerPassword: !Sub '${ManagerPassword}'
                LDAPUsersLdif: !Sub '${LDAPUsersLdif}'
            '/root/openldap/configure_ldap.sh':
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/openldap/configure_ldap.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
              context: 
                RootDC: !Sub '${RootDC}'
                ManagerPassword: !Sub '${ManagerPassword}'
                LDAPUsersLdif: !Sub '${LDAPUsersLdif}'
          commands: 
            '01_copy_default_config':
              command: 'sudo cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG'
            '02_start_slpad':
              command: 'sudo service slapd start'
            '03_configure_ldap':
              command: 'sudo /root/openldap/configure_ldap.sh'
            '04_restart_slpad':
              command: 'sudo service slapd restart'
          services:
            sysvinit:
              slapd: 
                enabled: true
                ensureRunning: true
    Properties: 
      IamInstanceProfile: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-InstanceProfileEC2Instance'      
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      SecurityGroups: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPrivate'
        - !Ref SecurityGroupHealthCheck
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          yum-config-manager --enable epel
          yum update -y
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --verbose --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          /opt/aws/bin/cfn-signal -e $?   --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
  SecurityGroupHealthCheck:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group for the Health Check'
      VpcId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - CidrIp: 
          'Fn::ImportValue': !Sub '${ParentVpcStack}-CidrBlock'
        FromPort: 389
        ToPort: 389
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupHealthCheck'
Outputs: 
  DNSName:
    Description: 'Hostname to use when connecting'
    Value: !Sub '${LoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
  LDAPPort:
    Description: 'LDAP port to use when connecting'
    Value: 389
    Export:
      Name: !Sub '${AWS::StackName}-LDAPPort'
  RootDC: 
    Description: 'LDAP URL to use when connecting'
    Value: !Sub '${RootDC}'
    Export:
      Name: !Sub '${AWS::StackName}-RootDC'
  ManagerDN: 
    Description: 'Root DN to use when accessing the LDAP Server'
    Value: !Sub 'cn=Manager,${RootDC}'
    Export:
      Name: !Sub '${AWS::StackName}-ManagerDN'
      