#
# FILE: 08-jenkins.yaml
#
# DESCRIPTION: This Stack create a Jenkins Host as well as an Internet facing LoadBalancer.
#
# NOTE: in order to create the AMI mapping you can run the following command. (needs a bit of massaging: 
#   should extract the ami and the region name, and output everything in the YAML compatible format)
# 
# for region in $(aws ec2 describe-regions --query 'Regions[*].{Name:RegionName}' --output text); do
#   latest=$(aws --region $region ec2 describe-images --owners amazon \
#     --filters "Name=name,Values=amzn-ami-hvm-$(date +%Y)*-gp2" \
#               "Name=architecture,Values=x86_64" \
#               "Name=root-device-type,Values=ebs" \
#     --query 'Images[*].{ID:ImageLocation}' | jq '.[].ID' | sort -r | head -1 | tr -d '"')
# done
#
# Reference: http://elbhostname/web_api/api/user_tokens
# TODO: 
# - Should use https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html#aws-specific-parameter-types
# - Should use NestedStack as described in https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html
# - Should provide alert when the platform is unhealthy
# - Allow cfn-auto-reload (cf example in jenkins2-ha.yaml)
# - Add list of common SSH Site we want to connect to
# - Configure SMTP server
# - Configure Global Tool Configuration >> SonarQube Scanner
# - Configure Global Tool Configuration >> Docker 
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "This stack create a Jenkins host"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stack'
      Parameters:
      - ParentVpcStack
      - ParentLDAPStack
      - ParentArtifactoryStack
      - ParentSonarqubeStack
      - S3ConfigBucketName
    - Label: 
        default: 'EC2 Parameters'
      Parameters:
      - KeyName
      - InstanceType
    - Label: 
        default: 'LDAP Parameter'
      Parameters:
      - LDAPManagerPassword
    - Label:
        default: 'Artifactory Parameters'
      Parameters:
      - ArtifactoryAdminPassword
    - Label:
        default: 'Sonarqube Parameters'
      Parameters:
      - SonarqubeAdminPassword
    - Label:
        default: 'Jenkins Parameters'
      Parameters:
      - JenkinsAdminEmail
      - JenkinsAdminPassword
Parameters: 
  ParentVpcStack: 
    Description: "Enter the name of the VPC Stack where Jenkins will reside"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the VPC stack'
  ParentLDAPStack:
    Description: "Enter the name of the LDAP Stack"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the LDAP stack'
  ParentArtifactoryStack:
    Description: "Enter the name of the Artifactory Stack"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the Artifactory stack'
  ParentSonarqubeStack:
    Description: "Enter the name of the Artifactory Stack"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the Artifactory stack'
  S3ConfigBucketName:
    Description: "Enter the name of the S3 bucket name where to find the configuration files"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the S3 bucket name where to find the configuration files'
  KeyName: 
    Description: "Optional Key Pair to connect through SSH"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: "Must be the name of an existing EC2 KeyPair."
  InstanceType:
    Description: 'The instance type'
    Type: String
    Default: 'c5.large'    
  LDAPManagerPassword: 
    Description: 'The LDAP Manager password'
    Type: String
    NoEcho: true
    MinLength: 3
  ArtifactoryAdminPassword:
    Description: 'The Artifactory Admin password'
    Type: String
    NoEcho: true
    MinLength: 3
  SonarqubeAdminPassword:
    Description: 'The Sonarqube Admin password'
    Type: String
    NoEcho: true
    MinLength: 3
  JenkinsAdminEmail: 
    Description: 'The Jenkins Admin email'
    Type: String
    Default: 'admin@example.com'
  JenkinsAdminPassword: 
    Description: 'The Jenkins Admin password'
    Type: String
    MinLength: 1
    NoEcho: true
Mappings:
  # cf 01-mappings.yaml
  RegionMap:
    ap-northeast-1:
      AMI: ami-92df37ed
    ap-northeast-2:
      AMI: ami-c10fa6af
    ap-south-1:
      AMI: ami-76d6f519
    ap-southeast-1:
      AMI: ami-de90a5a2
    ap-southeast-2:
      AMI: ami-423bec20
    ca-central-1:
      AMI: ami-338a0a57
    eu-central-1:
      AMI: ami-9a91b371
    eu-west-1:
      AMI: ami-ca0135b3
    eu-west-2:
      AMI: ami-a36f8dc4
    eu-west-3:
      AMI: ami-969c2deb
    sa-east-1:
      AMI: ami-3885d854
    us-east-1:
      AMI: ami-14c5486b
    us-east-2:
      AMI: ami-922914f7
    us-west-1:
      AMI: ami-25110f45
    us-west-2:
      AMI: ami-e251209a
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
Resources: 
  TopicHealth: 
    Type: 'AWS::SNS::Topic'
    Properties: 
      DisplayName: !Sub '${AWS::StackName} - Server health notification'
      Subscription:
        - Endpoint: !Ref JenkinsAdminEmail
          Protocol: 'email'
  AutoScalingGroup: 
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 1
      MaxSize: 1
      NotificationConfigurations:
        - TopicARN: !Ref TopicHealth
          NotificationTypes:
            - 'autoscaling:EC2_INSTANCE_LAUNCH'
            - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
            - 'autoscaling:EC2_INSTANCE_TERMINATE'
            - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZB'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
          PropagateAtLaunch: true
        - Key: Name
          Value: !Sub '${AWS::StackName}-Main'
          PropagateAtLaunch: true
    CreationPolicy: 
      ResourceSignal: 
        Timeout: PT15M
        Count: 1
    UpdatePolicy: 
      AutoScalingRollingUpdate: 
        MinInstancesInService: 0
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
    DependsOn:
      - MountTargetA
      - MountTargetB
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPublic'
      Subnets: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZB'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-LoadBalancer'
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/login'
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 8080
      Protocol: HTTP
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-TargetGroup'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      TargetGroupAttributes:
        - Key: 'deregistration_delay.timeout_seconds'
          Value: 30
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  FileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties: 
      Encrypted: true
      FileSystemTags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-FileSystem'
      PerformanceMode: generalPurpose
  MountTargetA:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupEFS'
      SubnetId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
  MountTargetB:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupEFS'
      SubnetId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZB'
  LogGroup: 
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '${AWS::StackName}'
      RetentionInDays: 7
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCredentials:
          type: s3
          roleName: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-RoleEC2Instance'
          buckets: 
            - !Ref S3ConfigBucketName
      AWS::CloudFormation::Init:
        configSets: 
          default: [ Bootstrap, BootstrapApplication, InstallApplication ]
        Bootstrap: 
          packages: 
            yum: 
              wget: []
              htop: []
              awslogs: []
              yum-cron: []
          files: 
            '/etc/awslogs/awscli.conf': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/etc/awslogs/awscli.conf'
              mode: '000644'
              owner: root
              group: root
              context:
                Region: !Sub ${AWS::Region}
            '/etc/awslogs/awslogs.conf': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/etc/awslogs/awslogs.conf'
              mode: '000644'
              owner: root
              group: root
              context:
                LogGroup: !Sub ${LogGroup}
            '/etc/cfn/cfn-hup.conf': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/etc/cfn/cfn-hup.conf'
              mode: '000644' 
              owner: 'root'
              group: 'root'
              context:
                Region: !Sub ${AWS::Region}
                StackName: !Sub ${AWS::StackName}
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/etc/cfn/hooks.d/cfn-auto-reloader.conf'
              mode: '000644' 
              owner: 'root'
              group: 'root'
              context:
                Region: !Sub ${AWS::Region}
                StackName: !Sub ${AWS::StackName}
            '/home/ec2-user/bashrc': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/home/ec2-user/.bashrc'
              mode: '000600'
              owner: 'ec2-user'
              group: 'ec2-user'
              context:
                StackName: !Sub ${AWS::StackName}
            '/root/tag_root_volume.sh':
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/tag_root_volume.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
          commands:
            '01_install_aws_inspector': 
              command: 'wget -q -O - https://d1wk0tztpsntt1.cloudfront.net/linux/latest/install | sudo bash -s'
            '02_yum_cron_hourly.conf':
              command: "sudo sed -ibckp -E 's/^update_cmd.*/update_cmd = security/;s/^(update_messages|download_updates|apply_updates).*/\\1 = yes/' /etc/yum/yum-cron-hourly.conf"
            '03_yum_cron.conf':
              command: "sudo sed -ibckp -E 's/^(update_messages|download_updates|apply_updates).*/\\1 = yes/' /etc/yum/yum-cron.conf"
            '04_tag_root_volume':
              command: !Sub 'sudo /root/tag_root_volume.sh ${AWS::Region} ${AWS::StackName}'
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - awslogs
                files:
                - '/etc/awslogs/awslogs.conf'
                - '/etc/awslogs/awscli.conf'
              cfn-hup:
                enabled: true
                ensureRunning: true
                files: 
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              yum-cron: 
                enabled: true
                ensureRunning: true
                files:
                  - /etc/yum/yum-cron.conf
                  - /etc/yum/yum-cron-hourly.conf
        BootstrapApplication:
          packages:
            yum: 
              py-bcrypt: []
              java-1.8.0-openjdk: []
              java-1.8.0-openjdk-devel: []
              amazon-efs-utils: []
          files: 
            '/etc/yum.repos.d/epel-apache-maven.repo':
              source: 'http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo'
              mode: "000644"
              owner: "root"
              group: "root"
            '/etc/yum.repos.d/jenkins.repo':
              source: 'http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo'
              mode: "000644"
              owner: "root"
              group: "root"
            '/root/create_fs.sh': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/create_fs.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
          commands:
            '01_alternatives_java':
              command: 'sudo /usr/sbin/alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java'
            '02_remove_jdk7':
              command: 'sudo yum remove -y java-1.7.0-openjdk'
            '03_rpm_import':
              command: 'sudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key'
            '04_create_fs':
              command: 'sudo /root/create_fs.sh ${FileSystem}'              
            '05_fix_repo':
              command: 'sudo sed -i s/\$releasever/7/g /etc/yum.repos.d/epel-apache-maven.repo'              
        InstallApplication: 
          packages:
            yum:
              jq: []
              ant: []
              git: []
              jenkins: []
              apache-maven: []
          files:
            '/root/jenkins/configure_logs.sh':
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/jenkins/configure_logs.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/jenkins/plugins.txt':
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/jenkins/plugins.txt'
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/var/lib/jenkins/hudson.tasks.Ant.xml':
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/var/lib/jenkins/hudson.tasks.Ant.xml'
              mode: '000644'
              owner: 'jenkins'
              group: 'jenkins'
            '/var/lib/jenkins/hudson.tasks.Maven.xml':
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/var/lib/jenkins/hudson.tasks.Maven.xml'
              mode: '000644'
              owner: 'jenkins'
              group: 'jenkins'
            '/var/lib/jenkins/hudson.plugins.git.GitTool.xml':
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/var/lib/jenkins/hudson.plugins.git.GitTool.xml'
              mode: '000644'
              owner: 'jenkins'
              group: 'jenkins'
            '/var/lib/jenkins/jenkins.model.JenkinsLocationConfiguration.xml': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/var/lib/jenkins/jenkins.model.JenkinsLocationConfiguration.xml'
              mode: '000644'
              owner: 'jenkins'
              group: 'jenkins'
              context: 
                JenkinsAdminEmail: !Sub '${JenkinsAdminEmail}'
                DNSName: !GetAtt LoadBalancer.DNSName
            '/root/jenkins/wait.sh':
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/jenkins/wait.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/jenkins/call_cli.sh':
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/jenkins/call_cli.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/jenkins/install_plugins.sh': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/jenkins/install_plugins.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/jenkins/configure_jdk.groovy': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/jenkins/configure_jdk.groovy'
              mode: '000600'
              owner: 'root'
              group: 'root'
            '/root/jenkins/configure_artifactory.groovy':
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/jenkins/configure_artifactory.groovy'
              mode: '000600'
              owner: 'root'
              group: 'root'
              context:
                ArtifactoryDNSName: 
                  'Fn::ImportValue': !Sub '${ParentArtifactoryStack}-DNSName'
                ArtifactoryAdminUsername: 
                  'Fn::ImportValue': !Sub '${ParentArtifactoryStack}-ArtifactoryAdminUsername'
                ArtifactoryAdminPassword: 
                  !Sub '${ArtifactoryAdminPassword}'
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/jenkins/configure_sonarqube.groovy': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/jenkins/configure_sonarqube.groovy'
              mode: '000600'
              owner: 'root'
              group: 'root'
              context: 
                SonarqubeDNSName:
                  'Fn::ImportValue': !Sub '${ParentSonarqubeStack}-DNSName'
            '/root/jenkins/configure_sonarqube.sh': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/jenkins/configure_sonarqube.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/jenkins/change_default_password.sh': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/jenkins/change_default_password.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/jenkins/configure_ldap.groovy': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/jenkins/configure_ldap.groovy'
              mode: '000600'
              owner: 'root'
              group: 'root'
              context:
                DNSName: 
                  'Fn::ImportValue': !Sub '${ParentLDAPStack}-DNSName'
                LDAPPort: 
                  'Fn::ImportValue': !Sub '${ParentLDAPStack}-LDAPPort'
                RootDC: 
                  'Fn::ImportValue': !Sub '${ParentLDAPStack}-RootDC'
                ManagerDN: 
                  'Fn::ImportValue': !Sub '${ParentLDAPStack}-ManagerDN'
                LDAPManagerPassword: 
                  !Sub '${LDAPManagerPassword}'
          commands: 
            '01_alternatives_java':
              command: 'sudo /usr/sbin/alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java'
            '02_jenkins_configure_logs':
              command: !Sub 'sudo /root/jenkins/configure_logs.sh ${LogGroup}'
            '03_jenkins_configure_jobs_directory': 
              command: 'sudo rm -rf /var/lib/jenkins/jobs && sudo ln -s /mnt/application/jobs /var/lib/jenkins/jobs'
            '04_jenkins_chown_jenkins': 
              command: 'sudo chown -R jenkins.jenkins /mnt/application'
            '10_jenkins_start': 
              command: 'sudo service jenkins start'
            '11_jenkins_install_plugins': 
              command: 'sudo /root/jenkins/install_plugins.sh'
            '12_jenkins_configure_jdk': 
              command: 'sudo /root/jenkins_call_cli.sh /root/jenkins/configure_jdk.groovy'
            '20_jenkins_configure_artifactory': 
              command: 'sudo /root/jenkins_call_cli.sh /root/jenkins/configure_artifactory.groovy'
            '30_jenkins_configure_sonarqube': 
              command: !Join
                - ' '
                - - 'sudo /root/jenkins/configure_sonarqube.sh'
                  - 'Fn::ImportValue': !Sub '${ParentSonarqubeStack}-DNSName'
                  - !Sub '${SonarqubeAdminPassword}'
                  - !Sub '${JenkinsAdminPassword}'
            '40_jenkins_change_default_password': 
              command: !Sub 'sudo /root/jenkins_change_default_password.sh ${JenkinsAdminPassword}'              
            '41_jenkins_change_default_password': 
              command: 'sudo service jenkins restart'
            '42_jenkins_wait':
              command: !Sub 'sudo /root/jenkins/wait.sh "${JenkinsAdminPassword}"'  
            '42_jenkins_configure_ldap': 
              command: !Sub 'sudo /root/jenkins_call_cli.sh /root/jenkins/configure_ldap.groovy "${JenkinsAdminPassword}"'
            '98_application_configured': 
              command: 'sudo touch /mnt/jenkins/.application_configured'
            '99_jenkins_restart':
              command: 'sudo service jenkins restart'
          services: 
            sysvinit: 
              jenkins: 
                enabled: true
                ensureRunning: true
    Properties: 
      IamInstanceProfile: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-InstanceProfileEC2Instance'      
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      SecurityGroups: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPrivate'
        - !Ref SecurityGroupHealthCheck
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          yum-config-manager --enable epel
          yum update -y
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --verbose --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          /opt/aws/bin/cfn-signal -e $?   --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
  SecurityGroupHealthCheck:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group for the Health Check'
      VpcId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - CidrIp: 
          'Fn::ImportValue': !Sub '${ParentVpcStack}-CidrBlock'
        FromPort: 8080
        ToPort: 8080
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupHealthCheck'

Outputs: 
  DNSName: 
    Description: 'Public DNS address of the internet facing ELB'
    Value: !Sub '${LoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
      