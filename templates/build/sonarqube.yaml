#
# FILE: 07-sonarqube.yaml
#
# DESCRIPTION: This Stack create a Sonarqube Host as well as an Internet facing LoadBalancer.
#
# NOTE: in order to create the AMI mapping you can run the following command. (needs a bit of massaging: 
#   should extract the ami and the region name, and output everything in the YAML compatible format)
# 
# for region in $(aws ec2 describe-regions --query 'Regions[*].{Name:RegionName}' --output text); do
#   aws --region $region ec2 describe-images --owners amazon --filters "Name=name,Values=amzn-ami-hvm-$(date +%Y)*-gp2" "Name=architecture,Values=x86_64" "Name=root-device-type,Values=ebs" --query 'Images[*].{ID:ImageId}'
# done
#
# TODO: 
# - Should use https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html#aws-specific-parameter-types
# - Should use NestedStack as described in https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html
# - Should provide alert when the platform is unhealthy
# - LOOK AT https://docs.sonarqube.org/display/SONAR/Hardware+Recommendations
# - Configure email for admin user: architectureemergingtechnologies@allfundsbank.com
# - Configure webhooks for gitlab or jenkins: cf https://redirect.sonarsource.com/doc/webhooks.html
# - Configure Jenkins CI: sonar.links.ci
# - Configure Gitlab SCM: sonar.links.scm
# - Confiure server base URL: sonar.core.serverBaseURL
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "This stack create a Sonarqube host"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stack'
      Parameters:
      - ParentVpcStack
      - ParentLDAPStack
      - ParentDBStack
      - ParentGitlabStack
      - S3ConfigBucketName
    - Label: 
        default: 'EC2 Parameters'
      Parameters:
      - KeyName
      - InstanceType
    - Label: 
        default: 'LDAP Parameter'
      Parameters:
      - LDAPManagerPassword
    - Label:
        default: 'DB Parameters'
      Parameters:
      - DBMasterPassword
    - Label:
        default: 'Gitlab Parameters'
      Parameters:
      - GitlabRootPassword
    - Label:
        default: 'Sonarqube Parameters'
      Parameters:
      - SonarqubeAdminEmail
      - SonarqubeAdminPassword
Parameters: 
  ParentVpcStack: 
    Description: "Enter the name of the VPC Stack where Sonarqube will reside"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the VPC stack'
  ParentLDAPStack:
    Description: "Enter the name of the OpenLDAP Stack"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the LDAP stack'
  ParentDBStack:
    Description: 'Enter the name of the DB Stack'
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the DB stack'
  ParentGitlabStack:
    Description: 'Enter the name of the Gitlab Stack'
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the Gitlab stack'
  S3ConfigBucketName:
    Description: "Enter the name of the S3 bucket name where to find the configuration files"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the S3 bucket name where to find the configuration files'
  KeyName: 
    Description: "Optional Key Pair to connect through SSH"
    Type: "AWS::EC2::KeyPair::KeyName"
  InstanceType:
    Description: 'The instance type'
    Type: String
    Default: 'c5.large'    
  LDAPManagerPassword: 
    Description: 'The LDAP Manager password'
    Type: String
    NoEcho: true
    MinLength: 3
  DBMasterPassword: 
    Description: 'The DB Admin password'
    Type: String
    NoEcho: true
    MinLength: 3
  GitlabRootPassword: 
    Description: 'The Gitlab Root password'
    Type: String
    NoEcho: true
    MinLength: 3
  SonarqubeAdminEmail: 
    Description: 'The Sonarqube Admin email'
    Type: String
    Default: 'admin@example.com'
  SonarqubeAdminPassword: 
    Description: 'The Sonarqube Admin password'
    Type: String
    MinLength: 1
    NoEcho: true
Mappings:
  # cf 01-mappings.yaml
  RegionMap:
    ap-northeast-1:
      AMI: ami-92df37ed
    ap-northeast-2:
      AMI: ami-c10fa6af
    ap-south-1:
      AMI: ami-76d6f519
    ap-southeast-1:
      AMI: ami-de90a5a2
    ap-southeast-2:
      AMI: ami-423bec20
    ca-central-1:
      AMI: ami-338a0a57
    eu-central-1:
      AMI: ami-9a91b371
    eu-west-1:
      AMI: ami-ca0135b3
    eu-west-2:
      AMI: ami-a36f8dc4
    eu-west-3:
      AMI: ami-969c2deb
    sa-east-1:
      AMI: ami-3885d854
    us-east-1:
      AMI: ami-14c5486b
    us-east-2:
      AMI: ami-922914f7
    us-west-1:
      AMI: ami-25110f45
    us-west-2:
      AMI: ami-e251209a
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
Resources: 
  TopicHealth: 
    Type: 'AWS::SNS::Topic'
    Properties: 
      DisplayName: !Sub '${AWS::StackName} - Server health notification'
      Subscription:
        - Endpoint: !Ref SonarqubeAdminEmail
          Protocol: 'email'
  AutoScalingGroup: 
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 1
      MaxSize: 1
      NotificationConfigurations:
        - TopicARN: !Ref TopicHealth
          NotificationTypes:
            - 'autoscaling:EC2_INSTANCE_LAUNCH'
            - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
            - 'autoscaling:EC2_INSTANCE_TERMINATE'
            - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZB'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
          PropagateAtLaunch: true
        - Key: Name
          Value: !Sub '${AWS::StackName}-Main'
          PropagateAtLaunch: true
    CreationPolicy: 
      ResourceSignal: 
        Timeout: PT15M
        Count: 1
    UpdatePolicy: 
      AutoScalingRollingUpdate: 
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
    DependsOn:
      - MountTargetA
      - MountTargetB
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPublic'
      Subnets: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZB'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-LoadBalancer'
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/about'
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 9000
      Protocol: HTTP
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-TargetGroup'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      TargetGroupAttributes:
        - Key: 'deregistration_delay.timeout_seconds'
          Value: 30
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  FileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties: 
      Encrypted: true
      FileSystemTags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-FileSystem'
      PerformanceMode: generalPurpose
  MountTargetA:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupEFS'
      SubnetId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
  MountTargetB:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupEFS'
      SubnetId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZB'
  LogGroup: 
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '${AWS::StackName}'
      RetentionInDays: 7
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCredentials:
          type: s3
          roleName: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-RoleEC2Instance'
          buckets: 
            - !Ref S3ConfigBucketName
      AWS::CloudFormation::Init:
        configSets: 
          default: [ Bootstrap, BootstrapApplication, InstallApplication ]
        Bootstrap: 
          packages: 
            yum: 
              wget: []
              htop: []
              awslogs: []
              yum-cron: []
          files: 
            '/etc/awslogs/awscli.conf': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/etc/awslogs/awscli.conf'
              mode: '000644'
              owner: root
              group: root
              context:
                Region: !Sub ${AWS::Region}
            '/etc/awslogs/awslogs.conf': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/etc/awslogs/awslogs.conf'
              mode: '000644'
              owner: root
              group: root
              context:
                LogGroup: !Sub ${LogGroup}
            '/etc/cfn/cfn-hup.conf': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/etc/cfn/cfn-hup.conf'
              mode: '000644' 
              owner: 'root'
              group: 'root'
              context:
                Region: !Sub ${AWS::Region}
                StackName: !Sub ${AWS::StackName}
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/etc/cfn/hooks.d/cfn-auto-reloader.conf'
              mode: '000644' 
              owner: 'root'
              group: 'root'
              context:
                Region: !Sub ${AWS::Region}
                StackName: !Sub ${AWS::StackName}
            '/home/ec2-user/.bashrc': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/home/ec2-user/.bashrc'
              mode: '000600'
              owner: 'ec2-user'
              group: 'ec2-user'
              context:
                StackName: !Sub ${AWS::StackName}
            '/root/tag_root_volume.sh':
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/tag_root_volume.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
          commands:
            '01_install_aws_inspector': 
              command: 'wget -q -O - https://d1wk0tztpsntt1.cloudfront.net/linux/latest/install | sudo bash -s'
            '02_yum_cron_hourly.conf':
              command: "sudo sed -ibckp -E 's/^update_cmd.*/update_cmd = security/;s/^(update_messages|download_updates|apply_updates).*/\\1 = yes/' /etc/yum/yum-cron-hourly.conf"
            '03_yum_cron.conf':
              command: "sudo sed -ibckp -E 's/^(update_messages|download_updates|apply_updates).*/\\1 = yes/' /etc/yum/yum-cron.conf"
            '04_tag_root_volume':
              command: !Sub 'sudo /root/tag_root_volume.sh ${AWS::Region} ${AWS::StackName}'
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - awslogs
                files:
                - '/etc/awslogs/awslogs.conf'
                - '/etc/awslogs/awscli.conf'
              cfn-hup:
                enabled: true
                ensureRunning: true
                files: 
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              yum-cron: 
                enabled: true
                ensureRunning: true
                files:
                  - /etc/yum/yum-cron.conf
                  - /etc/yum/yum-cron-hourly.conf
        BootstrapApplication:
          packages:
            yum: 
              jq: []
              mysql56: []
              py-bcrypt: []
              java-1.8.0-openjdk: []
              amazon-efs-utils: []
          files: 
            '/etc/yum.repos.d/sonar.repo':
              source: 'http://downloads.sourceforge.net/project/sonar-pkg/rpm/sonar.repo'
              mode: '000644'
              owner: 'root'
              group: 'root'
            '/root/create_fs.sh': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/create_fs.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
          commands:
            '01_alternatives_java':
              command: 'sudo /usr/sbin/alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java'
            '02_alternatives_python':
              command: 'sudo /usr/sbin/alternatives --set python /usr/bin/python2.6'
            '03_remove_jdk7':
              command: 'sudo yum remove -y java-1.7.0-openjdk'
            '04_create_fs':
              command: !Sub 'sudo /root/create_fs.sh ${FileSystem}'              
        InstallApplication: 
          packages:
            yum:
              sonar: []
          files:
            '/opt/sonar/conf/sonar.properties': 
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/opt/sonar/conf/sonar.properties'
              mode: '000600'
              owner: 'sonar'
              group: 'sonar'
              context: 
                EndpointAddress: 
                  'Fn::ImportValue': !Sub '${ParentDBStack}-EndpointAddress'
                EndpointPort: 
                  'Fn::ImportValue': !Sub '${ParentDBStack}-EndpointPort'
                DNSName: 
                  'Fn::ImportValue': !Sub '${ParentLDAPStack}-DNSName'
                LDAPPort: 
                  'Fn::ImportValue': !Sub '${ParentLDAPStack}-LDAPPort'
                RootDC: 
                  'Fn::ImportValue': !Sub '${ParentLDAPStack}-RootDC'
                ManagerDN: 
                  'Fn::ImportValue': !Sub '${ParentLDAPStack}-ManagerDN'
                LDAPManagerPassword: 
                  !Sub '${LDAPManagerPassword}'
                GitlabDNSName: 
                  'Fn::ImportValue': !Sub '${ParentGitlabStack}-DNSName'
            '/root/sonarqube/create_db.sh':
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/sonarqube/create_db.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/sonarqube/configure_gitlab.sh':
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/sonarqube/configure_gitlab.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/sonarqube/change_password.sh':
              source: !Sub 'https://${S3ConfigBucketName}.s3.amazonaws.com/files/root/sonarqube/change_password.sh'
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/opt/sonar/extensions/plugins/sonar-ldap-plugin-2.2.0.608.jar':
              source: 'https://sonarsource.bintray.com/Distribution/sonar-ldap-plugin/sonar-ldap-plugin-2.2.0.608.jar'
              mode: '000644'
              owner: 'sonar'
              group: 'sonar'
            '/opt/sonar/extensions/plugins/checkstyle-sonar-plugin-4.10.1.jar':
              source: 'https://github.com/checkstyle/sonar-checkstyle/releases/download/4.10.1/checkstyle-sonar-plugin-4.10.1.jar'
              mode: '000644'
              owner: 'sonar'
              group: 'sonar'
            '/opt/sonar/extensions/plugins/sonar-findbugs-plugin-3.7.0.jar':
              source: 'https://github.com/spotbugs/sonar-findbugs/releases/download/3.7.0/sonar-findbugs-plugin-3.7.0.jar'
              mode: '000644'
              owner: 'sonar'
              group: 'sonar'
            '/opt/sonar/extensions/plugins/sonar-gitlab-plugin-3.0.1.jar':
              source: 'https://github.com/gabrie-allaigre/sonar-gitlab-plugin/releases/download/3.0.1/sonar-gitlab-plugin-3.0.1.jar'
              mode: '000644'
              owner: 'sonar'
              group: 'sonar'
            '/opt/sonar/extensions/plugins/sonar-auth-gitlab-plugin-1.3.2.jar':
              source: 'https://github.com/gabrie-allaigre/sonar-auth-gitlab-plugin/releases/download/1.3.2/sonar-auth-gitlab-plugin-1.3.2.jar'
              mode: '000644'
              owner: 'sonar'
              group: 'sonar'
            '/opt/sonar/extensions/plugins/sonar-pmd-plugin-2.6.jar':
              source: 'https://github.com/SonarQubeCommunity/sonar-pmd/releases/download/2.6/sonar-pmd-plugin-2.6.jar'
              mode: '000644'
              owner: 'sonar'
              group: 'sonar'
            '/opt/sonar/extensions/plugins/qualinsight-sonarqube-badges-3.0.1.jar':
              source: 'https://github.com/QualInsight/qualinsight-plugins-sonarqube-badges/releases/download/qualinsight-plugins-sonarqube-badges-3.0.1/qualinsight-sonarqube-badges-3.0.1.jar'
              mode: '000644'
              owner: 'sonar'
              group: 'sonar'
            '/opt/sonar/extensions/plugins/sonar-sonargraph-plugin-3.5.jar':
              source: 'https://github.com/SonarQubeCommunity/sonar-sonargraph/releases/download/sonar-sonargraph-plugin-3.5/sonar-sonargraph-plugin-3.5.jar'
              mode: '000644'
              owner: 'sonar'
              group: 'sonar'
            '/opt/sonar/extensions/plugins/sonar-sonargraph-integration-2.1.5.jar':
              source: 'https://github.com/sonargraph/sonar-sonargraph-integration/releases/download/Release-2.1.5/sonar-sonargraph-integration-2.1.5.jar'
              mode: '000644'
              owner: 'sonar'
              group: 'sonar'
            '/opt/sonar/extensions/plugins/sonar-jdepend-plugin-1.1.1.jar':
              source: 'https://github.com/willemsrb/sonar-jdepend-plugin/releases/download/sonar-jdepend-plugin-1.1.1/sonar-jdepend-plugin-1.1.1.jar'
              mode: '000644'
              owner: 'sonar'
              group: 'sonar'
            '/etc/limits.conf':
              # Taken from https://docs.sonarqube.org/display/SONAR/Requirements#Requirements-Linux 
              content: !Sub |
                sonarqube   -   nofile   65536
                sonarqube   -   nproc    2048
              mode: '000700'
              owner: 'root'
              group: 'root'
          commands:
            '01_chown':
              command: 'sudo chown -R sonar.sonar /mnt/application'
            '02_sonarqube_create_db':
              command: !Join
                - ' '
                - - 'sudo /root/sonarqube/create_db.sh'
                  - 'Fn::ImportValue': !Sub '${ParentDBStack}-EndpointAddress'
                  - 'Fn::ImportValue': !Sub '${ParentDBStack}-EndpointPort'
                  - 'Fn::ImportValue': !Sub '${ParentDBStack}-MasterUsername'
                  - !Sub '${DBMasterPassword}'
              test: 'sudo test ! -e /mnt/sonar/.application_configured'
            '03_sonarqube_configure_gitlab':
              command: !Join
                - ' '
                - - 'sudo /root/sonarqube/configure_gitlab.sh'
                  - 'Fn::ImportValue': !Sub '${ParentGitlabStack}-DNSName'
                  - !Sub '${GitlabRootPassword}'
                  - !Sub '${SonarqubeAdminEmail}'
              test: 'sudo test ! -e /mnt/sonar/.application_configured'
              ignoreErrors: true
            '04_sonarqube_start':
              command: 'sudo service sonar start'
            '05_sonarqube_change_password':
              command: !Join
                - ' '
                - - 'sudo /root/sonarqube/change_password.sh'
                  - 'Fn::ImportValue': !Sub '${ParentDBStack}-EndpointAddress'
                  - 'Fn::ImportValue': !Sub '${ParentDBStack}-EndpointPort'
                  - !Sub '${SonarqubeAdminPassword}'
              test: 'sudo test ! -e /mnt/sonar/.application_configured'
            '98_application_configured':
              command: 'sudo touch /mnt/sonar/.application_configured'
            '99_sonarqube_start':
              command: 'sudo service sonar restart'
          services: 
            sysvinit: 
              sonar: 
                enabled: true
                ensureRunning: true
                files:
                  - /opt/sonar/conf/sonar.properties
    Properties: 
      IamInstanceProfile: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-InstanceProfileEC2Instance'      
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      SecurityGroups: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPrivate'
        - !Ref SecurityGroupHealthCheck
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          yum-config-manager --enable epel
          yum update -y
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --verbose --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          /opt/aws/bin/cfn-signal -e $?   --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
  SecurityGroupHealthCheck:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group for the Health Check'
      VpcId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - CidrIp: 
          'Fn::ImportValue': !Sub '${ParentVpcStack}-CidrBlock'
        FromPort: 9000
        ToPort: 9000
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupHealthCheck'

Outputs: 
  DNSName: 
    Description: 'Public DNS address of the internet facing ELB'
    Value: !Sub '${LoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
      