#
# FILE: elb-asg.yaml
#
# DESCRIPTION: 
#
# To use it, just create a resource in your stack like this
#  Stack: 
#    Type: 'AWS::CloudFormation::Stack'
#    Properties:
#      NotificationARNs:
#        - !Ref TopicHealth
#      Parameters:
#        ParentVpcStack: !Ref ParentVpcStack
#        TopicARN: !Ref TopicHealth
#        HealthCheckPath: '/'
#        HealthCheckPort: 9600
#        LaunchConfiguration: !Ref LaunchConfiguration
#      TemplateURL: https://s3-eu-west-1.amazonaws.com/YOURBUCKETNAME/elb-asg.yaml
#      TimeoutInMinutes: 15
#      Tags:
#        - Key: PLATFORM
#          Value: 
#            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
#        - Key: Name
#          Value: !Sub '${AWS::StackName}-Stack'
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "This is a nested stack aimed to be used by other stacks. It create an AutoScalingGroup and a Load Balancer"
Parameters: 
  ParentVpcStack: 
    Description: 'The VPC stack in which the parent stack resides' 
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the VPC stack'
  TopicARN:
    Description: 'The topic to send AutoScaling Notification to'
    Type: String
  HealthCheckPath:
    Description: 'The Load Balancer HealthCheck Path to check'
    Type: String
    Default: '/'
  HealthCheckPort: 
    Description: 'The Load Balancer HealthCheck Port to check & and forward traffic to'
    Type: Number
    Default: 80
  LaunchConfiguration: 
    Description: 'The AutoScalingGroup LaunchConfiguration to use'
    Type: String
  Timeout: 
    Description: 'The AutoScalingGroup Timeout'
    Type: Number
    Default: 15
Resources: 
  AutoScalingGroup: 
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 1
      MaxSize: 1
      NotificationConfigurations:
        - TopicARN: !Ref TopicARN
          NotificationTypes:
            - 'autoscaling:EC2_INSTANCE_LAUNCH'
            - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
            - 'autoscaling:EC2_INSTANCE_TERMINATE'
            - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZB'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
          PropagateAtLaunch: true
        - Key: Name
          Value: !Sub '${AWS::StackName}-AutoScalingGroup'
          PropagateAtLaunch: true
#    CreationPolicy: 
#      ResourceSignal: 
#        Timeout: !Sub 'PT${Timeout}M'
#        Count: 1
    UpdatePolicy: 
      AutoScalingRollingUpdate: 
        MinInstancesInService: 0
        MaxBatchSize: 1
        PauseTime: !Sub 'PT${Timeout}M'
        WaitOnResourceSignals: true
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group to access the LoadBalancer'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - CidrIp : "0.0.0.0/0"
        FromPort: 443
        ToPort: 443
        IpProtocol: tcp
      - CidrIp : "0.0.0.0/0"
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroup'
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - !Ref SecurityGroup
      Subnets: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZB'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-LoadBalancer'
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Sub '${HealthCheckPath}'
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: !Sub '${HealthCheckPort}'
      Protocol: HTTP
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-TargetGroup'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      TargetGroupAttributes:
        - Key: 'deregistration_delay.timeout_seconds'
          Value: 30
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Sub '${HealthCheckPort}'
      Protocol: HTTP
Outputs: 
  DNSName: 
    Description: 'LoadBalancer public DNS name'
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: 'DNSName'
  SecurityGroup: 
    Description: 'SecurityGroup for the Load Balancer'
    Value: !Ref SecurityGroup
    Export:
      Name: 'SecurityGroup'
  