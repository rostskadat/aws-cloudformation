#
# FILE: 01-vpc.yaml
#
# DESCRIPTION: This Stack create a VPC with:
#   - a DMZ which allow access only from specific IP (should be a VPN gateway).
#   - 2 Public Subnets in different AZ with an Internet Gateway and a NAT Gateway
#   - 2 Private Subnets in different AZ with a routing table pointing to the NAT Gateway
#
# TODO: 
# - Should use https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html#aws-specific-parameter-types
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: This stack create a simple multi-tier VPC with a DMZ, and public/private subnet in 2 AZs
Resources: 
  Vpc: 
    Type: 'AWS::EC2::VPC'
    Properties: 
      CidrBlock: '10.0.0.0/16'
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-Vpc'
  #
  # In order to be able to tag the root EBS volumes of the different instances it is necessary to create a role and
  # attach this role to each instance through an instance profile. Further more each instance must also during boot
  # manually tag the volume with the correct tags.
  #
  RoleTagEC2Instance:
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: 'Allow'
            Principal: 
              Service: 
                - 'ec2.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'
      Path: '/'
      Policies: 
        - PolicyName: 'RoleTagEC2Instance'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: 'Allow'
                Action:
                  # I need to be able to tab volumes, create logs in CloudWatch and get an import.ldif
                  - 'ec2:Describe*'
                  - 'ec2:CreateTags'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                Resource: '*'
  InstanceProfileTagEC2Instance:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles: [ !Ref RoleTagEC2Instance ]
  #
  # Ok let's create the different subnet
  #
  SubnetDMZ: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      CidrBlock: "10.0.0.0/24"
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": !Ref 'AWS::Region' ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SubnetDMZ'
  SubnetPublicAZA: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": !Ref 'AWS::Region' ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SubnetPublicAZA'
  SubnetPublicAZB: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": !Ref 'AWS::Region' ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SubnetPublicAZB'
  SubnetPrivateAZA: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      CidrBlock: "10.0.3.0/24"
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": !Ref 'AWS::Region' ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SubnetPrivateAZA'
  SubnetPrivateAZB: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      CidrBlock: "10.0.4.0/24"
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": !Ref 'AWS::Region' ]
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SubnetPrivateAZB'
  InternetGateway: 
    Type: "AWS::EC2::InternetGateway"
    Properties: 
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-InternetGateway'
  InternetGatewayAttachment: 
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties: 
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  NatGatewayEIP: 
    Type: "AWS::EC2::EIP"
    Properties: 
      Domain: vpc
  NatGateway: 
    Type: "AWS::EC2::NatGateway"
    Properties: 
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref SubnetDMZ
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-NatGateway'
    DependsOn: NatGatewayEIP
  DHCPOptions: 
    Type: "AWS::EC2::DHCPOptions"
    Properties: 
      DomainName: !Join [ ".", [ !Ref "AWS::Region", "compute.internal"] ]
      DomainNameServers: 
        - AmazonProvidedDNS
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-DHCPOptions'
  DHCPOptionsAssociation: 
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Properties: 
      VpcId: !Ref Vpc
      DhcpOptionsId: !Ref DHCPOptions
  RouteTableDMZ: 
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: !Ref Vpc
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-RouteTableDMZ'
  RouteTablePublic: 
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: !Ref Vpc
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-RouteTablePublic'
  RouteTablePrivate: 
    Type: "AWS::EC2::RouteTable"
    Properties: 
      VpcId: !Ref Vpc
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-RouteTablePrivate'
  SecurityGroupDMZ: 
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupDescription: "Security group for instances in the DMZ"
      VpcId: !Ref Vpc
      SecurityGroupIngress: 
        - Description: "Allow all inbound SSH traffic from our public address"
          CidrIp: "195.149.215.221/32"
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - Description: "Allow all inbound SSH traffic from our public address"
          CidrIp: "195.149.209.221/32"
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - Description: "Allow all inbound SSH traffic from our public address"
          CidrIp: "193.127.200.51/32"
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - Description: "Allow all inbound SSH traffic from our public address"
          CidrIp: "193.127.200.52/32"
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupDMZ'
  SecurityGroupPublic: 
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupDescription: "Security group for instances for public facing instances"
      VpcId: !Ref Vpc
      SecurityGroupIngress: 
        - Description: "Allow all inbound HTTPS traffic from the internet"
          CidrIp: "0.0.0.0/0"
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - Description: "Allow all inbound traffic from the DMZ"
          SourceSecurityGroupId: !Ref SecurityGroupDMZ
          IpProtocol: "-1"
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupPublic'
  SecurityGroupPrivate: 
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupDescription: "Security group for instances for private instances"
      VpcId: !Ref Vpc
      SecurityGroupIngress: 
        - Description: "Allow all inbound traffic from the DMZ"
          SourceSecurityGroupId: !Ref SecurityGroupDMZ
          IpProtocol: "-1"
      Tags: 
        - Key: PLATFORM
          Value: !Sub '${AWS::StackName}'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupPrivate'
  SecurityGroupIngressPublic: 
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties: 
      GroupId: !Ref SecurityGroupPublic
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref SecurityGroupPublic
  SecurityGroupIngressPrivate: 
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties: 
      GroupId: !Ref SecurityGroupPrivate
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref SecurityGroupPrivate
  NetworkAcl: 
    Type: "AWS::EC2::NetworkAcl"
    Properties: 
      VpcId: !Ref Vpc
  NetworkAclOutbound: 
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: "0.0.0.0/0"
      Egress: true
      Protocol: "-1"
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref NetworkAcl
  NetworkAclInbound: 
    Type: "AWS::EC2::NetworkAclEntry"
    Properties: 
      CidrBlock: "0.0.0.0/0"
      Protocol: "-1"
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref NetworkAcl
  NetworkAclPublicAZA: 
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties: 
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref SubnetPublicAZA
  NetworkAclPublicAZB: 
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties: 
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref SubnetPublicAZB
  NetworkAclPrivateAZA: 
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties: 
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref SubnetPrivateAZA
  NetworkAclPrivateAZB: 
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties: 
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref SubnetPrivateAZB
  SubnetRouteTableAssociationDMZ: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      RouteTableId: !Ref RouteTableDMZ
      SubnetId: !Ref SubnetDMZ
  SubnetRouteTableAssociationPublicAZA: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicAZA
  SubnetRouteTableAssociationPublicAZB: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublicAZB
  SubnetRouteTableAssociationPrivateAZA: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetPrivateAZA
  SubnetRouteTableAssociationPrivateAZB: 
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties: 
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetPrivateAZB
  RouteDMZInternetGateway: 
    Type: "AWS::EC2::Route"
    Properties: 
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref RouteTableDMZ
      GatewayId: !Ref InternetGateway
    DependsOn: InternetGatewayAttachment
  RoutePublicInternetGateway: 
    Type: "AWS::EC2::Route"
    Properties: 
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref RouteTablePublic
      GatewayId: !Ref InternetGateway
    DependsOn: InternetGatewayAttachment
  RouteNatGateway: 
    Type: "AWS::EC2::Route"
    Properties: 
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref RouteTablePrivate
      NatGatewayId: !Ref NatGateway
    DependsOn: NatGateway
Outputs: 
  StackName: 
    Description: "The name of the Stack"
    Value: !Sub '${AWS::StackName}'
    Export:
      Name: !Sub '${AWS::StackName}-StackName'
  Vpc: 
    Description: "VpcId of the newly created VPC"
    Value: !Ref Vpc
    Export:
      Name: !Sub '${AWS::StackName}-Vpc'
  CidrBlock:
    Description: "The CidrBlock of the newly created VPC"
    Value:  !GetAtt Vpc.CidrBlock
    Export:
      Name: !Sub '${AWS::StackName}-CidrBlock'
  InstanceProfileTagEC2Instance:
    Description: "The Instance Profile allowing to tag Root volume of each instances in this VPC"
    Value: !Ref InstanceProfileTagEC2Instance
    Export:
      Name: !Sub '${AWS::StackName}-InstanceProfileTagEC2Instance'
  SecurityGroupDMZ:
    Description: 'Security Group for the DMZ instances'
    Value: !Ref SecurityGroupDMZ
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupDMZ'
  SubnetDMZ:
    Description: 'Subnet for the DMZ'
    Value: !Ref SubnetDMZ
    Export:
      Name: !Sub '${AWS::StackName}-SubnetDMZ'
  AvailabilityZoneSubnetDMZ:
    Description: 'AZ for the DMZ Subnet'
    Value: !GetAtt SubnetDMZ.AvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}-AvailabilityZoneSubnetDMZ'
  SecurityGroupPublic:
    Description: 'Security Group for the Public instances'
    Value: !Ref SecurityGroupPublic
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupPublic'
  SubnetPublicAZA:
    Description: 'Subnet Public AZA'
    Value: !Ref SubnetPublicAZA
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPublicAZA'
  AvailabilityZoneSubnetPublicAZA:
    Description: 'AZ for the SubnetPublicAZA'
    Value: !GetAtt SubnetPublicAZA.AvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}-AvailabilityZoneSubnetPublicAZA'
  SubnetPublicAZB:
    Description: 'Subnet Public AZB'
    Value: !Ref SubnetPublicAZB
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPublicAZB'
  AvailabilityZoneSubnetPublicAZB:
    Description: 'AZ for the SubnetPublicAZB'
    Value: !GetAtt SubnetPublicAZB.AvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}-AvailabilityZoneSubnetPublicAZB'
  SecurityGroupPrivate:
    Description: 'Security Group for the Private instances'
    Value: !Ref SecurityGroupPrivate
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupPrivate'
  SubnetPrivateAZA:
    Description: 'Subnet Private AZA'
    Value: !Ref SubnetPrivateAZA
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPrivateAZA'
  AvailabilityZoneSubnetPrivateAZA:
    Description: 'AZ for the SubnetPrivateAZA'
    Value: !GetAtt SubnetPrivateAZA.AvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}-AvailabilityZoneSubnetPrivateAZA'
  SubnetPrivateAZB:
    Description: 'Subnet Private AZB'
    Value: !Ref SubnetPrivateAZB
    Export:
      Name: !Sub '${AWS::StackName}-SubnetPrivateAZB'      
  AvailabilityZoneSubnetPrivateAZB:
    Description: 'AZ for the SubnetPrivateAZB'
    Value: !GetAtt SubnetPrivateAZB.AvailabilityZone
    Export:
      Name: !Sub '${AWS::StackName}-AvailabilityZoneSubnetPrivateAZB'
  SubnetsPublic:
    Description: 'Public subnets.'
    Value: !Join [',', [!Ref SubnetDMZ, !Ref SubnetPublicAZA, !Ref SubnetPublicAZB]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPublic'
  SubnetsPrivate:
    Description: 'Subnets private.'
    Value: !Join [',', [!Ref SubnetPrivateAZA, !Ref SubnetPrivateAZB]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPrivate'
