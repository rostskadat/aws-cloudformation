#
# FILE: 08-jenkins.yaml
#
# DESCRIPTION: This Stack create a Jenkins Host as well as an Internet facing LoadBalancer.
#
# NOTE: in order to create the AMI mapping you can run the following command. (needs a bit of massaging: 
#   should extract the ami and the region name, and output everything in the YAML compatible format)
# 
# for region in $(aws ec2 describe-regions --query 'Regions[*].{Name:RegionName}' --output text); do
#   aws --region $region ec2 describe-images --owners amazon --filters "Name=name,Values=amzn-ami-hvm-$(date +%Y)*-gp2" "Name=architecture,Values=x86_64" "Name=root-device-type,Values=ebs" --query 'Images[*].{ID:ImageId}'
# done
#
# TODO: 
# - Should use https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html#aws-specific-parameter-types
# - Should use NestedStack as described in https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html
# - Should provide alert when the platform is unhealthy
# - LOOK AT https://docs.sonarqube.org/display/SONAR/Hardware+Recommendations
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "This stack create a Jenkins host"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stack'
      Parameters:
      - ParentVpcStack
      - ParentLDAPStack
      - OpenLDAPAdminPassword
    - Label: 
        default: 'EC2 Parameters'
      Parameters:
      - KeyName
      - JenkinsInstanceType
    - Label:
        default: 'Jenkins Parameters'
      Parameters:
      - JenkinsAdminPassword
Parameters: 
  ParentVpcStack: 
    Description: "Enter the name of the VPC Stack where Jenkins will reside"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the VPC stack'
  ParentLDAPStack:
    Description: "Enter the name of the OpenLDAP Stack"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the LDAP stack'
  OpenLDAPAdminPassword: 
    Description: 'The OpenLDAP Admin password'
    Type: String
    NoEcho: true
    MinLength: 3
  KeyName: 
    Description: "The Jenkins instance Key Pair"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: "Must be the name of an existing EC2 KeyPair."
  JenkinsInstanceType:
    Description: 'The Jenkins instance type'
    Type: String
    Default: 'c4.large'    
  JenkinsAdminPassword: 
    Description: 'The Jenkins Admin password'
    Type: String
    MinLength: 1
    NoEcho: true
Mappings:
  RegionMap:
    'ap-south-1':
      AMI: 'ami-76d6f519'
    'eu-west-3':
      AMI: 'ami-969c2deb'
    'eu-west-2':
      AMI: 'ami-a36f8dc4'
    'eu-west-1':
      AMI: 'ami-ca0135b3'
    'ap-northeast-2':
      AMI: 'ami-c10fa6af'
    'ap-northeast-1':
      AMI: 'ami-92df37ed'
    'sa-east-1':
      AMI: 'ami-3885d854'
    'ca-central-1':
      AMI: 'ami-338a0a57'
    'ap-southeast-1':
      AMI: 'ami-de90a5a2'
    'ap-southeast-2':
      AMI: 'ami-423bec20'
    'eu-central-1':
      AMI: 'ami-9a91b371'
    'us-east-1':
      AMI: 'ami-14c5486b'
    'us-east-2':
      AMI: 'ami-922914f7'
    'us-west-1':
      AMI: 'ami-25110f45'
    'us-west-2':
      AMI: 'ami-e251209a'    
Resources: 
  #
  # Let's create the SecurityGroup for the ELB LoadBalancer. Basically it should only allow traffic on the HTTP/S port
  #   from the Internet. If you want to restrict the IP from which to accept traffic, do it here. you can have a look 
  #   at the 01-vpc.yaml, and more specifically the SecurityGroupDMZ for an example.
  #
  SecurityGroupELB:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group to access Jenkins ELB'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - CidrIp : "0.0.0.0/0"
        FromPort: 443
        ToPort: 443
        IpProtocol: tcp
      - CidrIp : "0.0.0.0/0"
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupELB'
  LoadBalancerJenkins:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: 'internet-facing'
      SecurityGroups:
      - !Ref SecurityGroupELB
      Subnets: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZB'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-LoadBalancerJenkins'
  TargetGroupJenkins:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/login'
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 8080
      Protocol: HTTP
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-TargetGroupJenkins'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      TargetGroupAttributes:
        - Key: 'deregistration_delay.timeout_seconds'
          Value: 30
      Targets:
        - Id: !Ref JenkinsHost
    DependsOn: JenkinsHost
  ListenerJenkins:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroupJenkins
        Type: forward
      LoadBalancerArn: !Ref LoadBalancerJenkins
      Port: 80
      Protocol: HTTP
  #
  # Let's create the Jenkins instance.
  # 
  # TODO: Should have a specific SecurityGroup for the instance in order to only allow traffic on port 8000 (default
  #   Jenkins port). Further more I should enable SSL traffic, but beware that the load balancer might not allow 
  #   communications with a host presenting a self-signed certificate.
  #
  SecurityGroupJenkins:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group to access the Jenkins instance'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - SourceSecurityGroupId: 
          !Ref 'SecurityGroupELB'
        FromPort: 8080
        ToPort: 8080
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupJenkins'
  #
  # Ok let's configure the main host then
  #
  JenkinsHost: 
    Type: 'AWS::EC2::Instance'
    Metadata:
      AWS::CloudFormation::Init:
        #
        # The logs for the cfn-init command are available in the instance in /var/log/cfn-init-cmd.log 
        # , InstallJenkins
        configSets: 
          default: [ Bootstrap, InstallJenkins ]
        Bootstrap:
          packages:
            yum:
              htop: []
              awslogs: []
              yum-cron: []
          files:
            '/home/ec2-user/.bashrc':
              content: !Sub |
                [ -f /etc/bashrc ] && . /etc/bashrc
                alias c=clear
                alias l='ls -l'
                alias vi=vim
              mode: '000600'
              owner: 'ec2-user'
              group: 'ec2-user'
            '/root/tag_root_volume.sh':
              content: !Sub |
                #!/bin/bash
                STACK_NAME=${AWS::StackName}
                REGION=${AWS::Region}
                echo "Tagging Root volume..."
                INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                VOLUME_ID=$(aws --region $REGION ec2 describe-volumes --filters "Name=attachment.instance-id,Values=$INSTANCE_ID" "Name=attachment.device,Values=/dev/xvda" --query "Volumes[0].VolumeId" --output text)
                PLATFORM=$(aws --region $REGION ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].Tags" --output table | grep PLATFORM | cut -d '|' -f 3 | sed -e 's/ //g')
                aws --region $REGION ec2 create-tags --resources $VOLUME_ID --tag "Key=Name,Value=$STACK_NAME-VolumeRoot"
                aws --region $REGION ec2 create-tags --resources $VOLUME_ID --tag "Key=PLATFORM,Value=$PLATFORM"
              mode: '000744'
              owner: 'root'
              group: 'root'
            '/etc/yum.repos.d/jenkins.repo':
              source: 'http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo'
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            '01_install_aws_inspector': 
              command: 'wget -q -O - https://d1wk0tztpsntt1.cloudfront.net/linux/latest/install | sudo bash -s'
            '02_yum_cron_hourly.conf':
              command: "sudo sed -ibckp -E 's/^update_cmd.*/update_cmd = security/;s/^(update_messages|download_updates|apply_updates).*/\\1 = yes/' /etc/yum/yum-cron-hourly.conf"
            '03_yum_cron.conf':
              command: "sudo sed -ibckp -E 's/^(update_messages|download_updates|apply_updates).*/\\1 = yes/' /etc/yum/yum-cron.conf"
            '04_tag_root_volume':
              command: "sudo /root/tag_root_volume.sh"
            '05_remove_jdk7':
              command: 'sudo yum remove -y java-1.7.0-openjdk'
            '06_rpm_import':
              command: 'sudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key'
          services:
            sysvinit:
              yum-cron: 
                enabled: true
                ensureRunning: true
        InstallJenkins: 
          packages:
            yum:
              py-bcrypt: []
              java-1.8.0-openjdk: []
              jenkins: []
          files:
            '/root/jenkins_change_password.sh': 
              content: |
                #!/bin/bash
                password=$1
                [ -z "$password" ] && echo "Invalid password" && exit
                bcrypt_password=$(python2.6 -c "import bcrypt; print(bcrypt.hashpw('$password', bcrypt.gensalt(log_rounds=10)))")
                while [ ! -f /var/lib/jenkins/users/admin/config.xml ]; do
                  echo -n '.'
                  sleep 1
                done
                sed -ibckp "s-<passwordHash>.*</passwordHash>-<passwordHash>#jbcrypt:$bcrypt_password</passwordHash>-" /var/lib/jenkins/users/admin/config.xml
              mode: '000700'
              owner: 'root'
              group: 'root'
          commands:
            '01_alternatives_java':
              command: 'sudo /usr/sbin/alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java'
            '02_jenkins_start':
              command: 'sudo service jenkins start'
            '03_jenkins_change_password':
              command: !Join
                - ' '
                - - 'sudo /root/jenkins_change_password.sh'
                  - !Sub '${JenkinsAdminPassword}'
            '04_jenkins_restart':
              command: 'sudo service jenkins restart'
          services: 
            sysvinit: 
              jenkins: 
                enabled: true
                ensureRunning: true
    Properties: 
      DisableApiTermination: false
      InstanceInitiatedShutdownBehavior: stop
      IamInstanceProfile: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-InstanceProfileTagEC2Instance'      
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref JenkinsInstanceType
      KeyName: !Ref 'KeyName'
      SecurityGroupIds: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPrivate'
        - !Ref SecurityGroupJenkins
      SubnetId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
      Volumes: 
        - VolumeId: !Ref VolumeData
          Device: '/dev/xvdb'
      Monitoring: false
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          yum-config-manager --enable epel
          yum update -y
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --resource JenkinsHost --region ${AWS::Region}
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-JenkinsHost'
    DependsOn: VolumeData
  VolumeData:
    Type: 'AWS::EC2::Volume'
    Properties:
      Size: 500
      Encrypted: true
      AvailabilityZone: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-AvailabilityZoneSubnetPrivateAZA'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-VolumeData'
Outputs: 
  InstanceId: 
    Description: "InstanceId of the newly created Jenkins instance"
    Value: !Ref JenkinsHost
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'
  DNSName: 
    Description: "Public DNS address of the internet facing ELB"
    Value: !Sub '${LoadBalancerJenkins.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
      