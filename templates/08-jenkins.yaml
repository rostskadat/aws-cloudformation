#
# FILE: 08-jenkins.yaml
#
# DESCRIPTION: This Stack create a Jenkins Host as well as an Internet facing LoadBalancer.
#
# NOTE: in order to create the AMI mapping you can run the following command. (needs a bit of massaging: 
#   should extract the ami and the region name, and output everything in the YAML compatible format)
# 
# for region in $(aws ec2 describe-regions --query 'Regions[*].{Name:RegionName}' --output text); do
#   latest=$(aws --region $region ec2 describe-images --owners amazon \
#     --filters "Name=name,Values=amzn-ami-hvm-$(date +%Y)*-gp2" \
#               "Name=architecture,Values=x86_64" \
#               "Name=root-device-type,Values=ebs" \
#     --query 'Images[*].{ID:ImageLocation}' | jq '.[].ID' | sort -r | head -1 | tr -d '"')
# done
#
# TODO: 
# - Should use https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html#aws-specific-parameter-types
# - Should use NestedStack as described in https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html
# - Should provide alert when the platform is unhealthy
# - Allow cfn-auto-reload (cf example in jenkins2-ha.yaml)
# - Add list of common SSH Site we want to connect to
# - Configure SMTP server
# - Configure Global Tool Configuration >> SonarQube Scanner
# - Configure Global Tool Configuration >> Docker 
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "This stack create a Jenkins host"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stack'
      Parameters:
      - ParentVpcStack
      - ParentLDAPStack
      - ParentArtifactoryStack
      - ParentSonarqubeStack
    - Label: 
        default: 'EC2 Parameters'
      Parameters:
      - KeyName
      - InstanceType
    - Label: 
        default: 'LDAP Parameter'
      Parameters:
      - LDAPManagerPassword
    - Label:
        default: 'Artifactory Parameters'
      Parameters:
      - ArtifactoryAdminPassword
    - Label:
        default: 'Sonarqube Parameters'
      Parameters:
      - SonarqubeAdminPassword
    - Label:
        default: 'Jenkins Parameters'
      Parameters:
      - JenkinsAdminEmail
      - JenkinsAdminPassword
Parameters: 
  ParentVpcStack: 
    Description: "Enter the name of the VPC Stack where Jenkins will reside"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the VPC stack'
  ParentLDAPStack:
    Description: "Enter the name of the LDAP Stack"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the LDAP stack'
  ParentArtifactoryStack:
    Description: "Enter the name of the Artifactory Stack"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the Artifactory stack'
  ParentSonarqubeStack:
    Description: "Enter the name of the Artifactory Stack"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the Artifactory stack'
  KeyName: 
    Description: "The Jenkins instance Key Pair"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: "Must be the name of an existing EC2 KeyPair."
  InstanceType:
    Description: 'The Jenkins instance type'
    Type: String
    Default: 'c5.large'    
  LDAPManagerPassword: 
    Description: 'The LDAP Admin password'
    Type: String
    NoEcho: true
    MinLength: 3
  ArtifactoryAdminPassword:
    Description: 'The Artifactory Admin password'
    Type: String
    NoEcho: true
    MinLength: 3
  SonarqubeAdminPassword:
    Description: 'The Sonarqube Admin password'
    Type: String
    NoEcho: true
    MinLength: 3
  JenkinsAdminEmail: 
    Description: 'The Jenkins Admin email'
    Type: String
    Default: 'admin@example.com'
  JenkinsAdminPassword: 
    Description: 'The Jenkins Admin password'
    Type: String
    MinLength: 1
    NoEcho: true
Mappings:
  # cf 01-mappings.yaml
  RegionMap:
    ap-northeast-1:
      AMI: ami-92df37ed
    ap-northeast-2:
      AMI: ami-c10fa6af
    ap-south-1:
      AMI: ami-76d6f519
    ap-southeast-1:
      AMI: ami-de90a5a2
    ap-southeast-2:
      AMI: ami-423bec20
    ca-central-1:
      AMI: ami-338a0a57
    eu-central-1:
      AMI: ami-9a91b371
    eu-west-1:
      AMI: ami-ca0135b3
    eu-west-2:
      AMI: ami-a36f8dc4
    eu-west-3:
      AMI: ami-969c2deb
    sa-east-1:
      AMI: ami-3885d854
    us-east-1:
      AMI: ami-14c5486b
    us-east-2:
      AMI: ami-922914f7
    us-west-1:
      AMI: ami-25110f45
    us-west-2:
      AMI: ami-e251209a
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
Resources: 
  TopicHealth: 
    Type: 'AWS::SNS::Topic'
    Properties: 
      DisplayName: !Sub '${AWS::StackName} - Server health notification'
      Subscription:
        - Endpoint: !Ref JenkinsAdminEmail
          Protocol: 'email'
  AutoScalingGroup: 
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 1
      MaxSize: 1
      NotificationConfigurations:
        - TopicARN: !Ref TopicHealth
          NotificationTypes:
            - 'autoscaling:EC2_INSTANCE_LAUNCH'
            - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
            - 'autoscaling:EC2_INSTANCE_TERMINATE'
            - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZB'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
          PropagateAtLaunch: true
        - Key: Name
          Value: !Sub '${AWS::StackName}-AutoScalingGroup'
          PropagateAtLaunch: true
    CreationPolicy: 
      ResourceSignal: 
        Timeout: PT15M
        Count: 1
    UpdatePolicy: 
      AutoScalingRollingUpdate: 
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
    DependsOn:
      - MountTargetA
      - MountTargetB
  SecurityGroupELB:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group to access the LoadBalancer'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - CidrIp : "0.0.0.0/0"
        FromPort: 443
        ToPort: 443
        IpProtocol: tcp
      - CidrIp : "0.0.0.0/0"
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupELB'
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - !Ref SecurityGroupELB
      Subnets: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZB'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-LoadBalancer'
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/login'
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 8080
      Protocol: HTTP
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-TargetGroup'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      TargetGroupAttributes:
        - Key: 'deregistration_delay.timeout_seconds'
          Value: 30
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  SecurityGroupEFS:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group to access Splunk EFS'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - SourceSecurityGroupId: 
          'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPrivate'
        FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupEFS'
  FileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties: 
      Encrypted: true
      FileSystemTags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-FileSystem'
      PerformanceMode: generalPurpose
  MountTargetA:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
        - !Ref SecurityGroupEFS
      SubnetId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
  MountTargetB:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups:
        - !Ref SecurityGroupEFS
      SubnetId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZB'
  HostLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
      RetentionInDays: 7
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      AWS::CloudFormation::Init:
        configSets: 
          default: [ Bootstrap, BootstrapApplication, InstallApplication ]
        Bootstrap:
          packages:
            yum:
              wget: []
              htop: []
              awslogs: []
              yum-cron: []
          files:
            '/etc/awslogs/awscli.conf':
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            '/etc/awslogs/awslogs.conf':
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}/var/log/messages
                log_group_name = ${HostLogs}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}/var/log/secure
                log_group_name = ${HostLogs}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = {instance_id}/var/log/cron
                log_group_name = ${HostLogs}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}/var/log/cloud-init.log
                log_group_name = ${HostLogs}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}/var/log/cfn-init.log
                log_group_name = ${HostLogs}
                [/var/log/cfn-hup.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-hup.log
                log_stream_name = {instance_id}/var/log/cfn-hup.log
                log_group_name = ${HostLogs}
                [/var/log/cfn-init-cmd.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init-cmd.log
                log_stream_name = {instance_id}/var/log/cfn-init-cmd.log
                log_group_name = ${HostLogs}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}/var/log/cloud-init-output.log
                log_group_name = ${HostLogs}
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_stream_name = {instance_id}/var/log/dmesg
                log_group_name = ${HostLogs}
              mode: '000644'
              owner: root
              group: root
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
              mode: '000400' 
              owner: 'root'
              group: 'root'
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
                runas=root
              mode: '000400' 
              owner: 'root'
              group: 'root'
            '/home/ec2-user/.bashrc':
              content: !Sub |
                [ -f /etc/bashrc ] && . /etc/bashrc
                alias c=clear
                alias l='ls -l'
                alias vi=vim
              mode: '000600'
              owner: 'ec2-user'
              group: 'ec2-user'
            '/root/tag_root_volume.sh':
              content: !Sub |
                #!/bin/bash
                STACK_NAME=${AWS::StackName}
                REGION=${AWS::Region}
                echo "Tagging Root volume..."
                INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                VOLUME_ID=$(aws --region $REGION ec2 describe-volumes --filters "Name=attachment.instance-id,Values=$INSTANCE_ID" "Name=attachment.device,Values=/dev/xvda" --query "Volumes[0].VolumeId" --output text)
                PLATFORM=$(aws --region $REGION ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].Tags" --output table | grep PLATFORM | cut -d '|' -f 3 | sed -e 's/ //g')
                aws --region $REGION ec2 create-tags --resources $VOLUME_ID --tag "Key=Name,Value=$STACK_NAME-VolumeRoot"
                aws --region $REGION ec2 create-tags --resources $VOLUME_ID --tag "Key=PLATFORM,Value=$PLATFORM"
              mode: '000744'
              owner: 'root'
              group: 'root'
          commands:
            '01_install_aws_inspector': 
              command: 'wget -q -O - https://d1wk0tztpsntt1.cloudfront.net/linux/latest/install | sudo bash -s'
            '02_yum_cron_hourly.conf':
              command: "sudo sed -ibckp -E 's/^update_cmd.*/update_cmd = security/;s/^(update_messages|download_updates|apply_updates).*/\\1 = yes/' /etc/yum/yum-cron-hourly.conf"
            '03_yum_cron.conf':
              command: "sudo sed -ibckp -E 's/^(update_messages|download_updates|apply_updates).*/\\1 = yes/' /etc/yum/yum-cron.conf"
            '04_tag_root_volume':
              command: "sudo /root/tag_root_volume.sh"
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - awslogs
                files:
                - '/etc/awslogs/awslogs.conf'
                - '/etc/awslogs/awscli.conf'
              cfn-hup:
                enabled: true
                ensureRunning: true
                files: 
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              yum-cron: 
                enabled: true
                ensureRunning: true
                files:
                  - /etc/yum/yum-cron.conf
                  - /etc/yum/yum-cron-hourly.conf
        BootstrapApplication:
          packages:
            yum: 
              py-bcrypt: []
              java-1.8.0-openjdk: []
              java-1.8.0-openjdk-devel: []
              amazon-efs-utils: []
          files: 
            '/etc/yum.repos.d/epel-apache-maven.repo':
              source: 'http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo'
              mode: "000644"
              owner: "root"
              group: "root"
            '/etc/yum.repos.d/jenkins.repo':
              source: 'http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo'
              mode: "000644"
              owner: "root"
              group: "root"
            '/root/create_fs.sh': 
              content: |
                #!/bin/bash -x
                MNT=/mnt/jenkins
                [ ! -d $MNT ] && mkdir $MNT
                mount -t efs -o tls ${FileSystem}:/ $MNT
                [ ! -d $MNT/var ] && mkdir $MNT/var
                [ ! -d /var/lib ] && mkdir -p /var/lib; ln -s $MNT/var /var/lib/jenkins
              mode: "000700"
              owner: "root"
              group: "root"
            '/root/fix_repo.sh': 
              content: |
                #!/bin/bash -x
                sed -i s/\$releasever/7/g /etc/yum.repos.d/epel-apache-maven.repo
              mode: "000700"
              owner: "root"
              group: "root"
          commands:
            '01_alternatives_java':
              command: 'sudo /usr/sbin/alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java'
            '02_remove_jdk7':
              command: 'sudo yum remove -y java-1.7.0-openjdk'
            '03_rpm_import':
              command: 'sudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key'
            '04_create_fs':
              command: 'sudo /root/create_fs.sh'              
            '05_fix_repo':
              command: 'sudo /root/fix_repo.sh'              
        InstallApplication: 
          packages:
            yum:
              jq: []
              ant: []
              git: []
              jenkins: []
              apache-maven: []
          files:
            '/root/plugins.txt':
              content: |
                ace-editor
                ant
                antisamy-markup-formatter
                artifactory
                build-pipeline-plugin
                build-timeout
                checkstyle
                categorized-view 
                cloudbees-folder
                cobertura
                compact-columns 
                conditional-buildstep
                config-file-provider
                configure-job-column-plugin 
                copyartifact
                downstream-buildview 
                email-ext
                emailext-template
                embeddable-build-status
                envinject 
                extensible-choice-parameter 
                git-parameter
                gradle
                greenballs 
                groovy 
                groovy-postbuild 
                htmlpublisher
                javadoc 
                jira 
                job-dsl 
                jenkins-multijob-plugin
                junit
                ldap
                mailer
                matrix-auth
                parameterized-trigger
                pipeline-stage-view
                publish-over-ssh
                rebuild
                sonar
                ssh
                ssh-agent
                ssh-slaves
                swarm 
                timestamper
                token-macro 
                view-job-filters 
                warnings
                workflow-aggregator
                ws-cleanup
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/var/lib/jenkins/hudson.tasks.Ant.xml':
              content: |
                <?xml version='1.1' encoding='UTF-8'?>
                <hudson.tasks.Ant_-DescriptorImpl>
                  <installations><hudson.tasks.Ant_-AntInstallation><name>ant</name><home>/usr/share/ant</home><properties/></hudson.tasks.Ant_-AntInstallation></installations>
                </hudson.tasks.Ant_-DescriptorImpl>
              mode: '000644'
              owner: 'jenkins'
              group: 'jenkins'
            '/var/lib/jenkins/hudson.tasks.Maven.xml':
              content: |
                <?xml version='1.1' encoding='UTF-8'?>
                <hudson.tasks.Maven_-DescriptorImpl>
                  <installations><hudson.tasks.Maven_-MavenInstallation><name>maven</name><home>/usr/share/apache-maven</home><properties/></hudson.tasks.Maven_-MavenInstallation></installations>
                </hudson.tasks.Maven_-DescriptorImpl>
              mode: '000644'
              owner: 'jenkins'
              group: 'jenkins'
            '/var/lib/jenkins/hudson.plugins.git.GitTool.xml':
              content: |
                <?xml version='1.1' encoding='UTF-8'?>
                <hudson.plugins.git.GitTool_-DescriptorImpl>
                  <installations class="hudson.plugins.git.GitTool-array"><hudson.plugins.git.GitTool><name>Default</name><home>/usr/bin/git</home><properties/></hudson.plugins.git.GitTool></installations>
                </hudson.plugins.git.GitTool_-DescriptorImpl>
              mode: '000644'
              owner: 'jenkins'
              group: 'jenkins'
            '/var/lib/jenkins/jenkins.model.JenkinsLocationConfiguration.xml': 
              content: !Sub |
                <?xml version='1.1' encoding='UTF-8'?>
                <jenkins.model.JenkinsLocationConfiguration>
                  <adminAddress>${JenkinsAdminEmail}</adminAddress>
                  <jenkinsUrl>http://${LoadBalancerJenkins.DNSName}/</jenkinsUrl>
                </jenkins.model.JenkinsLocationConfiguration>
              mode: '000644'
              owner: 'jenkins'
              group: 'jenkins'
            '/root/jenkins_call_cli.sh':
              content: |
                #!/bin/bash
                groovyFile=$1
                adminPassword=$2
                [ -z "$groovyFile" ] && echo "Invalid groovyFile" && exit 1
                [ ! -f "$groovyFile" ] && echo "Invalid groovyFile: no such file" && exit 1
                [ -z "$adminPassword" ] && echo "Invalid adminPassword" && exit 1
                cli=/var/cache/jenkins/war/WEB-INF/jenkins-cli.jar
                url=http://localhost:8080
                java -jar $cli -s $url -auth "admin:$adminPassword" groovy = --username admin --password "$adminPassword" < <(cat $groovyFile)
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/jenkins_install_plugins.sh': 
              content: |
                #!/bin/bash
                password=$1
                [ -z "$password" ] && echo "Invalid password" && exit 1
                initialPassword=/var/lib/jenkins/secrets/initialAdminPassword
                cli=/var/cache/jenkins/war/WEB-INF/jenkins-cli.jar
                url=http://localhost:8080
                wait() {
                  # make sure that I re-read the initial password each time...
                  until $(curl -s --max-time 60 -o /dev/null --head --fail --user "admin:$(cat $initialPassword 2> /dev/null)" $url/cli/); do
                    echo -n '.'; sleep 1
                  done
                }
                echo -n "Waiting for Jenkins to startup..."
                wait
                echo ""
                echo "Configuring slaveAgentPort..."
                sed -i -e "s@<slaveAgentPort>.*</slaveAgentPort>@<slaveAgentPort>49817</slaveAgentPort>@" /var/lib/jenkins/config.xml
                echo "Configuring label..."
                sed -i -e "s@<label>.*</label>@<label>master</label>@" /var/lib/jenkins/config.xml
                service jenkins restart
                wait
                echo "Changing default password for admin..."
                echo "jenkins.model.Jenkins.instance.securityRealm.createAccount('admin', '$password')" | \
                  java -jar $cli -s $url -auth "admin:$(cat $initialPassword)" groovy =
                echo "Installing plugins..."
                java -jar $cli -s $url -auth "admin:$password" install-plugin $(cat /root/plugins.txt | tr "\n" " ")
                service jenkins restart
                until $(curl -s --max-time 60 -o /dev/null --head --fail --user "admin:$password" $url/cli/); do
                    echo -n '.'; sleep 1
                done
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/jenkins_configure_ldap.groovy':
              # Inspired from https://github.com/samrocketman/jenkins-bootstrap-shared
              content: |
                import hudson.security.LDAPSecurityRealm
                import hudson.util.Secret
                import jenkins.model.Jenkins
                import jenkins.model.IdStrategy
                import jenkins.security.plugins.ldap.LDAPConfiguration

                if(!(Jenkins.instance.securityRealm instanceof LDAPSecurityRealm)) {
                  LDAPConfiguration conf = new LDAPConfiguration(
                    '%ldapHostname%:%ldapPort%',
                    '%rootDC%',
                    false,
                    '%managerDN%',
                    Secret.fromString('%managerPassword%'))
                  conf.userSearchBase = 'ou=People'
                  conf.userSearch = 'uid={0}'
                  conf.groupSearchBase = 'ou=Group'
                  conf.displayNameAttributeName = 'displayName'
                  conf.mailAddressAttributeName = 'mail'
                  List<LDAPConfiguration> configurations = [conf]
                  Jenkins.instance.securityRealm = new LDAPSecurityRealm(
                    configurations,
                    false,
                    null,
                    IdStrategy.CASE_INSENSITIVE,
                    IdStrategy.CASE_INSENSITIVE)
                  Jenkins.instance.save()
                  println 'Security realm set to LDAP.'
                } else {
                  println 'Nothing changed.  LDAP security realm already configured.'
                }
              mode: '000600'
              owner: 'root'
              group: 'root'
            '/root/jenkins_configure_ldap.sh':
              content: |
                #!/bin/bash
                ldapHostname="$1"
                ldapPort="$2"
                rootDC="$3"
                managerDN="$4"
                managerPassword="$5"
                adminPassword="$6"
                [ -z "$ldapHostname" ] && echo "Invalid ldapHostname" && exit 1
                [ -z "$ldapPort" ] && echo "Invalid ldapPort" && exit 1
                [ -z "$rootDC" ] && echo "Invalid rootDC" && exit 1
                [ -z "$managerDN" ] && echo "Invalid managerDN" && exit 1
                [ -z "$managerPassword" ] && echo "Invalid managerPassword" && exit 1
                [ -z "$adminPassword" ] && echo "Invalid adminPassword" && exit 1
                ldapHostname=${ldapHostname,,}
                sed -ibckp -E "s/%ldapHostname%/$ldapHostname/;s/%ldapPort%/$ldapPort/;s/%rootDC%/$rootDC/;s/%managerDN%/$managerDN/;s/%managerPassword%/$managerPassword/" /root/jenkins_configure_ldap.groovy
                echo "Configuring LDAP..."
                /root/jenkins_call_cli.sh /root/jenkins_configure_ldap.groovy "$adminPassword"
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/jenkins_configure_artifactory.groovy':
              content: |
                import jenkins.model.Jenkins
                import org.jfrog.hudson.*
                artifactory = Jenkins.instance.getExtensionList('org.jfrog.hudson.ArtifactoryBuilder$DescriptorImpl')[0]
                artifactory.useCredentialsPlugin = false;
                artifactory.pushToBintrayEnabled = false;
                artifactory.buildInfoProxyEnabled = false;
                CredentialsConfig credentials = new CredentialsConfig('%artifactoryAdminUsername%', '%artifactoryAdminPassword%', 'ARTIFACTORY_CREDENTIALS')
                ArtifactoryServer server = new ArtifactoryServer('ARTIFACTORY', 'http://%artifactoryDNSName%/artifactory', credentials, credentials, 300, true, 3);
                artifactory.artifactoryServers = [ server ]
                artifactory.save();
                println 'Artifactory configured...' 
              mode: '000600'
              owner: 'root'
              group: 'root'
            '/root/jenkins_configure_artifactory.sh':
              content: |
                #!/bin/bash
                # NOTE: Should create a specific user for Jenkins, but the user API is only for Artifactory PRO
                artifactoryDNSName="$1"
                artifactoryAdminUsername="$2"
                artifactoryAdminPassword="$3"
                adminPassword="$4"
                [ -z "$artifactoryDNSName" ] && echo "Invalid artifactoryDNSName" && exit 1
                [ -z "$artifactoryAdminUsername" ] && echo "Invalid artifactoryAdminUsername" && exit 1
                [ -z "$artifactoryAdminPassword" ] && echo "Invalid artifactoryAdminPassword" && exit 1
                [ -z "$adminPassword" ] && echo "Invalid adminPassword" && exit 1
                artifactoryDNSName=${artifactoryDNSName,,}
                sed -ibckp -E "s/%artifactoryDNSName%/$artifactoryDNSName/;s/%artifactoryAdminUsername%/$artifactoryAdminUsername/;s/%artifactoryAdminPassword%/$artifactoryAdminPassword/" /root/jenkins_configure_artifactory.groovy
                echo "Configuring ARTIFACTORY..."
                /root/jenkins_call_cli.sh /root/jenkins_configure_artifactory.groovy "$adminPassword"
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/jenkins_configure_sonarqube.groovy':
              content: |
                import jenkins.model.Jenkins
                import hudson.plugins.sonar.*
                sonarqube = Jenkins.instance.getExtensionList('hudson.plugins.sonar.SonarGlobalConfiguration')[0]
                sonarqube.buildWrapperEnabled = false;
                SonarInstallation installation = new SonarInstallation('SONARQUBE', 'http://%sonarqubeDNSName%', '%sonarqubeToken%', null, null, null, null)
                sonarqube.installations = [ installation ]
                sonarqube.save();
                println 'Sonarqube configured...' 
              mode: '000600'
              owner: 'root'
              group: 'root'
            '/root/jenkins_configure_sonarqube.sh':
              content: |
                #!/bin/bash
                sonarqubeDNSName="$1"
                sonarqubeAdminPassword="$2"
                adminPassword="$3"
                [ -z "$sonarqubeDNSName" ] && echo "Invalid sonarqubeDNSName" && exit 1
                [ -z "$sonarqubeAdminPassword" ] && echo "Invalid sonarqubeAdminPassword" && exit 1
                [ -z "$adminPassword" ] && echo "Invalid adminPassword" && exit 1
                # First create a jenkins user 
                sonarqubeDNSName=${sonarqubeDNSName,,}
                apiUrl="http://$sonarqubeDNSName/api"
                jenkinsPassword=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
                jenkinsEmail=jenkins@${sonarqubeAdminEmail##*@}
                curl -s -u "admin:$sonarqubeAdminPassword" -X POST $apiUrl/users/create -F "email=$jenkinsEmail" -F "local=true" -F "login=jenkins" -F "name=Jenkins User" -F "password=$jenkinsPassword"
                sonarqubeToken=$(curl -s -u "admin:$sonarqubeAdminPassword" -X POST $apiUrl/user_tokens/generate -F "login=jenkins" -F "name=JENKINS_TOKEN" | jq ".token" | tr -d '"')
                sed -ibckp -E "s/%sonarqubeDNSName%/$sonarqubeDNSName/;s/%sonarqubeToken%/$sonarqubeToken/" /root/jenkins_configure_sonarqube.groovy
                echo "Configuring SONARQUBE..."
                /root/jenkins_call_cli.sh /root/jenkins_configure_sonarqube.groovy "$adminPassword"
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/jenkins_configure_jdk.groovy':
              content: |
                import jenkins.model.Jenkins
                import hudson.model.JDK
                jdk = new JDK('java-1.8.0', '/etc/alternatives/java_sdk');
                Jenkins.instance.setJDKs([jdk])
                println 'JDK configured...'              
              mode: '000600'
              owner: 'root'
              group: 'root'
            '/root/jenkins_configure_jdk.sh':
              content: |
                #!/bin/bash -x
                adminPassword="$1"
                [ -z "$adminPassword" ] && echo "Invalid adminPassword" && exit 1
                echo "Configuring JDK..."
                /root/jenkins_call_cli.sh /root/jenkins_configure_jdk.groovy "$adminPassword"
              mode: '000700'
              owner: 'root'
              group: 'root'
          commands:
            '01_alternatives_java':
              command: 'sudo /usr/sbin/alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java'
            '02_jenkins_start':
              command: 'sudo service jenkins start'
            '03_jenkins_install_plugins':
              command: !Sub 'sudo /root/jenkins_install_plugins.sh ${JenkinsAdminPassword}'
            '04_jenkins_configure_artifactory':
              command: !Join
                - ' '
                - - 'sudo /root/jenkins_configure_artifactory.sh'
                  - 'Fn::ImportValue': !Sub '${ParentArtifactoryStack}-DNSName'
                  - 'Fn::ImportValue': !Sub '${ParentArtifactoryStack}-AdminUsername'
                  - !Sub '${ArtifactoryAdminPassword}'
                  - !Sub '${JenkinsAdminPassword}'
            '05_jenkins_configure_sonarqube':
              command: !Join
                - ' '
                - - 'sudo /root/jenkins_configure_sonarqube.sh'
                  - 'Fn::ImportValue': !Sub '${ParentSonarqubeStack}-DNSName'
                  - !Sub '${SonarqubeAdminPassword}'
                  - !Sub '${JenkinsAdminPassword}'
            '06_jenkins_configure_jdk':
              command: !Join
                - ' '
                - - 'sudo /root/jenkins_configure_jdk.sh'
                  - !Sub '${JenkinsAdminPassword}'
            '07_jenkins_configure_ldap':
              command: !Join
                - ' '
                - - 'sudo /root/jenkins_configure_ldap.sh'
                  - 'Fn::ImportValue': !Sub '${ParentLDAPStack}-LDAPHostname'
                  - 'Fn::ImportValue': !Sub '${ParentLDAPStack}-LDAPPort'
                  - 'Fn::ImportValue': !Sub '${ParentLDAPStack}-RootDC'
                  - 'Fn::ImportValue': !Sub '${ParentLDAPStack}-ManagerDN'
                  - !Sub '${LDAPManagerPassword}'
                  - !Sub '${JenkinsAdminPassword}'
            '98_application_configured':
              command: 'sudo touch /mnt/jenkins/.application_configured'
            '99_jenkins_restart':
              command: 'sudo service jenkins restart'
          services: 
            sysvinit: 
              jenkins: 
                enabled: true
                ensureRunning: true
    Properties: 
      IamInstanceProfile: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-InstanceProfileTagEC2Instance'      
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      SecurityGroups: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPrivate'
        - !Ref SecurityGroupHealthCheck
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          yum-config-manager --enable epel
          yum update -y
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --verbose --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          /opt/aws/bin/cfn-signal -e $?   --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
  SecurityGroupHealthCheck:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group for the Health Check'
      VpcId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - CidrIp: 
          'Fn::ImportValue': !Sub '${ParentVpcStack}-CidrBlock'
        FromPort: 9000
        ToPort: 9000
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupHealthCheck'

Outputs: 
  DNSName: 
    Description: 'Public DNS address of the internet facing ELB'
    Value: !Sub '${LoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
      