#
# FILE: 04-artifactory.yaml
#
# DESCRIPTION: This Stack create a Artifactory Host as well as an Internet facing LoadBalancer.
#
# NOTE: in order to create the AMI mapping you can run the following command. (needs a bit of massaging: 
#   should extract the ami and the region name, and output everything in the YAML compatible format)
# 
# for region in $(aws ec2 describe-regions --query 'Regions[*].{Name:RegionName}' --output text); do
#   aws --region $region ec2 describe-images --owners amazon --filters "Name=name,Values=amzn-ami-hvm-$(date +%Y)*-gp2" "Name=architecture,Values=x86_64" "Name=root-device-type,Values=ebs" --query 'Images[*].{ID:ImageId}'
# done
#
# TODO: 
# - Should use https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html#aws-specific-parameter-types
# - Should use NestedStack as described in https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html
# - Should provide alert when the platform is unhealthy
# - Should create a Jenkins User (only available for Artifactory PRO :s)
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "This stack create a Artifactory host"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stack'
      Parameters:
      - ParentVpcStack
      - ParentLDAPStack
      - ParentDBStack
    - Label: 
        default: 'EC2 Parameters'
      Parameters:
      - KeyName
      - InstanceType
    - Label: 
        default: 'LDAP Parameter'
      Parameters:
      - LDAPManagerPassword
    - Label:
        default: 'DB Parameters'
      Parameters:
      - DBMasterUserPassword
    - Label:
        default: 'Artifactory Parameters'
      Parameters:
      - ArtifactoryAdminPassword
Parameters: 
  ParentVpcStack: 
    Description: "Enter the name of the VPC Stack where Artifactory will reside"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the VPC stack'
  ParentLDAPStack:
    Description: "Enter the name of the OpenLDAP Stack"
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the LDAP stack'
  ParentDBStack:
    Description: 'Enter the name of the DB Stack'
    Type: String
    MinLength: 1
    ConstraintDescription: 'must be the name of the DB stack'
  InstanceType:
    Description: 'The Artifactory instance type'
    Type: String
    Default: 'c4.large'    
  KeyName: 
    Description: "Optional Key Pair to connect through SSH"
    Type: "AWS::EC2::KeyPair::KeyName"
  LDAPManagerPassword: 
    Description: 'The LDAP Manager password'
    Type: String
    NoEcho: true
    MinLength: 3
  DBMasterUserPassword: 
    Description: 'The DB Admin password'
    Type: String
    NoEcho: true
    MinLength: 3
  ArtifactoryAdminPassword: 
    Description: 'The Artifactory Admin password'
    Type: String
    MinLength: 1
    NoEcho: true
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
Resources: 
  #
  # Let's create the SecurityGroup for the ELB LoadBalancer. Basically it should only allow traffic on the HTTP/S port
  #   from the Internet. If you want to restrict the IP from which to accept traffic, do it here. you can have a look 
  #   at the 01-vpc.yaml, and more specifically the SecurityGroupDMZ for an example.
  #
  SecurityGroupELB:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group to access Artifactory ELB'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - CidrIp : "0.0.0.0/0"
        FromPort: 443
        ToPort: 443
        IpProtocol: tcp
      - CidrIp : "0.0.0.0/0"
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupELB'
  LoadBalancerArtifactory:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: 'internet-facing'
      SecurityGroups:
      - !Ref SecurityGroupELB
      Subnets: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZB'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-LoadBalancerArtifactory'
  TargetGroupArtifactory:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/artifactory/webapp/#/home'
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 8081
      Protocol: HTTP
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-TargetGroupArtifactory'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      TargetGroupAttributes:
        - Key: 'deregistration_delay.timeout_seconds'
          Value: 30
      Targets:
        - Id: !Ref ArtifactoryHost
    DependsOn: ArtifactoryHost
  ListenerArtifactory:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroupArtifactory
        Type: forward
      LoadBalancerArn: !Ref LoadBalancerArtifactory
      Port: 80
      Protocol: HTTP
  #
  # Let's create the Artifactory instance.
  # 
  # TODO: Should have a specific SecurityGroup for the instance in order to only allow traffic on port 8000 (default
  #   Artifactory port). Further more I should enable SSL traffic, but beware that the load balancer might not allow 
  #   communications with a host presenting a self-signed certificate.
  #
  SecurityGroupArtifactory:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group to access the Artifactory instance'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      SecurityGroupIngress:
      - SourceSecurityGroupId: 
          !Ref 'SecurityGroupELB'
        FromPort: 8081
        ToPort: 8081
        IpProtocol: tcp
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecurityGroupArtifactory'
  #
  # Ok let's configure the main host then
  #
  ArtifactoryHost: 
    Type: 'AWS::EC2::Instance'
    Metadata:
      AWS::CloudFormation::Init:
        #
        # The logs for the cfn-init command are available in the instance in /var/log/cfn-init-cmd.log 
        # InstallArtifactory, InstallArtifactoryApps, StartArtifactory 
        configSets: 
          default: [ Bootstrap, BootstrapArtifactory, InstallArtifactory ]
        Bootstrap:
          packages:
            yum:
              htop: []
              awslogs: []
              yum-cron: []
          files:
            '/home/ec2-user/.bashrc':
              content: !Sub |
                [ -f /etc/bashrc ] && . /etc/bashrc
                alias c=clear
                alias l='ls -l'
                alias vi=vim
              mode: '000600'
              owner: 'ec2-user'
              group: 'ec2-user'
            '/root/tag_root_volume.sh':
              content: !Sub |
                #!/bin/bash
                STACK_NAME=${AWS::StackName}
                REGION=${AWS::Region}
                echo "Tagging Root volume..."
                INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                VOLUME_ID=$(aws --region $REGION ec2 describe-volumes --filters "Name=attachment.instance-id,Values=$INSTANCE_ID" "Name=attachment.device,Values=/dev/xvda" --query "Volumes[0].VolumeId" --output text)
                PLATFORM=$(aws --region $REGION ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].Tags" --output table | grep PLATFORM | cut -d '|' -f 3 | sed -e 's/ //g')
                aws --region $REGION ec2 create-tags --resources $VOLUME_ID --tag "Key=Name,Value=$STACK_NAME-VolumeRoot"
                aws --region $REGION ec2 create-tags --resources $VOLUME_ID --tag "Key=PLATFORM,Value=$PLATFORM"
              mode: '000744'
              owner: 'root'
              group: 'root'
          commands:
            '01_install_aws_inspector': 
              command: 'wget -q -O - https://d1wk0tztpsntt1.cloudfront.net/linux/latest/install | sudo bash -s'
            '02_yum_cron_hourly.conf':
              command: "sudo sed -ibckp -E 's/^update_cmd.*/update_cmd = security/;s/^(update_messages|download_updates|apply_updates).*/\\1 = yes/' /etc/yum/yum-cron-hourly.conf"
            '03_yum_cron.conf':
              command: "sudo sed -ibckp -E 's/^(update_messages|download_updates|apply_updates).*/\\1 = yes/' /etc/yum/yum-cron.conf"
            '04_tag_root_volume':
              command: "sudo /root/tag_root_volume.sh"
          services:
            sysvinit:
              yum-cron: 
                enabled: true
                ensureRunning: true
        BootstrapArtifactory:
          packages:
            yum: 
              mysql56: []
              java-1.8.0-openjdk: []
              mysql-connector-java: []
          files: 
            '/etc/yum.repos.d/bintray-jfrog-artifactory-rpms.repo':
              source: 'https://bintray.com/jfrog/artifactory-rpms/rpm'
              mode: "000644"
              owner: "root"
              group: "root"
            '/root/create_fs.sh': 
              content: |
                #!/bin/bash -x
                mkfs -t ext4 /dev/xvdb
                MNT=/mnt/artifactory
                [ ! -d $MNT ] && mkdir $MNT
                mount /dev/xvdb $MNT
                echo "/dev/xvdb $MNT ext4 defaults,nofail 0 2" > /etc/fstab
                [ ! -d $MNT/etc ] && mkdir $MNT/etc
                [ ! -d $MNT/opt ] && mkdir $MNT/opt
                [ ! -d $MNT/var ] && mkdir $MNT/var
                [ ! -d /etc/opt ] && mkdir -p /etc/opt; ln -s $MNT/etc /etc/opt/jfrog
                [ ! -d /opt     ] && mkdir -p /opt;     ln -s $MNT/opt /opt/jfrog
                [ ! -d /var/opt ] && mkdir -p /var/opt; ln -s $MNT/var /var/opt/jfrog
              mode: "000700"
              owner: "root"
              group: "root"
          commands:
            '01_remove_jdk7':
              command: 'sudo yum remove -y java-1.7.0-openjdk'
            '02_alternatives':
              command: 'sudo /usr/sbin/alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java'
            '03_create_fs':
              command: 'sudo /root/create_fs.sh'              
        InstallArtifactory: 
          packages:
            yum:
              jfrog-artifactory-oss: []
          files:
            '/etc/opt/jfrog/artifactory/db.properties':
              content: |
                type=mysql
                driver=com.mysql.jdbc.Driver
                url=jdbc:mysql://%address%:%port%/artifactory?characterEncoding=UTF-8&elideSetAutoCommits=true
                username=artifactory
                password=artifactory
              mode: '000740'
              owner: 'artifactory'
              group: 'artifactory'
            '/root/artifactory_createdb.sh':
              content: !Sub |
                #!/bin/bash
                address=$1
                port=$2
                username=$3
                password=$4
                [ -z "$address" ] && echo "Invalid address" && exit 1
                [ -z "$port" ] && echo "Invalid port" && exit 1
                [ -z "$username" ] && echo "Invalid username" && exit 1
                [ -z "$password" ] && echo "Invalid password" && exit 1
                mysql -h $address -P $port --user=$username --password=$password <<EOF
                DROP DATABASE IF EXISTS artifactory;
                CREATE DATABASE artifactory CHARACTER SET utf8 COLLATE utf8_bin;
                GRANT ALL on artifactory.* TO 'artifactory'@'%' IDENTIFIED BY 'artifactory';
                FLUSH PRIVILEGES;
                EOF
                sed -ibckp -E "s/%address%/$address/;s/%port%/$port/" /etc/opt/jfrog/artifactory/db.properties
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/artifactory_change_password.sh':
              content: |
                #!/bin/bash
                oldPassword="$1"
                newPassword="$2"
                [ -z "$oldPassword" ] && echo "Invalid old password" && exit 1
                [ -z "$newPassword" ] && echo "Invalid new password" && exit 1
                API_URL="http://localhost:8081/artifactory/api"
                header="Content-type: application/json"
                data='{ "userName":"admin", "oldPassword":"'"$oldPassword"'", "newPassword1":"'"$newPassword"'", "newPassword2":"'"$newPassword"'"}'
                url="$API_URL/security/users/authorization/changePassword"
                echo -n "Changing default password for user admin"
                while (true); do
                        result=$(curl -s --user "admin:$oldPassword" -H "$header" -d "$data" -X POST "$url")
                        [ $(echo -n "$result" | grep -c "Password has been successfully changed") -gt 0 ] && break
                        echo -n "."
                        sleep 2
                done
              mode: '000700'
              owner: 'root'
              group: 'root'
            '/root/ldap_settings.yaml': 
              content: |
                security:
                  anonAccessEnabled: false
                  anonAccessToBuildInfosDisabled: true
                  ldapSettings:
                    OpenLDAP:
                      emailAttribute: mail
                      ldapPoisoningProtection: true
                      ldapUrl: 'ldap://%ldapHostname%:%ldapPort%'
                      search:
                        managerDn: '%managerDN%'
                        managerPassword: %managerPassword%
                        searchBase: ou=People,%rootDC%
                        searchFilter: (uid={0})
                        searchSubTree: true
                      allowUserToAccessProfile: true
                      autoCreateUser: true
                      enabled: true
              mode: '000600'
              owner: 'root'
              group: 'root'
            '/root/artifactory_configure_ldap.sh':
              content: |
                #!/bin/bash
                ldapHostname=$1
                ldapPort=$2
                rootDC=$3
                managerDN=$4
                managerPassword=$5
                adminPassword=$6
                [ -z "$ldapHostname" ] && echo "Invalid ldapHostname" && exit 1
                [ -z "$ldapPort" ] && echo "Invalid ldapPort" && exit 1
                [ -z "$rootDC" ] && echo "Invalid rootDC" && exit 1
                [ -z "$managerDN" ] && echo "Invalid managerDN" && exit 1 
                [ -z "$managerPassword" ] && echo "Invalid managerPassword" && exit 1
                [ -z "$adminPassword" ] && echo "Invalid adminPassword" && exit 1
                
                API_URL="http://localhost:8081/artifactory/api"
                header="Content-Type: application/yaml"
                url="$API_URL/system/configuration"
                echo "Configuring LDAP ($ldapHostname:$ldapPort w/ $rootDC) ..."
                sed -ibckp -E "s/%ldapHostname%/$ldapHostname/;s/%ldapPort%/$ldapPort/;s/%managerDN%/$managerDN/;s/%rootDC%/$rootDC/;s/%managerPassword%/$managerPassword/;" /root/ldap_settings.yaml
                curl -s --user "admin:$adminPassword" -H "$header" -T /root/ldap_settings.yaml -X PATCH "$url"
              mode: '000700'
              owner: 'root'
              group: 'root'
          commands:
            '01_create_symlink_for_mysql':
              command: 'sudo ln -s /usr/share/java/mysql-connector-java.jar /var/opt/jfrog/artifactory/tomcat/lib/mysql-connector-java.jar'
            '02_artifactory_createdb':
              command: !Join
                - ' '
                - - 'sudo /root/artifactory_createdb.sh'
                  - 'Fn::ImportValue': !Sub '${ParentDBStack}-EndpointAddress'
                  - 'Fn::ImportValue': !Sub '${ParentDBStack}-EndpointPort'
                  - 'Fn::ImportValue': !Sub '${ParentDBStack}-MasterUsername'
                  - !Sub '${DBMasterUserPassword}'
            '03_chown':
              command: 'sudo chown -R artifactory.artifactory /mnt/artifactory'
            '04_artifactory_start':
              command: 'sudo service artifactory start'
            '05_artifactory_change_password': 
              command: !Sub 'sudo /root/artifactory_change_password.sh password ${ArtifactoryAdminPassword}'
            '06_artifactory_configure_ldap': 
              command: !Join
                - ' '
                - - 'sudo /root/artifactory_configure_ldap.sh'
                  - 'Fn::ImportValue': !Sub '${ParentLDAPStack}-LDAPHostname'
                  - 'Fn::ImportValue': !Sub '${ParentLDAPStack}-LDAPPort'
                  - 'Fn::ImportValue': !Sub '${ParentLDAPStack}-RootDC'
                  - 'Fn::ImportValue': !Sub '${ParentLDAPStack}-ManagerDN'
                  - !Sub '${LDAPManagerPassword}'
                  - !Sub '${ArtifactoryAdminPassword}'
            '99_artifactory_restart': 
              command: 'sudo service artifactory restart'
          services: 
            sysvinit: 
              artifactory: 
                enabled: true
                ensureRunning: true
    Properties: 
      DisableApiTermination: false
      InstanceInitiatedShutdownBehavior: stop
      IamInstanceProfile: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-InstanceProfileTagEC2Instance'      
      ImageId: 'ami-c51e3eb6'
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      SecurityGroupIds: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPrivate'
        - !Ref SecurityGroupArtifactory
      SubnetId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
      Volumes: 
        - VolumeId: !Ref VolumeData
          Device: '/dev/xvdb'
      Monitoring: false
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          yum-config-manager --enable epel
          yum update -y
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --resource ArtifactoryHost --region ${AWS::Region}
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-ArtifactoryHost'
    DependsOn: VolumeData
  VolumeData:
    Type: 'AWS::EC2::Volume'
    Properties:
      Size: 500
      Encrypted: true
      VolumeType: gp2
      AvailabilityZone: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-AvailabilityZoneSubnetPrivateAZA'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-VolumeData'
Outputs: 
  InstanceId: 
    Description: 'InstanceId of the newly created Artifactory instance'
    Value: !Ref ArtifactoryHost
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'
  DNSName: 
    Description: 'Public DNS address of the internet facing ELB'
    Value: !Sub '${LoadBalancerArtifactory.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
  AdminUsername: 
    Description: 'The name of the administrative user'
    Value: 'admin'
    Export:
      Name: !Sub '${AWS::StackName}-AdminUsername'
      