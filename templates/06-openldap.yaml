#
# FILE: 05-gitlab.yaml
#
# DESCRIPTION: This Stack create a OpenLDAP Host.
#
# NOTE: in order to create the AMI mapping you can run the following command. (needs a bit of massaging: 
#   should extract the ami and the region name, and output everything in the YAML compatible format)
# 
# for region in $(aws ec2 describe-regions --query 'Regions[*].{Name:RegionName}' --output text); do
#   aws --region $region ec2 describe-images --owners amazon --filters "Name=name,Values=amzn-ami-hvm-$(date +%Y)*-gp2" "Name=architecture,Values=x86_64" "Name=root-device-type,Values=ebs" --query 'Images[*].{ID:ImageId}'
# done
#
# TODO: 
# - Should use https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html#aws-specific-parameter-types
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: "This stack create a OpenLDAP host"
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stack'
      Parameters:
      - ParentVpcStack
    - Label:
        default: 'EC2 Parameters'
      Parameters:
      - KeyName
      - OpenLDAPInstanceType
    - Label:
        default: 'OpenLDAP Parameters'
      Parameters:
      - OpenLDAPRootDC
      - OpenLDAPAdminPassword
Parameters: 
  ParentVpcStack: 
    Description: "Enter the name of the VPC Stack where OpenLDAP will reside"
    Type: String
    Default: ''
  KeyName: 
    Description: "The OpenLDAP instance Key Pair"
    Type: "AWS::EC2::KeyPair::KeyName"
    ConstraintDescription: "must be an existing EC2 KeyPair."
  OpenLDAPInstanceType:
    Description: 'The OpenLDAP instance type'
    Type: 'String'
    Default: 't2.micro'    
  OpenLDAPRootDC: 
    Description: 'The OpenLDAP base dc element'
    Type: String
    Default: ''
  OpenLDAPAdminPassword: 
    Description: 'The OpenLDAP Admin password'
    Type: String
    Default: ''
    NoEcho: true
Mappings:
  RegionMap:
    'ap-south-1':
      AMI: 'ami-76d6f519'
    'eu-west-3':
      AMI: 'ami-969c2deb'
    'eu-west-2':
      AMI: 'ami-a36f8dc4'
    'eu-west-1':
      AMI: 'ami-ca0135b3'
    'ap-northeast-2':
      AMI: 'ami-c10fa6af'
    'ap-northeast-1':
      AMI: 'ami-92df37ed'
    'sa-east-1':
      AMI: 'ami-3885d854'
    'ca-central-1':
      AMI: 'ami-338a0a57'
    'ap-southeast-1':
      AMI: 'ami-de90a5a2'
    'ap-southeast-2':
      AMI: 'ami-423bec20'
    'eu-central-1':
      AMI: 'ami-9a91b371'
    'us-east-1':
      AMI: 'ami-14c5486b'
    'us-east-2':
      AMI: 'ami-922914f7'
    'us-west-1':
      AMI: 'ami-25110f45'
    'us-west-2':
      AMI: 'ami-e251209a'    
Resources: 
  #
  # Let's create the SecurityGroup for the ELB LoadBalancer. Basically it should only allow traffic on the HTTP/S port
  #   from the Internet. If you want to restrict the IP from which to accept traffic, do it here. you can have a look 
  #   at the 01-vpc.yaml, and more specifically the SecurityGroupDMZ for an example.
  #
  LoadBalancerOpenLDAP:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: 'internal'
      Subnets: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZA'
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPublicAZB'
      Type: 'network'
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-LoadBalancerOpenLDAP'
  TargetGroupOpenLDAP:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPort: 389
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Port: 389
      Protocol: TCP
      Tags:
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-TargetGroupOpenLDAP'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVpcStack}-Vpc'
      TargetGroupAttributes:
        - Key: 'deregistration_delay.timeout_seconds'
          Value: 30
      Targets:
        - Id: !Ref OpenLDAPHost
    DependsOn: OpenLDAPHost
  ListenerOpenLDAP:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroupOpenLDAP
        Type: forward
      LoadBalancerArn: !Ref LoadBalancerOpenLDAP
      Port: 389
      Protocol: TCP
  #
  # Ok let's configure the main host then
  #
  OpenLDAPHost: 
    Type: 'AWS::EC2::Instance'
    Metadata:
      AWS::CloudFormation::Init:
        #
        # The logs for the cfn-init command are available in the instance in /var/log/cfn-init-cmd.log 
        # InstallOpenLDAP, InstallOpenLDAPApps, StartOpenLDAP 
        configSets: 
          default: [ Bootstrap, InstallOpenLDAP ]
        Bootstrap:
          packages:
            yum:
              htop: []
              awslogs: []
              yum-cron: []
          files:
            '/home/ec2-user/.bashrc':
              content: !Sub |
                [ -f /etc/bashrc ] && . /etc/bashrc
                alias c=clear
                alias l='ls -l'
                alias vi=vim
              mode: '000600'
              owner: 'ec2-user'
              group: 'ec2-user'
            '/root/tag_root_volume.sh':
              content: !Sub |
                #!/bin/bash
                STACK_NAME=${AWS::StackName}
                REGION=${AWS::Region}
                echo "Tagging Root volume..."
                INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                VOLUME_ID=$(aws --region $REGION ec2 describe-volumes --filters "Name=attachment.instance-id,Values=$INSTANCE_ID" "Name=attachment.device,Values=/dev/xvda" --query "Volumes[0].VolumeId" --output text)
                PLATFORM=$(aws --region $REGION ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].Tags" --output table | grep PLATFORM | cut -d '|' -f 3 | sed -e 's/ //g')
                aws --region $REGION ec2 create-tags --resources $VOLUME_ID --tag "Key=Name,Value=$STACK_NAME-VolumeRoot"
                aws --region $REGION ec2 create-tags --resources $VOLUME_ID --tag "Key=PLATFORM,Value=$PLATFORM"
              mode: '000744'
              owner: 'root'
              group: 'root'
          commands:
            '01_install_aws_inspector': 
              command: 'wget -q -O - https://d1wk0tztpsntt1.cloudfront.net/linux/latest/install | sudo bash -s'
            '02_yum_cron_hourly.conf':
              command: "sudo sed -ibckp -E 's/^update_cmd.*/update_cmd = security/;s/^(update_messages|download_updates|apply_updates).*/\\1 = yes/' /etc/yum/yum-cron-hourly.conf"
            '03_yum_cron.conf':
              command: "sudo sed -ibckp -E 's/^(update_messages|download_updates|apply_updates).*/\\1 = yes/' /etc/yum/yum-cron.conf"
            '04_tag_root_volume':
              command: "sudo /root/tag_root_volume.sh"
          services:
            sysvinit:
              yum-cron: 
                enabled: true
                ensureRunning: true
        InstallOpenLDAP:
          packages:
            yum:
              openldap: []
              openldap-clients: []
              openldap-servers: []
          files:
            '/etc/openldap/slapd.conf':
              content: !Sub |
                suffix "dc=${OpenLDAPRootDC},dc=com"
              mode: '000744'
              owner: 'root'
              group: 'root'
            '/root/bootstrap.ldif':
              content: |
                include /etc/openldap/schema/core.schema
                include /etc/openldap/schema/cosine.schema
                include /etc/openldap/schema/inetorgperson.schema
                include /etc/openldap/schema/nis.schema
              mode: '000744'
              owner: 'root'
              group: 'root'
            '/root/configure_ldap.sh':
              content: !Sub |
                #!/bin/bash
                password=$1
                domainComponent="$2"
                [ -z "$password" ] && echo "Invalid password" && exit
                [ -z "$domainComponent" ] && echo "Invalid domainComponent" && exit
                # BEWARE the 'dn' line should be equals to the file found in /etc/openldap/slapd.d/cn=config
                ldapmodify -Q -Y EXTERNAL -H ldapi:/// <<EOF
                dn: olcDatabase={2}bdb,cn=config
                changetype: modify
                replace: olcSuffix
                olcSuffix: dc=$domainComponent,dc=local
                EOF
                # TODO: explain
                ldapmodify -Q -Y EXTERNAL -H ldapi:/// <<EOF
                dn: olcDatabase={2}bdb,cn=config
                changetype: modify
                replace: olcRootDN
                olcRootDN: cn=Manager,dc=$domainComponent,dc=local
                EOF
                # Adding the Root password
                ldapmodify -Q -Y EXTERNAL -H ldapi:/// <<EOF
                dn: olcDatabase={2}bdb,cn=config
                changetype: modify
                add: olcRootPW
                olcRootPW: $(slappasswd -s "$password")
                EOF
                # TODO: explain
                ldapadd -Q -Y EXTERNAL -D "cn=Manager,dc=$domainComponent,dc=local" -w "$password" -H ldapi:/// <<EOF
                dn: dc=$domainComponent,dc=local
                dc: $domainComponent
                o: $domainComponent LDAP Server
                description: Root entry for $domainComponent LDAP Server
                objectClass: top
                objectclass: dcObject
                objectclass: organization
                EOF
                # Testing the configuration and importing it into the LDAP directory
                tempDir=$(mktemp -d)
                outputDir=/etc/openldap/slapd.d
                slaptest -f /root/bootstrap.ldif -F $tempDir
                mv $tempDir/cn\=config/cn\=schema/cn\=\{1\}cosine.ldif        $outputDir/cn\=config/cn\=schema
                mv $tempDir/cn\=config/cn\=schema/cn\=\{2\}inetorgperson.ldif $outputDir/cn\=config/cn\=schema
                mv $tempDir/cn\=config/cn\=schema/cn\=\{3\}nis.ldif           $outputDir/cn\=config/cn\=schema
                chown ldap:ldap $outputDir/*
              mode: '000744'
              owner: 'root'
              group: 'root'
          commands:
            '01_copy_default_config':
              command: 'sudo cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG'
            '02_start_slpad':
              command: 'sudo service slapd start'
            '03_configure_ldap':
              command: !Sub 'sudo /root/configure_ldap.sh ${OpenLDAPAdminPassword} ${OpenLDAPRootDC}'
            '04_restart_slpad':
              command: 'sudo service slapd restart'
          services:
            sysvinit:
              slapd: 
                enabled: true
                ensureRunning: true
    Properties: 
      DisableApiTermination: false
      InstanceInitiatedShutdownBehavior: stop
      IamInstanceProfile: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-InstanceProfileTagEC2Instance'      
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref OpenLDAPInstanceType
      KeyName: !Ref 'KeyName'
      SecurityGroupIds: 
        - 'Fn::ImportValue': !Sub '${ParentVpcStack}-SecurityGroupPrivate'
      SubnetId: 
        'Fn::ImportValue': !Sub '${ParentVpcStack}-SubnetPrivateAZA'
      Monitoring: false
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          yum-config-manager --enable epel
          sleep 1
          yum update -y
          sleep 1
          yum install -y aws-cfn-bootstrap
          sleep 1
          /opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --resource OpenLDAPHost --region ${AWS::Region}
      Tags: 
        - Key: PLATFORM
          Value: 
            'Fn::ImportValue': !Sub '${ParentVpcStack}-StackName'
        - Key: Name
          Value: !Sub '${AWS::StackName}-OpenLDAPHost'
Outputs: 
  InstanceId: 
    Description: "InstanceId of the newly created OpenLDAP instance"
    Value: !Ref OpenLDAPHost
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'
  DNSName: 
    Description: "Public DNS address of the internet facing ELB"
    Value: !GetAtt LoadBalancerOpenLDAP.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
