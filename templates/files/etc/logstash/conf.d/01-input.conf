input {

  #### Queries
  file {
    path => [ "/var/log/imported/**/ArcQueriesTrace.log" ]
    #sincedb_path => "/mnt/application/data/ArcQueriesTrace.db"
    codec => multiline {
      pattern => "^(?m)%{YEAR}/%{MONTHNUM}/%{MONTHDAY}%{SPACE}%{HOUR}\:%{MINUTE}\:%{SECOND}"
      max_lines => 100
      what => "previous"
      negate => true
    }

  }

  #### Access logs
  file {
    path => "/var/log/imported/**/SSL_access_*.log"
    #sincedb_path => "/mnt/application/data/Apache.db"
  }

  #### API-backend logs
  file {
    path => "/var/log/imported/**/api-backend.log"
    #sincedb_path => "/mnt/application/data/ApiBackend.db"
  }

}


filter {

  mutate {
    add_field => {
      "source" => "%{[@metadata][path]}"
    }
  }

  grok {
    match => { "source" => "/var/log/imported/%{DATA:platform_id}/%{DATA:host}/%{DATA:application_id}/%{DATA:logtype}/.*$" }
    overwrite => [ "host" ]
  }

  mutate {
    lowercase => [ "application_id" ]
    lowercase => [ "logtype" ]
    lowercase => [ "platform_id" ]
  }


  # Filtering rules start here!!

  # database logs rules
  if ([logtype] == "arcqueriestrace") {

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}/%{SPACE}\|%{SPACE}QUERY={%{SPACE}AFBISO\;%{SPACE}AFBGENERIC\;%{SPACE}INS_MSG_AUDIT.*$" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}/%{SPACE}\|%{SPACE}QUERY={%{SPACE}AFBISO\;%{SPACE}AFBGENERIC\;%{SPACE}INS_SENT_MSG.*$" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}QUERY={%{SPACE}%{DATA:query_name_application}\;%{SPACE}%{DATA:query_name_module}\;%{SPACE}%{DATA:query_name}%{SPACE}}SQL={%{DATA:query_sql}},%{SPACE}PARAMS={%{SPACE}%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}RECORDS=%{NUMBER:query_records},%{SPACE}TIMES={%{NUMBER:query_db_time}ms,%{SPACE}%{NUMBER:query_java_time}ms,%{SPACE}%{NUMBER:query_total_time}ms}$" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}QUERY={%{SPACE}%{DATA:query_name_application}\;%{SPACE}%{DATA:query_name_module}\;%{SPACE}%{DATA:query_name}\;%{DATA:query_sql}%{SPACE}},%{SPACE}PARAMS={%{SPACE}%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}ERROR=%{GREEDYDATA:query_error}$" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}SQL={%{DATA:query_sql}},%{SPACE}PARAMS={%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}RECORDS=%{NUMBER:query_records},%{SPACE}TIMES={%{NUMBER:query_db_time}ms,%{SPACE}%{NUMBER:query_java_time}ms,%{SPACE}%{NUMBER:query_total_time}ms}$" }
        add_field => { "query_name" => "PLAIN_SQL" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}/%{SPACE}\|%{SPACE}SQL={%{DATA:query_sql}},%{SPACE}PARAMS={%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}RECORDS=%{NUMBER:query_records},%{SPACE}TIMES={%{NUMBER:query_db_time}ms,%{SPACE}%{NUMBER:query_java_time}ms,%{SPACE}%{NUMBER:query_total_time}ms}$" }
        add_field => { "query_name" => "PLAIN_SQL" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}SQL={%{DATA:query_sql}},%{SPACE}PARAMS={%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}RECORDS=%{NUMBER:query_records},%{SPACE}TIMES={%{NUMBER:query_db_time}ms,%{SPACE}%{NUMBER:query_java_time}ms,%{SPACE}%{NUMBER:query_total_time}ms}$" }
        add_field => { "query_name" => "PLAIN_SQL" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}QUERY={%{SPACE}%{DATA:query_name_application}\;%{SPACE}%{DATA:query_name_module}\;%{SPACE}%{DATA:query_name}%{SPACE}}SQL={%{DATA:query_sql}},%{SPACE}PARAMS={%{SPACE}%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{GREEDYDATA:query_result},%{SPACE}ERROR=%{GREEDYDATA:query_error}$" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}QUERY={%{SPACE}%{DATA:query_name_application}\;%{SPACE}%{DATA:query_name_module}\;%{SPACE}%{DATA:query_name}%{SPACE}}SQL={\'%{DATA:query_sql}\'}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}ERROR=\{%{DATA:query_error}\}$" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}/%{SPACE}\|%{SPACE}QUERY={%{SPACE}%{DATA:query_name_application}\;%{SPACE}%{DATA:query_name_module}\;%{SPACE}%{DATA:query_name}%{SPACE}}SQL={%{DATA:query_sql}},%{SPACE}PARAMS={%{SPACE}%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{GREEDYDATA:query_result},%{SPACE}ERROR=%{GREEDYDATA:query_error}$" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}\[BUG\]:%{SPACE}The query%{SPACE}%{DATA:query_name_application}\/%{DATA:query_name_module}\/%{DATA:query_name}%{SPACE}used the opened connection mechanism but took too long to close. Forcefully closing it.$" }
        remove_tag => [ "_grokparsefailure" ]
        add_field => { "query_error" => "%{query_name} used the opened connection mechanism but took too long to close. Forcefully closing it." }
        add_field => { "query_result" => "ERROR" }
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}\[BUG\]:%{SPACE}%{GREEDYDATA:bug}$" }
        remove_tag => [ "_grokparsefailure" ]
        add_field => { "query_error" => "%{bug}" }
        add_field => { "query_result" => "ERROR" }
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}\[BUG\]%{SPACE}%{GREEDYDATA:bug}$" }
        remove_tag => [ "_grokparsefailure" ]
        add_field => { "query_error" => "%{bug}" }
        add_field => { "query_result" => "ERROR" }
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}QUERY={%{SPACE}%{DATA:query_name_application}\;%{SPACE}%{DATA:query_name_module}\;%{SPACE}%{DATA:query_name}\;%{DATA:query_sql}%{SPACE}},%{SPACE}PARAMS={%{SPACE}%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}RECORDS=%{NUMBER:query_records},%{SPACE}TIMES={%{NUMBER:query_db_time}ms,%{SPACE}%{NUMBER:query_java_time}ms,%{SPACE}%{NUMBER:query_total_time}ms}$" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}/%{SPACE}\|%{SPACE}QUERY={%{SPACE}%{DATA:query_name_application}\;%{SPACE}%{DATA:query_name_module}\;%{SPACE}%{DATA:query_name}%{SPACE}}SQL={%{DATA:query_sql}},%{SPACE}PARAMS={%{SPACE}%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}RECORDS=%{NUMBER:query_records},%{SPACE}TIMES={%{NUMBER:query_db_time}ms,%{SPACE}%{NUMBER:query_java_time}ms,%{SPACE}%{NUMBER:query_total_time}ms}$" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}QUERY={%{SPACE}%{DATA:query_name_application}\;%{SPACE}%{DATA:query_name_module}\;%{SPACE}%{DATA:query_name}%{SPACE}}SQL={%{DATA:query_sql}},%{SPACE}PARAMS={%{SPACE}%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}RECORDS=%{NUMBER:query_records},%{SPACE}TIMES={%{NUMBER:query_db_time}ms,%{SPACE}%{NUMBER:query_java_time}ms,%{SPACE}%{NUMBER:query_total_time}ms}$" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}QUERY={%{SPACE}%{DATA:query_name_application}\;%{SPACE}%{DATA:query_name_module}\;%{SPACE}%{DATA:query_name}%{SPACE}},%{SPACE}PARAMS={%{SPACE}%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}RECORDS=%{NUMBER:query_records},%{SPACE}TIMES={%{NUMBER:query_db_time}ms,%{SPACE}%{NUMBER:query_java_time}ms,%{SPACE}%{NUMBER:query_total_time}ms}$" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}QUERY={%{SPACE}%{DATA:query_name_application}\;%{SPACE}%{DATA:query_name_module}\;%{SPACE}%{DATA:query_name}%{SPACE}},%{SPACE}PARAMS={%{SPACE}%{GREEDYDATA:query_params}},%{SPACE}RESULT=%{DATA:query_result},%{SPACE}RECORDS=%{NUMBER:query_records},%{SPACE}TIMES={%{NUMBER:query_db_time}ms,%{SPACE}%{NUMBER:query_java_time}ms,%{SPACE}%{NUMBER:query_total_time}ms}$" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }

    mutate {
      convert => { "query_records" => "integer" }
      convert => { "query_java_time" => "integer" }
      convert => { "query_db_time" => "integer" }
      convert => { "query_total_time" => "integer" }
    }

  # access logs rules
  } else if [logtype] == "apache" {

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^%{IPORHOST:client_ip}%{SPACE}-%{SPACE}-%{SPACE}\[%{HTTPDATE:timestampString}\]%{SPACE}\"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:http_version})?|%{DATA:raw_request})\"%{SPACE}%{NUMBER:response}%{SPACE}%{NUMBER:bytes}%{SPACE}\"-\"%{SPACE}%{QS:agent}%{SPACE}\*\*%{NUMBER:request_time_seconds}\/%{NUMBER:request_time_microseconds}\*\*$" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^%{IPORHOST:client_ip}%{SPACE}-%{SPACE}-%{SPACE}\[%{HTTPDATE:timestampString}\]%{SPACE}\"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:http_version})?|%{DATA:raw_request})\"%{SPACE}%{NUMBER:response}%{SPACE}\-%{SPACE}\"%{DATA:referrer}\"%{SPACE}%{QS:agent}%{SPACE}\*\*%{NUMBER:request_time_seconds}\/%{NUMBER:request_time_microseconds}\*\*$" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^%{IPORHOST:client_ip}%{SPACE}-%{SPACE}-%{SPACE}\[%{HTTPDATE:timestampString}\]%{SPACE}\"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:http_version})?|%{DATA:raw_request})\"%{SPACE}%{NUMBER:response}%{SPACE}%{NUMBER:bytes}%{SPACE}\"%{DATA:referrer}\"%{SPACE}%{QS:agent}%{SPACE}\*\*%{NUMBER:request_time_seconds}\/%{NUMBER:request_time_microseconds}\*\*$" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^%{IPORHOST:client_ip}%{SPACE}-%{SPACE}-%{SPACE}\[%{HTTPDATE:timestampString}\]%{SPACE}\"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:http_version})?|%{DATA:raw_request})\"%{SPACE}%{NUMBER:response}%{SPACE}%{NUMBER:bytes}%{SPACE}%{QS:agent}%{SPACE}%{NUMBER:request_time_microseconds}$" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^%{IPORHOST:client_ip}%{SPACE}-%{SPACE}-%{SPACE}\[%{HTTPDATE:timestampString}\]%{SPACE}\"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:http_version})?|%{DATA:raw_request})\"%{SPACE}%{NUMBER:response}%{SPACE}-%{SPACE}%{QS:agent}%{SPACE}%{NUMBER:request_time_microseconds}$" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }

    geoip {
      source => "client_ip"
      target => "geoip"
      database => "/usr/share/logstash/geolite/GeoLite2-City.mmdb"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }

    mutate {
      convert => [ "[geoip][coordinates]", "float"]
      convert => [ "[geoip][location]", "float"]
      convert => [ "request_time_microseconds", "integer" ]
      convert => [ "request_time_seconds", "integer" ]
      convert => [ "bytes", "integer" ]
      add_tag => [ "geolocalized" ]
    }

  } else if [logtype] == "apibackend" {

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{SPACE}%{LOGLEVEL:result}%{SPACE}\|%{DATA:class_name}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}Called%{SPACE}%{WORD}%{SPACE}\(%{DATA:verb}%{SPACE}%{URIPATH:url}%{SPACE}\=\>%{SPACE}%{NUMBER:http_result}\)%{SPACE}in%{SPACE}%{NUMBER:milliseconds}ms" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }

    if( "tcpeGrokked" not in [tags]) {
      grok {
        match => { "message" => "^(?m)%{DATA:timestampString}%{SPACE}\|%{SPACE}%{SPACE}%{LOGLEVEL:result}%{SPACE}\|%{DATA:class_name}%{SPACE}\|%{SPACE}%{DATA:client_id}/%{DATA:user_id}/%{DATA:session_id}/%{DATA:endpoint}%{SPACE}\|%{SPACE}\[BUG\]\:%{SPACE}%{GREEDYDATA:error_message}" }
        remove_tag => [ "_grokparsefailure" ]
        add_tag => [ "tcpeGrokked" ]
      }
    }


  }


  # Common rules once the log line is parsed

  # Name of the elasticsearch index
  mutate { replace => [ '[@metadata][index]', '%{platform_id}_%{application_id}_%{logtype}' ] }

  # Create an unique fingerprint so doplicated messages are not loaded into elasticsearch
  fingerprint {
    source => "message"
    target => "[@metadata][fingerprint]"
    method => "SHA1"
    key => "Log analytics"
    base64encode => true
  }

  # Remove the original log line to save few bytes
  if( "tcpeGrokked" in [tags]) {
    mutate {
      remove_field => [ "message" ]
    }
  }

  # The timestamp may have commas instead of dots. Convert so as to store everything in the same way
  mutate {
    gsub => [
      # replace all commas with dots
      "timestampString", ",", ".",
      "timestampString", " ", ";"
    ]
  }

  # Overwrite event timestamp with the log line's one
  date {
    locale => "en"
    match => [ "timestampString", "YYYY/MM/dd;HH:mm:ss", "dd/MMM/YYYY:HH:mm:ss;Z" ]
    timezone => "Europe/Madrid"
    target => "@timestamp"
    add_tag => [ "dateMatched" ]
    remove_field => [ "timestampString" ]
  }

  if "message" in [fields] or "_grokparsefailure" in [tags] {
    #drop {}
  }
}
