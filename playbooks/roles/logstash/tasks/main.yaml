---
- name: Removing obsolete packages
  yum:
    name: '{{item}}'
    state: absent
  with_items:
    - java-1.7.0-openjdk

- name: Installing default packages
  yum:
    name: '{{item}}'
  with_items:
    - jq
    - java-1.8.0-openjdk
    - amazon-efs-utils

- name: Adding Logstash repository
  copy: src=files/etc/yum.repos.d/logstash.repo dest=/etc/yum.repos.d/logstash.repo mode=644

- name: Import Logstash Signing Key
  rpm_key: key=https://artifacts.elastic.co/GPG-KEY-elasticsearch state=present

- name: Creating and mounting EFS 
  include_role: name=common tasks_from=create_fs

- name: Monitoring application logs
  include_role: name=common tasks_from=configure_awslogs_extra
  with_items: 
    - { name: 'logstash-stdout', filename: '/var/log/logstash-stdout.log' }
    - { name: 'logstash-stderr', filename: '/var/log/logstash-stderr.log' }
    - { name: 'grok_failures', filename: '/var/log/logstash/grok_failures.txt' }
  loop_control:
    loop_var: log

- name: Installing Logstash
  yum: name="{{packages}}"
  vars: 
    packages:
      - logstash

- name: Creating init.d script for Logstash
  shell: '/usr/share/logstash/bin/system-install /etc/logstash/startup.options sysv'
  args:
    creates: /etc/init.d/logstash

- name: Configuring JVM for IPv4
  blockinfile: 
    path: /etc/logstash/jvm.options
    block: '-Djava.net.preferIPv4Stack=true'

- name: Configuring Logstash to listen on IPv4 interface
  lineinfile:
    path: /etc/logstash/logstash.yml
    regexp: '^.*http.host.*'
    line: "http.host: '0.0.0.0'"

- name: Copying Logstash config
  copy: src=files/etc/logstash/conf.d/01-input.conf dest=/etc/logstash/conf.d/01-input.conf mode=644

- name: Templating Logstash config
  template: src='templates{{item.src}}' dest='{{item.src}}' owner='{{item.user}}' group='{{item.user}}' mode='{{item.mode}}'
  with_items:
    - { src: /root/s3_sync_logs.sh, user: root, mode: '0700' }
    - { src: /root/configure_es2cognito.sh, user: root, mode: '0700' }
    - { src: /etc/logstash/conf.d/02-elastic_output.conf, user: logstash, mode: '0644' }

- name: Creating GeoDB directory
  file:
    path: /usr/local/share/GeoLite2-City
    state: directory
    mode: 0755

- name: Downloading GeoDB
  unarchive: 
    src: http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz
    dest: /usr/local/share/GeoLite2-City
    remote_src: yes
    creates: /usr/local/share/GeoLite2-City/GeoLite2-City.mmdb
    extra_opts:
      - --transform
      - 's/.*\(GeoLite2-City.mmdb\)$/\1/' 
      - --gunzip

- name: Scheduling S3 Log Synchronization
  cron:
    name: 'S3 Logs Synchronization'
    minute: '15'
    job: '/root/s3_sync_logs.sh'

- name: Enabling services
  service: name='{{item}}' state=restarted enabled=yes
  with_items:
    - logstash
