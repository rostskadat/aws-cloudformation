---
#
# TODO: Check that whether the password lookup can be used to generate the DB password
#
- name: Creating cleanup playbook
  include_role: name=common tasks_from=cleanup 
  with_items:
    - files/root/playbooks/cleanup.yaml
  loop_control:
    loop_var: cleanup_playbook

- name: Removing obsolete packages
  yum:
    name: '{{item}}'
    state: absent
  with_items:
    - java-1.7.0-openjdk

- name: Installing default packages
  yum:
    name: '{{item}}'
  with_items:
    - jq
    - mysql56
    - py-bcrypt
    - java-1.8.0-openjdk
    - MySQL-python27

- name: Install Python modules
  pip: 
    name: pyapi-gitlab

- name: Adding Sonar repository
  get_url:
    url: http://downloads.sourceforge.net/project/sonar-pkg/rpm/sonar.repo
    dest: /etc/yum.repos.d/sonar.repo
    mode: 644

- name: Creating and mounting EFS
  include_role: name=common tasks_from=create_fs

- name: Monitoring application logs
  include_role: name=common tasks_from=configure_awslogs_extra
  with_items: 
    - { name: 'access', filename: '/opt/sonar/logs/access.log' }
    - { name: 'ce', filename: '/opt/sonar/logs/ce.log' }
    - { name: 'es', filename: '/opt/sonar/logs/es.log' }
    - { name: 'sonar', filename: '/opt/sonar/logs/sonar.log' }
    - { name: 'web', filename: '/opt/sonar/logs/web.log' }
  loop_control:
    loop_var: log

- name: Installing Sonarqube     
  yum: name=sonar

- name: Chown on /mnt/application
  file: dest=/mnt/application owner=sonar group=sonar mode=u=rwX,g=rX,o=rX recurse=yes 

- name: Creating SonarQube DB
  mysql_db:
    name: sonarqube
    state: present
    login_host: '{{DBEndpointAddress}}'
    login_port: '{{DBEndpointPort}}'
    login_user: '{{DBAdminUsername}}'
    login_password: '{{DBAdminPassword}}'

- name: Creating SonarQube DB User
  mysql_user:
    name: sonarqube
    password: sonarqube
    host: '%'
    state: present
    priv: 'sonarqube.*:ALL'
    login_host: '{{DBEndpointAddress}}'
    login_port: '{{DBEndpointPort}}'
    login_user: '{{DBAdminUsername}}'
    login_password: '{{DBAdminPassword}}'

- name: Templating /opt/sonar/conf/sonar.properties
  template: 
    src: 'templates{{item.src}}'
    dest: '{{item.src}}'
    owner: sonar
    group: sonar
    mode: '{{item.mode}}'
  with_items:
    - { src: /opt/sonar/conf/sonar.properties, mode: '0600' }

- name: Starting Sonar
  service: name=sonar state=started

- block:
    - name: Validating admin credentials
      uri: url=http://localhost:9000/api/authentication/validate user=admin password=admin force_basic_auth=yes
      register: response
      until: 
        - response.status == 200
        - response.json is defined
      retries: 10
      delay: 6
    - name: Settings default credentials 
      set_fact: current_password='admin'
      when: response.json.valid == true
    - name: Settings final credentials 
      set_fact: current_password='{{SonarqubeAdminPassword}}'
      when: response.json.valid == false

- name: Listing installed plugins
  block:
    - uri:
        url: 'http://localhost:9000/api/plugins/installed'
        user: admin
        password: '{{current_password}}'
        force_basic_auth: yes
        status_code: 200
      register: installed_plugins
    - name: Saving installed_plugins.json
      copy: content='{{installed_plugins.json}}' dest=/tmp/installed_plugins.json
    - name: Filtering keys
      shell: cat /tmp/installed_plugins.json | jq -r '.plugins[].key' > /tmp/installed_plugins.txt

- name: Installing plugins
  include_tasks:  install_plugins.yaml
  with_items:
    - checkstyle
    - cssfamily
    - findbugs
    - gitlab
    - go
    - groovy
    - issueresolver
    - java
    - javascript
    - jdepend
    - l10nes
    - ldap
    - php
    - pmd
    - python
    - scmgit
    - smells
    - softvis3d
    - Sonargraph
    - sonargraphintegration
    - status
    - web
    - xanitizer
    - xml
  loop_control:
    loop_var: plugin

- include_role: name=sonarqube tasks_from=restart_and_wait

- name: Copy /root/add_user_to_gitlab.sh
  copy: src='files/root/add_user_to_gitlab.sh' dest='/root/add_user_to_gitlab.sh' mode=u=rwx  

- name: Creating Gitlab user for Sonarqube
  shell: '/root/add_user_to_gitlab.sh "{{GitlabDNSName}}" "{{GitlabAdminUsername}}" "{{GitlabAdminPassword}}" "{{SonarqubeAdminEmail}}" /mnt/application/gitlab_token'

- name: Apply configuration settings
  uri:
    url: 'http://localhost:9000/api/settings/set?key={{item.key}}&value={{item.value}}'
    method: POST
    user: admin
    password: '{{current_password}}'
    force_basic_auth: yes
    status_code: 204,400
  with_items:
    - { key: 'sonar.gitlab.url',                value: 'https://{{GitlabDNSName}}' }
    - { key: 'sonar.gitlab.ignore_certificate', value: 'true' }
    - { key: 'sonar.gitlab.user_token',         value: '{{ lookup("file", "/mnt/application/gitlab_token") }}' }
    - { key: 'sonar.gitlab.ping_user',          value: 'true' }
    - { key: 'email.from',                           value: '{{SonarqubeAdminEmail}}' }
    - { key: 'email.smtp_secure_connection.secured', value: 'ssl' }
    - { key: 'email.smtp_host.secured',              value: '{{SmtpHostname}}' }
    - { key: 'email.smtp_port.secured',              value: '465' }
    - { key: 'email.smtp_username.secured',          value: '{{SmtpUsername}}' }
    - { key: 'email.smtp_password.secured',          value: '{{SmtpPassword}}' }

- name: Changing password
  uri:
    url: http://localhost:9000/api/users/change_password
    method: POST
    user: admin
    password: '{{current_password}}'
    force_basic_auth: yes
    body: 'login=admin&password={{SonarqubeAdminPassword}}&previousPassword={{current_password}}'
    status_code: 204
  when: current_password == 'admin'

- name: Setting up LDAP authentication
  lineinfile:
    path: /opt/sonar/conf/sonar.properties
    regexp: '^#sonar.security.realm=.*'
    line: 'sonar.security.realm=LDAP'

- name: Enabling services
  service: name='{{item}}' state=restarted enabled=yes
  with_items:
    - sonar
    
  